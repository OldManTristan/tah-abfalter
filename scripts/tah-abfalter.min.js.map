{"version":3,"file":"tah-abfalter.min.js","sources":["constants.js","utils.js","action-handler.js","defaults.js","settings.js","roll-handler.js","system-manager.js","init.js"],"sourcesContent":["export const LOG_PREFIX = 'TAH-abfalter | '\n\n/**\n * Module-based constants\n */\nexport const MODULE = {\n    ID: 'tah-abfalter'\n}\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n    ID: 'token-action-hud-core'\n}\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '2.0' //update this when new Core functions are needed\n\n/**\n * Damage type icons\n */\nexport const DAMAGE_TYPE_ICONS = {\n    axe: 'fa-solid fa-axe fa-fw',\n    brain: 'fa-solid fa-brain fa-fw',\n    bolt: 'fa-solid fa-bolt fa-fw',\n    'bow-arrow': 'fa-solid fa-bow-arrow fa-fw',\n    droplet: 'fa-solid fa-droplet fa-fw',\n    fire: 'fa-solid fa-fire fa-fw',\n    ghost: 'fa-solid fa-ghost fa-fw',\n    hammer: 'fa-solid fa-hammer fa-fw',\n    skull: 'fa-solid fa-skull fa-fw',\n    snowflake: 'fa-solid fa-snowflake fa-fw',\n    spider: 'fa-solid fa-spider fa-fw',\n    sun: 'fa-solid fa-sun fa-fw',\n    vial: 'fa-solid fa-vial fa-fw',\n    'waveform-lines': 'fa-solid fa-waveform-lines fa-fw'\n}\n\n/**\n * Action icons\n */\nexport const ACTION_ICON = {\n    1: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>A</span>',\n    2: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>D</span>',\n    3: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>T</span>',\n    free: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>F</span>',\n    reaction: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>R</span>',\n    passive: '',\n    A: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>A</span>',\n    D: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>D</span>',\n    T: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>T</span>',\n    F: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>F</span>',\n    R: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>R</span>',\n    ...DAMAGE_TYPE_ICONS\n}\n\n/**\n * Action type\n */\nexport const ACTION_TYPE = {\n    //action: 'TYPES.Item.action',\n    attribute: 'attribute',\n    condition: 'TYPES.Item.condition',\n    effect: 'TYPES.Item.effect',\n    //familiarAttack: 'PF2E.AttackLabel',\n    //feat: 'PF2E.Item.Feat.LevelLabel',\n    //heroAction: 'tokenActionHud.pf2e.heroAction',\n    initiative: 'abfalter.initiative',\n    item: 'PF2E.ItemTitle',\n    save: 'abfalter.resistances',\n    ability: 'abfalter.ability',\n    //skillAction: 'tokenActionHud.pf2e.skillAction',\n    spell: 'TYPES.Item.spell',\n    strike: 'strikes',\n    strikeAuxiliaryAction: 'strikesAux',\n    toggle: 'toggle',\n    utility: 'tokenActionHud.utility'\n}\n\n/**\n * Carry types icons\n */\nexport const CARRY_TYPE_ICON = {\n    held1: {\n        icon: '<span class=\"fa-stack fa-fw fa-2xs\" data-tooltip=\"placeholder\"><i class=\"fa-solid fa-hand-back-fist fa-stack-2x\"></i><i class=\"fab fa-1 fa-stack-1x\" style=\"filter: invert(1);\"></i></span>',\n        tooltip: 'PF2E.CarryType.held1'\n    },\n    held2: {\n        icon: '<span class=\"fa-stack fa-fw fa-2xs\" data-tooltip=\"placeholder\"><i class=\"fa-solid fa-hand-back-fist fa-stack-2x\"></i><i class=\"fab fa-2 fa-stack-1x\" style=\"filter: invert(1);\"></i></span>',\n        tooltip: 'PF2E.CarryType.held2'\n    },\n    dropped: {\n        icon: '<i class=\"fas fa-grip-lines fa-fw\" data-tooltip=\"placeholder\"></i>',\n        tooltip: 'PF2E.CarryType.dropped'\n    },\n    stowed: {\n        icon: '<i class=\"fas fa-box fa-fw\" data-tooltip=\"placeholder\"></i>',\n        tooltip: 'PF2E.CarryType.stowed'\n    },\n    worn: {\n        icon: '<i class=\"fas fa-tshirt fa-fw\" data-tooltip=\"placeholder\"></i>',\n        tooltip: 'PF2E.CarryType.worn'\n    }\n}\n\n/**\n * Modular options\n */\nexport const MODULAR_OPTION = {\n    bludgeoning: 'PF2E.TraitBludgeoning',\n    piercing: 'PF2E.TraitPiercing',\n    slashing: 'PF2E.TraitSlashing'\n}\n\n/**\n * Skill abbreviations\n */\nexport const SKILL_ABBREVIATION = {\n    acrobatics: 'acr',\n    arcana: 'arc',\n    athletics: 'ath',\n    crafting: 'cra',\n    deception: 'dec',\n    diplomacy: 'dip',\n    intimidation: 'itm',\n    medicine: 'med',\n    nature: 'nat',\n    occultism: 'occ',\n    performance: 'prf',\n    perception: 'per',\n    religion: 'rel',\n    society: 'soc',\n    stealth: 'ste',\n    survival: 'sur',\n    thievery: 'thi'\n}\n\n/**\n * Strike icons\n */\nexport const STRIKE_ICON = {\n    melee: 'systems/pf2e/icons/mdi/sword.svg',\n    thrown: 'systems/pf2e/icons/mdi/thrown.svg'\n}\n\n/**\n * Strike usage\n */\nexport const STRIKE_USAGE = {\n    melee: { name: 'PF2E.WeaponRangeMelee' },\n    ranged: { name: 'PF2E.NPCAttackRanged' },\n    thrown: { name: 'PF2E.TraitThrown' }\n}\n\n/**\n * Groups\n */\nexport const GROUP = {\n    //attack: { id: 'attack', name: 'PF2E.AttackLabel', type: 'system' },\n    //toggles: { id: 'toggles', name: 'PF2E.TogglesLabel', type: 'system' },\n    //strikes: { id: 'strikes', name: 'PF2E.StrikesLabel', type: 'system' },\n    //actions: { id: 'actions', name: 'PF2E.ActionsActionsHeader', type: 'system' },\n    //reactions: { id: 'reactions', name: 'PF2E.ActionsReactionsHeader', type: 'system' },\n    //freeActions: { id: 'free-actions', name: 'PF2E.ActionsFreeActionsHeader', type: 'system' },\n    //passives: { id: 'passives', name: 'PF2E.NPC.PassivesLabel', type: 'system' },\n    //skillActionsGrouped: { id: 'skill-actions-grouped', name: 'tokenActionHud.pf2e.skillActions', listName: 'tokenActionHud.pf2e.skillActionsGrouped', type: 'system' },\n    //skillActionsUngrouped: { id: 'skill-actions-ungrouped', name: 'tokenActionHud.pf2e.skillActions', listName: 'tokenActionHud.pf2e.skillActionsUngrouped', type: 'system', settings: { sort: true } },\n    //weapons: { id: 'weapons', name: 'tokenActionHud.pf2e.weapons', type: 'system' },\n    //shields: { id: 'shields', name: 'tokenActionHud.pf2e.shields', type: 'system' },\n    //armor: { id: 'armor', name: 'tokenActionHud.pf2e.armor', type: 'system' },\n    //equipment: { id: 'equipment', name: 'tokenActionHud.pf2e.equipment', type: 'system' },\n    //consumables: { id: 'consumables', name: 'tokenActionHud.pf2e.consumables', type: 'system' },\n    //containers: { id: 'containers', name: 'tokenActionHud.pf2e.containers', type: 'system' },\n    //treasure: { id: 'treasure', name: 'tokenActionHud.pf2e.treasure', type: 'system' },\n    //ancestryFeatures: { id: 'ancestry-features', name: 'PF2E.Actor.Character.FeatSlot.AncestryFeaturesHeader', type: 'system' },\n    //classFeatures: { id: 'class-features', name: 'PF2E.Actor.Character.FeatSlot.ClassFeaturesHeader', type: 'system' },\n    //ancestryFeats: { id: 'ancestry-feats', name: 'PF2E.Actor.Character.FeatSlot.AncestryHeader', type: 'system' },\n    //classFeats: { id: 'class-feats', name: 'PF2E.Actor.Character.FeatSlot.ClassHeader', type: 'system' },\n    //skillFeats: { id: 'skill-feats', name: 'PF2E.Actor.Character.FeatSlot.SkillHeader', type: 'system' },\n    //generalFeats: { id: 'general-feats', name: 'PF2E.Actor.Character.FeatSlot.GeneralHeader', type: 'system' },\n    //bonusFeats: { id: 'bonus-feats', name: 'PF2E.Actor.Character.FeatSlot.BonusHeader', type: 'system' },\n    //spells: { id: 'spells', name: 'PF2E.Item.Spell.Plural', type: 'system' },\n    //heroPoints: { id: 'hero-points', name: 'PF2E.Actor.Resource.HeroPoints', type: 'system' },\n    //mythicPoints: { id: 'mythic-points', name: 'PF2E.Actor.Resource.MythicPoints', type: 'system' },\n    //perceptionCheck: { id: 'perception-check', name: 'PF2E.PerceptionLabel', type: 'system' },\n    //coreSkills: { id: 'core-skills', name: 'PF2E.CoreSkillsHeader', type: 'system' },\n    //loreSkills: { id: 'lore-skills', name: 'PF2E.LoreSkillsHeader', type: 'system' },\n    //conditions: { id: 'conditions', name: 'PF2E.ConditionsLabel', type: 'system' },\n    //socialConditions: { id: 'social-conditions', name: 'tokenActionHud.pf2e.socialConditions', type: 'system' },\n    //otherConditions: { id: 'other-conditions', name: 'tokenActionHud.pf2e.otherConditions', type: 'system' },\n    //effects: { id: 'effects', name: 'PF2E.EffectsLabel', type: 'system' },\n    //combat: { id: 'combat', name: 'tokenActionHud.combat', type: 'system' },\n    //token: { id: 'token', name: 'tokenActionHud.token', type: 'system' },\n    //recoveryCheck: { id: 'recovery-check', name: 'PF2E.Check.Specific.Recovery', type: 'system' },\n    //rests: { id: 'rests', name: 'tokenActionHud.pf2e.rests', type: 'system' },\n    //saves: { id: 'saves', name: 'PF2E.SavesHeader', type: 'system' },\n    //utility: { id: 'utility', name: 'tokenActionHud.utility', type: 'system' },\n    /*initiative: { id: 'initiative', name: 'PF2E.InitiativeLabel', type: 'system' },\n    abilities: { id:'abilities', name: 'tokenActionHud.abfalter.ability.full', type: 'system'},\n    favAbilities: { id:'fav_abilities', name: 'tokenActionHud.abfalter.abilities', type: 'system'},\n    athAbilities: { id:'ath_abilities', name: 'tokenActionHud.abfalter.abilities', type: 'system'},\n    creaAbilities: { id:'crea_abilities', name: 'tokenActionHud.abfalter.abilities', type: 'system'},\n    intAbilities: { id:'int_abilities', name: 'tokenActionHud.abfalter.abilities', type: 'system'},\n    subAbilities: { id:'sub_abilities', name: 'tokenActionHud.abfalter.abilities', type: 'system'},\n    socAbilities: { id:'soc_abilities', name: 'tokenActionHud.abfalter.abilities', type: 'system'},\n    vigAbilities: { id:'vig_abilities', name: 'tokenActionHud.abfalter.abilities', type: 'system'},\n    custAbilities: { id:'cust_abilities', name: 'tokenActionHud.abfalter.abilities', type: 'system'},\n    DEV: { id: 'DEV', name: 'DEV', type: 'system'}*/\n}\n\n/**\n * Skill actions\n */\nexport const SKILL_ACTION = {\n    l5pbgrj8SSNtRGs8: { name: 'PF2E.Actions.AdministerFirstAid.Stabilize.Title', actionCost: 2, skill: 'medicine', image: 'systems/pf2e/icons/features/feats/treat-wounds.webp' },\n    ZEWD4zcEDQwYhVT8: { name: 'PF2E.Actions.AdministerFirstAid.StopBleeding.Title', actionCost: 2, skill: 'medicine', image: 'systems/pf2e/icons/conditions/persistent-damage.webp' },\n    '55mxH0w8UkY1o3Xv': { name: 'PF2E.Actions.Balance.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/skills/movement/feet-winged-boots-brown.webp' },\n    LXCy1iJddD95Z91s: { name: 'PF2E.Actions.Climb.Title', skill: 'athletics', actionCost: 1, image: 'icons/sundries/misc/ladder.webp' },\n    '9RNumMausgG7adgL': { name: 'PF2E.Actions.Coerce.Title', skill: 'intimidation', actionCost: 'passive', image: 'icons/skills/social/intimidation-impressing.webp' },\n    xcrdOOiN0l6O1sIn: { name: 'PF2E.Actions.CommandAnAnimal.Title', skill: 'nature', actionCost: 1, image: 'icons/environment/creatures/horse-white.webp' },\n    zn0HadZeoKDALxRu: { name: 'PF2E.Actions.ConcealAnObject.Title', skill: 'stealth', actionCost: 1, image: 'systems/pf2e/icons/equipment/adventuring-gear/wax-key-blank.webp' },\n    Tu7LIRelQsiOuo1l: { name: 'PF2E.Actions.Craft.Title', skill: 'crafting', actionCost: 'passive', image: 'icons/skills/trades/smithing-anvil-silver-red.webp' },\n    aDsYSdRqiC6qQIOQ: { name: 'PF2E.Actions.CreateADiversion.DistractingWords.Title', skill: 'deception', actionCost: 1, image: 'icons/magic/control/mouth-smile-deception-purple.webp' },\n    zUJ0UhuoFt5a7tiN: { name: 'PF2E.Actions.CreateADiversion.Gesture.Title', skill: 'deception', actionCost: 1, image: 'icons/skills/social/wave-halt-stop.webp' },\n    '1JpYPlIkjyseE9JU': { name: 'PF2E.Actions.CreateADiversion.Trick.Title', skill: 'deception', actionCost: 1, image: 'systems/pf2e/icons/spells/charming-words.webp' },\n    mNphXpAkmGsMadUv: { name: 'PF2E.Actions.CreateForgery.Title', skill: 'society', actionCost: 'passive', image: 'systems/pf2e/icons/spells/transcribe-moment.webp' },\n    U6WjxFPn4fUqIrfl: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'arcana', actionCost: 'passive', image: 'icons/skills/trades/academics-book-study-runes.webp' },\n    RZyfkw1DiqVy3JUC: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'occultism', actionCost: 'passive', image: 'icons/skills/trades/academics-book-study-purple.webp' },\n    sDUERv4E88G5BRPr: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'religion', actionCost: 'passive', image: 'systems/pf2e/icons/equipment/other/spellbooks/thresholds-of-truth.webp' },\n    YWAvvDXpdW1fYPFo: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'society', actionCost: 'passive', image: 'icons/skills/trades/academics-study-reading-book.webp' },\n    nEwqNNWX6scLt4sc: { name: 'PF2E.Actions.Demoralize.Title', skill: 'intimidation', actionCost: 1, image: 'icons/skills/social/intimidation-impressing.webp' },\n    T2QNEoRojMWEec4a: { name: 'PF2E.Actions.DisableDevice.Title', skill: 'thievery', actionCost: 2, image: 'systems/pf2e/icons/equipment/adventuring-gear/thieves-tools.webp' },\n    ooiO59Ch2QaebOmc: { name: 'PF2E.Actions.Disarm.Title', skill: 'athletics', actionCost: 1, image: 'icons/skills/melee/sword-damaged-broken-glow-red.webp' },\n    '50Q0DYL33Kalu1BH': { name: 'PF2E.Actions.Escape.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/skills/movement/feet-winged-boots-glowing-yellow.webp' },\n    lkEcQQss16SIrVxM: { name: 'PF2E.Actions.Escape.Title', skill: 'athletics', actionCost: 1, image: 'icons/skills/movement/feet-winged-boots-glowing-yellow.webp' },\n    RjfPFjqPrNve6eeh: { name: 'PF2E.Actions.Feint.Title', skill: 'deception', actionCost: 1, image: 'icons/skills/melee/maneuver-sword-katana-yellow.webp' },\n    yMTKMnaYSGtDz4wk: { name: 'PF2E.Actions.ForceOpen.Title', skill: 'athletics', actionCost: 1, image: 'icons/equipment/feet/boots-armored-steel.webp' },\n    rCgGPEyXbzLFcio6: { name: 'PF2E.Actions.GatherInformation.Title', skill: 'diplomacy', actionCost: 'passive', image: 'icons/skills/social/diplomacy-handshake.webp' },\n    i95kcGLIQKOTsnv6: { name: 'PF2E.Actions.Grapple.Title', skill: 'athletics', actionCost: 'passive', image: 'icons/skills/melee/unarmed-punch-fist.webp' },\n    FlM3HvpnsZpCKawG: { name: 'PF2E.Actions.Hide.Title', skill: 'stealth', actionCost: 1, image: 'systems/pf2e/icons/features/classes/wild.webp' },\n    v3dlDjFlOmT5T2gC: { name: 'PF2E.Actions.HighJump.Title', skill: 'athletics', actionCost: 2, image: 'icons/skills/movement/arrows-up-trio-red.webp' },\n    k5nW4jGyXD0Oq9LR: { name: 'PF2E.Actions.Impersonate.Title', skill: 'deception', actionCost: 'passive', image: 'icons/equipment/head/mask-carved-scream-tan.webp' },\n    VTg4t8kYTvXcHROq: { name: 'PF2E.Actions.Lie.Title', skill: 'deception', actionCost: 'passive', image: 'icons/magic/control/mouth-smile-deception-purple.webp' },\n    QPsV0qi2zXm7syt6: { name: 'PF2E.Actions.LongJump.Title', skill: 'athletics', actionCost: 2, image: 'icons/skills/movement/figure-running-gray.webp' },\n    '1Sj2Pz3VI2SFWqZw': { name: 'PF2E.Actions.MakeAnImpression.Title', skill: 'diplomacy', actionCost: 'passive', image: 'icons/environment/people/commoner.webp' },\n    '9Ul5Op5OceT9P5SS': { name: 'PF2E.Actions.ManeuverInFlight.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/commodities/biological/wing-bird-white.webp' },\n    Gj68YCVlDjc75iCP: { name: 'PF2E.Actions.PalmAnObject.Title', skill: 'thievery', actionCost: 1, image: 'icons/sundries/gaming/playing-cards.webp' },\n    dWcrojMk0d2WRPBq: { name: 'PF2E.Actions.Perform.Title', skill: 'performance', actionCost: 1, image: 'icons/skills/trades/music-singing-voice-blue.webp' },\n    '8YrH37NzKRuiKFbF': { name: 'PF2E.Actions.PickALock.Title', skill: 'thievery', actionCost: 2, image: 'icons/sundries/misc/lock-bronze-reinforced.webp' },\n    BQTA7bL264189Xla: { name: 'PF2E.Actions.Repair.Title', skill: 'crafting', actionCost: 'passive', image: 'icons/tools/smithing/anvil.webp' },\n    tbveXG4gaIoKnsWX: { name: 'PF2E.Actions.Request.Title', skill: 'diplomacy', actionCost: 1, image: 'icons/skills/social/thumbsup-approval-like.webp' },\n    tikhJ2b6AMh7wQU7: { name: 'PF2E.Actions.Seek.Title', skill: 'perception', actionCost: 1, image: 'icons/tools/scribal/magnifying-glass.webp' },\n    LN67MgbGE8IHb2X0: { name: 'PF2E.Actions.SenseDirection.Title', skill: 'survival', actionCost: 'passive', image: 'icons/tools/navigation/compass-brass-blue-red.webp' },\n    PmHt7Gb5fCrlWWTr: { name: 'PF2E.Actions.SenseMotive.Title', skill: 'perception', actionCost: 1, image: 'icons/environment/people/commoner.webp' },\n    yNry1xMZqdWHncbV: { name: 'PF2E.Actions.Shove.Title', skill: 'athletics', actionCost: 1, image: 'systems/pf2e/icons/spells/hydraulic-push.webp' },\n    HSTkVuv0SjTNK3Xx: { name: 'PF2E.Actions.Sneak.Title', skill: 'stealth', actionCost: 1, image: 'systems/pf2e/icons/conditions/unnoticed.webp' },\n    UKHPveLpG7hUs4D0: { name: 'PF2E.Actions.Squeeze.Title', skill: 'acrobatics', actionCost: 'passive', image: 'icons/commodities/tech/claw-mechanical.webp' },\n    zjovbAeuLvyuWFKd: { name: 'PF2E.Actions.Steal.Title', skill: 'thievery', actionCost: 1, image: 'icons/containers/bags/coinpouch-gold-red.webp' },\n    mkKko3CEBCyJVQw1: { name: 'PF2E.Actions.Subsist.Title', skill: 'society', actionCost: 'passive', image: 'icons/environment/settlement/building-rubble.webp' },\n    zkqh01BoXDVgydzo: { name: 'PF2E.Actions.Subsist.Title', skill: 'survival', actionCost: 'passive', image: 'icons/environment/wilderness/camp-improvised.webp' },\n    TIlUkCzviYxdVk4E: { name: 'PF2E.Actions.Swim.Title', skill: 'athletics', actionCost: 1, image: 'icons/creatures/fish/fish-shark-swimming.webp' },\n    Al5LYMMdeDcpC9Br: { name: 'PF2E.Actions.Track.Title', skill: 'survival', actionCost: 'passive', image: 'systems/pf2e/icons/conditions/observed.webp' },\n    m4iM5r3TfvQs5Y2n: { name: 'PF2E.Actions.TreatDisease.Title', skill: 'medicine', actionCost: 'passive', image: 'icons/magic/nature/root-vine-caduceus-healing.webp' },\n    R03LRl2RBbsm6EcF: { name: 'PF2E.Actions.TreatPoison.Title', skill: 'medicine', actionCost: 1, image: 'systems/pf2e/icons/effects/treat-poison.webp' },\n    gRj7xUfcpUZQLrOC: { name: 'PF2E.Actions.Trip.Title', skill: 'athletics', actionCost: 1, image: 'icons/skills/wounds/bone-broken-marrow-yellow.webp' },\n    '2qhYHkcSsTJoSwrJ': { name: 'PF2E.Actions.TumbleThrough.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/skills/movement/feet-winged-sandals-tan.webp' }\n}\n\n/**\n * Skills\n */\nexport const SKILL = {\n    acrobatics: { name: 'PF2E.SkillAcrobatics' },\n    arcana: { name: 'PF2E.SkillArcana' },\n    athletics: { name: 'PF2E.SkillAthletics' },\n    crafting: { name: 'PF2E.SkillCrafting' },\n    deception: { name: 'PF2E.SkillDeception' },\n    diplomacy: { name: 'PF2E.SkillDiplomacy' },\n    intimidation: { name: 'PF2E.SkillIntimidation' },\n    lore: { name: 'PF2E.SkillLore' },\n    medicine: { name: 'PF2E.SkillMedicine' },\n    nature: { name: 'PF2E.SkillNature' },\n    occultism: { name: 'PF2E.SkillOccultism' },\n    perception: { name: 'PF2E.PerceptionLabel' },\n    performance: { name: 'PF2E.SkillPerformance' },\n    religion: { name: 'PF2E.SkillReligion' },\n    society: { name: 'PF2E.SkillSociety' },\n    stealth: { name: 'PF2E.SkillStealth' },\n    survival: { name: 'PF2E.SkillSurvival' },\n    thievery: { name: 'PF2E.SkillThievery' }\n}\n\n/**\n * Item types\n */\nexport const ITEM_TYPE = {\n    advantage: { groupId: 'advantage' },\n    disadvantage: { groupId: 'disadvantage' },\n    elan: { groupId: 'elan' },\n    proficiency: { groupId: 'proficiency' },\n    spell: { groupId: 'spell' },\n    spellPath: { groupId: 'spellPath' },\n    turnMaint: { groupId: 'turnMaint' },\n    dailyMaint: { groupId: 'dailyMaint' },\n    incarnation: { groupId: 'incarnation' },\n    invocation: { groupId: 'invocation' },\n    mentalPattern: { groupId: 'mentalPattern' },\n    psychicMatrix: { groupId: 'psychicMatrix' },\n    maintPower: { groupId: 'maintPower' },\n    discipline: { groupId: 'discipline' },\n    arsMagnus: { groupId: 'arsMagnus' },\n    martialArt: { groupId: 'martialArt' },\n    kiTechnique: { groupId: 'kiTechnique' },\n    kiSealCreature: { groupId: 'kiSealCreature' },\n    armor: { groupId: 'armor' },\n    armorHelmet: { groupId: 'armorHelmet' },\n    weapon: { groupId: 'weapon' },\n    ammo: { groupId: 'ammo' },\n    inventory: { groupId: 'inventory' },\n    currency: { groupId: 'currency' },\n    class: { groupId: 'class' }\n}\n\nexport const ABILITY_TYPE = {\n    acrobatic: { groupId: 'abilAcro'},\n    acrobatics: { groupId: 'abilAcro'}\n}","import { MODULE } from './constants.js'\r\n\r\nexport let Utils = null\r\n\r\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\r\n    /**\r\n     * Utility functions\r\n     */\r\n    Utils = class Utils {\r\n        /**\r\n         * Get setting\r\n         * @param {string} key               The key\r\n         * @param {string=null} defaultValue The default value\r\n         * @returns {string}                 The setting value\r\n         */\r\n        static getSetting (key, defaultValue = null) {\r\n            let value = defaultValue ?? null\r\n            try {\r\n                value = game.settings.get(MODULE.ID, key)\r\n            } catch {\r\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\r\n            }\r\n            return value\r\n        }\r\n\r\n        /**\r\n         * Set setting\r\n         * @param {string} key   The key\r\n         * @param {string} value The value\r\n         */\r\n        static async setSetting (key, value) {\r\n            try {\r\n                value = await game.settings.set(MODULE.ID, key, value)\r\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\r\n            } catch {\r\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\r\n            }\r\n        }\r\n    }\r\n})\r\n","// System Module Imports\nimport { ACTION_ICON, ACTION_TYPE, CARRY_TYPE_ICON, ITEM_TYPE, MODULAR_OPTION, SKILL_ABBREVIATION, SKILL, SKILL_ACTION, STRIKE_ICON, STRIKE_USAGE, DAMAGE_TYPE_ICONS, LOG_PREFIX } from './constants.js'\nimport { Utils } from './utils.js'\n\nexport let ActionHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n        // Initialize actor and token variables\n        actors = null\n        actorId = null\n        actorType = null\n        tokenId = null\n\n        // Initialize items variable\n        items = null\n\n        // Initialize groupIds variables\n        groupIds = null\n        activationGroupIds = null\n        effectGroupIds = null\n        inventoryGroupIds = null\n        spellGroupIds = null\n\n        // Initialize action variables\n        featureActions = null\n        inventoryActions = null\n        spellActions = null\n\n        mapLabel = coreModule.api.Utils.i18n('PF2E.MAPAbbreviationLabel').replace(' {penalty}', '')\n\n        /**\n         * Build System Actions\n         * @override\n         * @param {array} groupIds\n         */\n        async buildSystemActions (groupIds) {\n            // Set actor and token variables\n            this.actors = (!this.actor) ? this.#getActors() : [this.actor]\n            this.actorType = this.actor?.type\n\n            // Exit if actor is not a known type\n            const knownActors = ['character', 'familiar', 'hazard', 'npc']\n            if (this.actorType && !knownActors.includes(this.actorType)) return\n\n            // Set items variable\n            if (this.actor) {\n                let items = this.actor.items\n                items = coreModule.api.Utils.sortItemsByName(items)\n                this.items = items\n            }\n\n            // Set settings variables\n            this.abbreviateSkills = Utils.getSetting('abbreviateSkills')\n            this.addAuxiliaryActions = Utils.getSetting('addAuxiliaryActions')\n            this.addDamageAndCritical = Utils.getSetting('addDamageAndCritical')\n            this.addStowedItems = Utils.getSetting('addStowedItems')\n            this.addUnequippedItems = Utils.getSetting('addUnequippedItems')\n            this.calculateAttackPenalty = Utils.getSetting('calculateAttackPenalty')\n            this.colorSkills = Utils.getSetting('colorSkills')\n            this.showStrikeImages = Utils.getSetting('showStrikeImages')\n            this.showStrikeNames = Utils.getSetting('showStrikeNames')\n            this.showStrikeTraits = Utils.getSetting('showStrikeTraits')\n            this.splitStrikes = Utils.getSetting('splitStrikes')\n\n            // Set group variables\n            this.groupIds = groupIds\n\n            if (this.actorType === 'character') {\n                await this.#buildCharacterActions()\n            } else if (this.actorType === 'familiar') {\n                await this.#buildFamiliarActions()\n            } else if (this.actorType === 'hazard') {\n                await this.#buildHazardActions()\n            } else if (this.actorType === 'npc') {\n                await this.#buildNpcActions()\n            } else if (!this.actor) {\n                this.#buildMultipleTokenActions()\n            }\n        }\n\n        /**\n         * Build character actions\n         * @private\n         */\n        async #buildCharacterActions () {\n            await Promise.all([\n                //this.#buildActions(),\n                //this.#buildCombat(),\n                //this.#buildConditions(),\n                //this.#buildEffects(),\n                //this.#buildFeats(),\n                //this.#buildHeroActions(),\n                //this.#buildPoints('heroPoints'),\n                //this.#buildPoints('mythicPoints'),\n                this.#buildInitiative(),\n                //this.#buildInventory(),\n                //this.#buildPerceptionCheck(),\n                //this.#buildRecoveryCheck(),\n                //this.#buildRests(),\n                //this.#buildSaves(),\n                this.#buildAbilities(),\n                //this.#buildSpells(),\n                //this.#buildStrikes(),\n                //this.#buildToggles()\n            ])\n            // Build elemental blasts after other character actions so they are grouped together\n            //await this.#buildElementalBlasts()\n        }\n\n        /**\n         * Build familiar actions\n         * @private\n         */\n        async #buildFamiliarActions () {\n            await Promise.all([\n                this.#buildActions(),\n                this.#buildAttack(),\n                this.#buildCombat(),\n                //this.#buildConditions(),\n                this.#buildEffects(),\n                this.#buildInventory(),\n                this.#buildPerceptionCheck(),\n                this.#buildSaves(),\n                this.#buildAbilities()\n            ])\n        }\n\n        /**\n         * Build hazard actions\n         * @private\n         */\n        async #buildHazardActions () {\n            await Promise.all([\n                this.#buildActions(),\n                this.#buildCombat(),\n                this.#buildInitiative(),\n                this.#buildSaves(),\n                this.#buildStrikes()\n            ])\n        }\n\n        /**\n         * Build NPC actions\n         */\n        async #buildNpcActions () {\n            await Promise.all([\n                this.#buildActions(),\n                this.#buildCombat(),\n                //this.#buildConditions(),\n                this.#buildEffects(),\n                this.#buildFeats(),\n                this.#buildInitiative(),\n                this.#buildInventory(),\n                this.#buildPerceptionCheck(),\n                this.#buildSaves(),\n                this.#buildAbilities(),\n                this.#buildStrikes(),\n                this.#buildSpells(),\n                this.#buildToggles()\n            ])\n        }\n\n        /**\n         * Build multiple token actions\n         * @private\n         * @returns {object}\n         */\n        async #buildMultipleTokenActions () {\n            await Promise.all([\n                this.#buildInitiative(),\n                this.#buildPerceptionCheck(),\n                this.#buildSaves(),\n                this.#buildAbilities()\n            ])\n        }\n\n        /**\n         * Build actions\n         */\n        async #buildActions () {\n            console.log(`${LOG_PREFIX}Build actions`);\n            \n            const actionType = 'action'\n\n            // Exit early if no items exist\n            if (this.items.size === 0) return\n\n            const actionTypes = ['action', 'reaction', 'free', 'passive']\n\n            const actionItems = new Map([...this.items].filter(([_, itemData]) => itemData.type === 'action' || actionTypes.includes(itemData.system?.actionType?.value)))\n\n            const actionsMap = new Map()\n\n            for (const [key, value] of actionItems) {\n                if (value.suppressed === true) continue\n\n                // Set variables\n                const actionTypeValue = value.system.actionType?.value\n\n                switch (actionTypeValue) {\n                case 'action':\n                    actionsMap.set('actions', actionsMap.get('actions') || new Map())\n                    actionsMap.get('actions').set(key, value)\n                    break\n                case 'reaction':\n                    actionsMap.set('reactions', actionsMap.get('reactions') || new Map())\n                    actionsMap.get('reactions').set(key, value)\n                    break\n                case 'free':\n                    actionsMap.set('free-actions', actionsMap.get('free-actions') || new Map())\n                    actionsMap.get('free-actions').set(key, value)\n                    break\n                case 'passive':\n                    actionsMap.set('passives', actionsMap.get('passives') || new Map())\n                    actionsMap.get('passives').set(key, value)\n                    break\n                }\n            }\n\n            // Loop through inventory subcategory ids\n            for (const [key, value] of actionsMap) {\n                if (value.suppressed === true) continue\n                \n                const groupId = key\n                const items = value\n\n                // Create group data\n                const groupData = { id: groupId, type: 'system' }\n\n                const actions = await Promise.all(\n                    [...items].map(async ([_, itemData]) => {\n                        const id = this.#getActionId(itemData)\n                        const name = this.#getActionName(itemData)\n                        const listName = this.#getActionListName(itemData, actionType)\n                        const cssClass = this.#getActionCss(itemData)\n                        const encodedValue = [actionType, id].join(this.delimiter)\n                        const icon1 = this.#getIcon1(itemData, actionType)\n                        const img = coreModule.api.Utils.getImage(itemData)\n                        const info = this.#getItemInfo(itemData)\n                        const tooltipData = await this.#getTooltipData(itemData, actionType)\n                        const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                        return {\n                            id,\n                            name,\n                            encodedValue,\n                            cssClass,\n                            img,\n                            icon1,\n                            info,\n                            listName,\n                            tooltip\n                        }\n                    })\n                )\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build attacks\n         * @private\n         */\n        #buildAttack () {\n            console.log(`${LOG_PREFIX}Build attack`);\n            const actionType = 'familiarAttack'\n\n            const attack = this.actor.system.attack\n\n            if (attack) {\n                const id = attack.slug\n                const name = coreModule.api.Utils.i18n('PF2E.AttackLabel')\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, id].join(this.delimiter)\n                const modifier = coreModule.api.Utils.getModifier(attack?.totalModifier)\n                const info1 = this.actor ? { text: modifier } : ''\n\n                // Get actions\n                const actions = [{\n                    id,\n                    name,\n                    listName,\n                    encodedValue,\n                    info1\n                }]\n\n                // Create group data\n                const groupData = { id: 'attack', type: 'system' }\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build combat\n         */\n        #buildCombat () {\n            console.log(`${LOG_PREFIX}Build combat`);\n            const actionType = 'utility'\n\n            // Set combat types\n            const combatTypes = {\n                endTurn: { id: 'endTurn', name: coreModule.api.Utils.i18n('tokenActionHud.endTurn') }\n            }\n\n            // Delete endTurn for multiple tokens\n            if (game.combat?.current?.tokenId !== this.token?.id) delete combatTypes.endTurn\n\n            // Get actions\n            const actions = Object.entries(combatTypes).map((combatType) => {\n                const id = combatType[1].id\n                const name = combatType[1].name\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, id].join(this.delimiter)\n                return {\n                    id,\n                    name,\n                    listName,\n                    encodedValue\n                }\n            })\n\n            // Create group data\n            const groupData = { id: 'combat', type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build conditions\n         * @private\n         */\n        async #buildConditions () {\n            console.log(`${LOG_PREFIX}Build conditions`);\n            const actionType = 'condition'\n            const limitedConditions = ['doomed', 'dying', 'wounded']\n\n            // Get active conditions\n            const activeConditions = new Map(\n                [...this.items]\n                    .filter(item => item[1].type === actionType)\n                    .map(item => {\n                        const itemData = item[1]\n                        return [\n                            itemData.slug,\n                            itemData\n                        ]\n                    })\n            )\n\n            // Get conditions\n            // Conditions are duplicated in the ConditionManager and the name scaled conditions is suffixed with ' 1'\n            const conditions = [...game.pf2e.ConditionManager.conditions]\n                .filter(([conditionId]) => !conditionId.startsWith('Compendium'))\n                .map(([conditionId, conditionData]) => {\n                    conditionData.name = conditionData.name.replace(' 1', '')\n                    return [conditionId, conditionData]\n                })\n\n            // Build actions\n            const actions = await Promise.all(\n                conditions.map(async ([conditionId, conditionData]) => {\n                    const id = conditionData.slug\n                    const activeCondition = activeConditions.get(conditionId)\n                    const activeConditionId = activeCondition?.id\n                    const name = conditionData.name\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                    const listName = `${actionTypeName}${name}`\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    const img = coreModule.api.Utils.getImage(conditionData)\n                    const active = activeConditionId ? ' active' : ''\n                    const cssClass = `toggle${active}`\n                    let info1 = ''\n                    let attributeValue = ''\n\n                    if (activeConditionId) {\n                        if (limitedConditions.includes(activeCondition.slug)) {\n                            const attribute = this.actor.system.attributes[activeCondition.slug]\n                            attributeValue = attribute.value\n                            const max = attribute.max\n                            info1 = { text: (max > 0) ? `${attributeValue ?? 0}/${max}` : '' }\n                        } else if (activeCondition.system.value.isValued) {\n                            attributeValue = activeCondition.system.value.value\n                            info1 = { text: attributeValue }\n                        }\n                    }\n\n                    const tooltipName = `${name}${(attributeValue) ? ` ${attributeValue}` : ''}`\n                    const tooltipData = {\n                        name: tooltipName,\n                        description: conditionData.description\n                    }\n                    const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue,\n                        cssClass,\n                        img,\n                        info1,\n                        tooltip\n                    }\n                })\n            )\n\n            actions.sort((a, b) => a.name.localeCompare(b.name))\n\n            // Create group data\n            const conditionsGroupData = { id: 'conditions', type: 'system' }\n            const actionsTemp = []\n\n            // Add conditions to the group\n            await this.addActions(\n                actions.reduce(function (acc, current) {\n                    const filter = ['Friendly', 'Helpful', 'Hostile', 'Indifferent', 'Malevolence', 'Unfriendly']\n                    if (!filter.includes(current.name)) {\n                        acc.push(current)\n                    } else {\n                        actionsTemp.push(current)\n                    }\n                    return acc\n                }, []),\n                conditionsGroupData\n            )\n\n            const socialGroupData = { id: 'social-conditions', type: 'system' }\n            const actionsOther = []\n\n            // Add social conditions to the group\n            await this.addActions(\n                actionsTemp.reduce(function (acc, current) {\n                    const filter = ['Friendly', 'Helpful', 'Hostile', 'Indifferent', 'Unfriendly']\n                    if (filter.includes(current.name)) {\n                        acc.push(current)\n                    } else {\n                        actionsOther.push(current)\n                    }\n                    return acc\n                }, []),\n                socialGroupData\n            )\n\n            const otherGroupData = { id: 'other-conditions', type: 'system' }\n\n            // Add other conditions to the group\n            await this.addActions(actionsOther, otherGroupData)\n        }\n\n        /**\n         * Build hero points\n         */\n        async #buildPoints (actionType) {\n            console.log(`${LOG_PREFIX}Build points`);\n            let actions, groupData\n\n            const mythicEnabled = this.actor.system.resources?.mythicPoints.max ? true : false\n\n            // Create group data\n            if (actionType === 'heroPoints' && !mythicEnabled) {\n                groupData = { id: 'hero-points', type: 'system' }\n\n                const heroPoints = this.actor.system.resources?.heroPoints\n                const value = heroPoints.value\n                const max = heroPoints.max\n\n                // Get actions\n                actions = [{\n                    id: 'heroPoints',\n                    name: coreModule.api.Utils.i18n('PF2E.Actor.Resource.HeroPoints'),\n                    encodedValue: [actionType, actionType].join(this.delimiter),\n                    info1: { text: (max > 0) ? `${value ?? 0}/${max}` : '' }\n                }]\n            }\n            else if (actionType === 'mythicPoints' && mythicEnabled) {\n                groupData = { id: 'mythic-points', type: 'system' }\n\n                const mythicPoints = this.actor.system.resources?.mythicPoints\n                const value = mythicPoints.value\n                const max = mythicPoints.max\n\n                // Get actions\n                actions = [{\n                    id: 'mythicPoints',\n                    name: coreModule.api.Utils.i18n('PF2E.Actor.Resource.MythicPoints'),\n                    encodedValue: [actionType, actionType].join(this.delimiter),\n                    info1: { text: (max > 0) ? `${value ?? 0}/${max}` : '' }\n                }]\n            }\n\n            // Add actions to action list\n            if (actions && groupData) {\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build effects\n         * @private\n         */\n        async #buildEffects () {\n            console.log(`${LOG_PREFIX}Build effects`);\n            const actionType = 'effect'\n\n            // Get effects\n            const items = new Map([...this.items]\n                .filter(item =>\n                    item[1].type === 'effect' &&\n                    ((!(item[1].system?.unidentified ?? false) &&\n                    !(item[1].unidentified ?? false)) || game.user.isGM)))\n\n            // Create group data\n            const groupData = { id: 'effects', type: 'system' }\n\n            const actions = await Promise.all(\n                [...items].map(async ([_$, itemData]) => {\n                    const id = this.#getActionId(itemData)\n                    const name = this.#getActionName(itemData)\n                    const listName = this.#getActionListName(itemData, actionType)\n                    const cssClass = this.#getActionCss(itemData)\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    const icon1 = this.#getIcon1(itemData, actionType)\n                    const img = coreModule.api.Utils.getImage(itemData)\n                    const info = this.#getItemInfo(itemData)\n                    const tooltipData = {\n                        name,\n                        description: itemData.description\n                    }\n                    const tooltip = await this.#getTooltip(actionType, tooltipData)\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue,\n                        cssClass,\n                        img,\n                        icon1,\n                        info,\n                        tooltip\n                    }\n                })\n            )\n\n            actions.sort((a, b) => a.name.localeCompare(b.name))\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build Feats\n         * @private\n         */\n        async #buildFeats () {\n            console.log(`${LOG_PREFIX}Build feats`);\n            const actionType = 'feat'\n            const featTypes = {\n                ancestryfeature: 'ancestry-features',\n                classfeature: 'class-features',\n                ancestry: 'ancestry-feats',\n                class: 'class-feats',\n                skill: 'skill-feats',\n                general: 'general-feats',\n                bonus: 'bonus-feats'\n            }\n\n            // Get feats\n            const featsMap = new Map()\n\n            for (const [key, value] of this.items) {\n                if (value.type !== 'feat') continue\n                if (value.suppressed === true) continue\n\n                const featType = value.system?.category ?? value.featType\n                const groupId = featTypes[featType]\n\n                featsMap.set(groupId, featsMap.get(groupId) || new Map())\n                featsMap.get(groupId).set(key, value)\n            }\n\n            for (const [key, value] of featsMap) {\n                const groupId = key\n                const items = value\n\n                // Get group data\n                const groupData = { id: groupId, type: 'system' }\n\n                const actions = await Promise.all(\n                    [...items].map(async ([_, itemData]) => {\n                        const id = this.#getActionId(itemData)\n                        const name = this.#getActionName(itemData)\n                        const listName = this.#getActionListName(itemData, actionType)\n                        const cssClass = this.#getActionCss(itemData)\n                        const encodedValue = [actionType, id].join(this.delimiter)\n                        const icon1 = this.#getIcon1(itemData, actionType)\n                        const img = coreModule.api.Utils.getImage(itemData)\n                        const info = this.#getItemInfo(itemData)\n                        const tooltipData = await this.#getTooltipData(itemData, actionType)\n                        const tooltip = await this.#getTooltip(actionType, tooltipData)\n                        return {\n                            id,\n                            name,\n                            encodedValue,\n                            cssClass,\n                            img,\n                            icon1,\n                            info,\n                            listName,\n                            tooltip\n                        }\n                    })\n                )\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n        * Build hero actions\n        * @private\n        */\n        async #buildHeroActions () {\n            console.log(`${LOG_PREFIX}Build hero actions`);\n            if (!game.modules.get('pf2e-hero-actions')?.active) return\n\n            const actionType = 'heroAction'\n            const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionType])\n            const heroActions = this.actor.getFlag('pf2e-hero-actions', 'heroActions') ?? []\n\n            const groupData = { id: 'hero-actions', type: 'system' }\n\n            const actions = []\n\n            const heroPoints = this.actor.heroPoints?.value\n            const remainingHeroPoints = heroPoints - (heroActions?.length ?? 0)\n\n            if (remainingHeroPoints > 0) {\n                actions.push({\n                    id: 'drawHeroActions',\n                    name: game.i18n.format('pf2e-hero-actions.templates.heroActions.draw', { nb: remainingHeroPoints }),\n                    listName: `${actionTypeName}: ${game.i18n.localize('pf2e-hero-actions.templates.heroActions.draw').replace('({nb}) ', '')}`,\n                    encodedValue: [actionType, 'drawHeroActions'].join(this.delimiter)\n                })\n            }\n\n            const heroActionActions = await Promise.all(\n                [...heroActions].map(async (heroAction) => {\n                    const id = heroAction?.uuid\n                    const name = heroAction?.name\n                    const listName = `${actionTypeName}: ${name}`\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    const img = coreModule.api.Utils.getImage('systems/pf2e/icons/actions/Passive.webp')\n                    const uuidData = (heroAction?.uuid) ? await fromUuid(heroAction?.uuid) : null\n                    const tooltipData = {\n                        name,\n                        description: uuidData?.text?.content ?? null\n                    }\n                    const tooltip = await this.#getTooltip(actionType, tooltipData)\n                    return {\n                        id,\n                        name,\n                        encodedValue,\n                        img,\n                        listName,\n                        tooltip\n                    }\n                })\n            )\n\n            actions.push(...heroActionActions)\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build initiative\n         * @private\n         */\n        async #buildInitiative () {\n            console.log(`${LOG_PREFIX}Build initiative`);\n            const actionType = 'initiative'\n\n            const initiativeStatistic = this.actor?.system?.initiative ?? null\n\n            // Get actions\n            const actions = []\n            \n            if(this.actor.type === 'character'){\n                const initiative = coreModule.api.Utils.i18n('abfalter.initiative')\n                const fullName = coreModule.api.Utils.i18n('abfalter.initiative')\n                const name = coreModule.api.Utils.i18n('abfalter.initiative')\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, 'perception'].join(this.delimiter)\n                //const active = (initiativeStatistic === 'perception') ? ' active' : ''\n                const cssClass = 'toggle'//`toggle${active}`\n                const modifier = this.actor.system.initiative.spec\n                const info1 = this.actor ? { text: modifier } : ''\n                const tooltipName = `${fullName}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n                const tooltipData = {\n                    name: tooltipName,\n                    modifiers: initiative?.modifiers\n                }\n                const tooltip = this.actor ? await this.#getTooltip(actionType, tooltipData) : null\n\n                // Get actions\n                actions.push({\n                    id: 'initiative-value',\n                    name,\n                    listName,\n                    encodedValue,\n                    cssClass,\n                    info1,\n                    tooltip\n                })\n            }\n            \n            /*\n\n            if (this.actorType !== 'hazard') {\n                const initiative = this.actor ? this.actor.system.initiative : coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\n                const fullName = coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\n                const name = this.abbreviatedSkills ? SKILL_ABBREVIATION.perception ?? fullName : fullName\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, 'perception'].join(this.delimiter)\n                const active = (initiativeStatistic === 'perception') ? ' active' : ''\n                const cssClass = `toggle${active}`\n                const modifier = coreModule.api.Utils.getModifier(initiative?.totalModifier)\n                const info1 = this.actor ? { text: modifier } : ''\n                const tooltipName = `${fullName}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n                const tooltipData = {\n                    name: tooltipName,\n                    modifiers: initiative?.modifiers\n                }\n                const tooltip = this.actor ? await this.#getTooltip(actionType, tooltipData) : null\n\n                // Get actions\n                actions.push({\n                    id: 'initiative-perception',\n                    name,\n                    listName,\n                    encodedValue,\n                    cssClass,\n                    info1,\n                    tooltip\n                })\n            }\n\n            // Get skills\n            const skills = (this.actor)\n                ? Object.entries(this.actor.skills).filter(([_, skillData]) => !!skillData.label && skillData.label.length > 1)\n                : this.#getSharedSkills()\n\n            if (!skills) return\n\n            const coreSkills = []\n            const loreSkills = []\n\n            for (const skill of skills) {\n                if (!skill[1].lore) {\n                    coreSkills.push(skill)\n                } else {\n                    loreSkills.push(skill)\n                }\n            }\n\n            coreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\n            loreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\n\n            const skillActions = await Promise.all(\n                [...coreSkills, ...loreSkills].map(async ([skillId, skillData]) => {\n                    const id = `initiative-${skillId}`\n                    const data = skillData\n                    const fullName = coreModule.api.Utils.i18n(data.label) ?? coreModule.api.Utils.i18n(CONFIG.PF2E.skillList[skillId])\n                    const name = this.abbreviatedSkills ? SKILL_ABBREVIATION[data.slug] ?? fullName : fullName\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                    const listName = `${actionTypeName}${name}`\n                    const encodedValue = [actionType, skillId].join(this.delimiter)\n                    const active = (initiativeStatistic === skillId) ? ' active' : ''\n                    const cssClass = `toggle${active}`\n                    const modifier = coreModule.api.Utils.getModifier(skillData.check?.mod)\n                    const info1 = this.actor ? { text: modifier } : ''\n                    const tooltipName = `${fullName}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n                    const tooltipData = {\n                        name: tooltipName,\n                        modifiers: skillData?.modifiers\n                    }\n                    const tooltip = (this.actor) ? await this.#getTooltip(actionType, tooltipData) : null\n\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue,\n                        cssClass,\n                        info1,\n                        tooltip\n                    }\n                })\n            )\n\n            actions.push(...skillActions)*/\n\n            // Create group data\n            const groupData = { id: 'initiative', type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build inventory\n         * @private\n         */\n        async #buildInventory () {\n            console.log(`${LOG_PREFIX}Build inventory`);\n            // Exit if no items exist\n            if (this.items.size === 0) return\n\n            const actionType = 'item'\n            const inventoryMap = new Map()\n\n            for (const [key, value] of this.items) {\n                const hasQuantity = value.system?.quantity > 0\n                const isEquippedItem = this.#isEquippedItem(value)\n                const isAddItem = this.#isAddItem('nonContainer', value)\n                const type = value.type\n\n                if (hasQuantity && isAddItem) {\n                    const itemType = isEquippedItem ? 'equipped' : 'unequipped'\n                    const itemCategoryMap = inventoryMap.get(itemType) ?? new Map()\n                    itemCategoryMap.set(key, value)\n                    inventoryMap.set(itemType, itemCategoryMap)\n\n                    if (isEquippedItem) {\n                        const categoryTypeMap = inventoryMap.get(type) ?? new Map()\n                        categoryTypeMap.set(key, value)\n                        inventoryMap.set(type, categoryTypeMap)\n                    }\n                }\n            }\n\n            // Loop through inventory group ids\n            for (const [id, items] of inventoryMap) {\n                const groupId = ITEM_TYPE[id]?.groupId\n\n                if (!groupId) continue\n\n                // Create group data\n                const groupData = { id: groupId, type: 'system' }\n\n                // Get actions\n                const actions = await Promise.all(\n                    [...items].map(async ([_, itemData]) => {\n                        const id = this.#getActionId(itemData)\n                        const name = this.#getActionName(itemData)\n                        const listName = this.#getActionListName(itemData, actionType)\n                        const cssClass = this.#getActionCss(itemData)\n                        const encodedValue = [actionType, id].join(this.delimiter)\n                        const icon1 = this.#getIcon1(itemData, actionType)\n                        const icon2 = this.#getCarryTypeIcon(itemData)\n                        const img = coreModule.api.Utils.getImage(itemData)\n                        const info = this.#getItemInfo(itemData)\n                        const tooltipData = await this.#getTooltipData(itemData, actionType)\n                        const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                        return {\n                            id,\n                            name,\n                            encodedValue,\n                            cssClass,\n                            img,\n                            icon1,\n                            icon2,\n                            info,\n                            listName,\n                            tooltip\n                        }\n                    })\n                )\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n\n            // Add container contents\n            if (inventoryMap.has('backpack')) {\n                // Create parent group data\n                const parentGroupData = { id: 'containers', type: 'system' }\n\n                const containers = inventoryMap.get('backpack')\n\n                for (const [id, container] of containers) {\n                    const contents = container.contents\n\n                    // Skip if container has no contents\n                    if (!contents.size) continue\n\n                    // Create group data\n                    const groupData = {\n                        id,\n                        name: container.name,\n                        listName: `Group: ${container.name}`,\n                        type: 'system-derived'\n                    }\n\n                    // Add group to action list\n                    await this.addGroup(groupData, parentGroupData)\n\n                    const contentsMap = new Map()\n\n                    for (const content of contents) {\n                        const isAddItem = this.#isAddItem('container', content)\n\n                        if (isAddItem) {\n                            contentsMap.set(content.id, content)\n                        }\n                    }\n\n                    const actions = await Promise.all(\n                        [...contentsMap].map(async ([_, itemData]) => {\n                            const id = this.#getActionId(itemData)\n                            const name = this.#getActionName(itemData)\n                            const listName = this.#getActionListName(itemData, actionType)\n                            const cssClass = this.#getActionCss(itemData)\n                            const encodedValue = [actionType, id].join(this.delimiter)\n                            const icon1 = this.#getIcon1(itemData, actionType)\n                            const icon2 = this.#getCarryTypeIcon(itemData)\n                            const img = coreModule.api.Utils.getImage(itemData)\n                            const info = this.#getItemInfo(itemData)\n                            const tooltipData = await this.#getTooltipData(itemData, actionType)\n                            const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                            return {\n                                id,\n                                name,\n                                encodedValue,\n                                cssClass,\n                                img,\n                                icon1,\n                                icon2,\n                                info,\n                                listName,\n                                tooltip\n                            }\n                        })\n                    )\n\n                    // Add actions to action list\n                    this.addActions(actions, groupData)\n                }\n            }\n        }\n\n        /**\n         * Build perception check\n         * @private\n         */\n        async #buildPerceptionCheck () {\n            console.log(`${LOG_PREFIX}Build perception check`);\n            const actionType = 'perceptionCheck'\n            const perception = this.actor ? this.actor.system.perception : coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\n            const name = coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\n            const modifier = coreModule.api.Utils.getModifier(perception?.totalModifier)\n            const info1 = this.actor ? { text: modifier } : ''\n            const tooltipName = `${name}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n            const tooltipData = {\n                name: tooltipName,\n                modifiers: perception?.modifiers\n            }\n            const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n            // Get actions\n            const actions = [{\n                id: 'perception',\n                name,\n                encodedValue: [actionType, 'perception'].join(this.delimiter),\n                info1,\n                tooltip\n            }]\n\n            // Create group data\n            const groupData = { id: 'perception-check', type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build recovery check\n         */\n        #buildRecoveryCheck () {\n            console.log(`${LOG_PREFIX}Build recovery check`);\n            const actionType = 'recoveryCheck'\n            const dyingValue = this.actor?.system.attributes?.dying\n\n            if (dyingValue?.value > 0) {\n                // Get actions\n                const actions = [{\n                    id: actionType,\n                    name: coreModule.api.Utils.i18n('PF2E.Check.Specific.Recovery'),\n                    encodedValue: [actionType, actionType].join(this.delimiter)\n                }]\n\n                // Create group data\n                const groupData = { id: 'recovery-check', type: 'system' }\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build rests\n         */\n        #buildRests () {\n            console.log(`${LOG_PREFIX}Build rests`);\n            // Exit if multiple actors and not every actor is the character type\n            if (!this.actor && !this.actors.every(actor => actor.type === 'character')) return\n\n            const actionType = 'utility'\n\n            // Get actions\n            const actions = [\n                {\n                    id: 'treatWounds',\n                    name: coreModule.api.Utils.i18n('PF2E.Actions.TreatWounds.Label'),\n                    encodedValue: [actionType, 'treatWounds'].join(this.delimiter)\n                },\n                {\n                    id: 'rest',\n                    name: coreModule.api.Utils.i18n('PF2E.Actor.Character.Rest.Label'),\n                    encodedValue: [actionType, 'rest'].join(this.delimiter)\n                }\n            ]\n\n            // Take a Breather\n            if (game.settings.get('pf2e', 'staminaVariant')) {\n                actions.push({\n                    id: 'takeBreather',\n                    name: coreModule.api.Utils.i18n('tokenActionHud.pf2e.takeBreather'),\n                    encodedValue: [actionType, 'takeBreather'].join(this.delimiter)\n                })\n            }\n\n            // Create group data\n            const groupData = { id: 'rests', type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build saves\n         * @private\n         */\n        async #buildSaves () {\n            console.log(`${LOG_PREFIX}Build saves`);\n            const actionType = 'save'\n\n            // Get saves\n            const saves = this.actor ? Object.entries(this.actor.saves || []) : Object.entries(CONFIG.PF2E.saves)\n\n            // Exit if no saves exist\n            if (!saves || saves.length === 0) return\n\n            // Get actions\n            const actions = await Promise.all(\n                saves.map(async ([id, saveData]) => {\n                    const name = saveData.label ?? (typeof saveData === 'string' ? coreModule.api.Utils.i18n(saveData) : '')\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                    const listName = `${actionTypeName}${name}`\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    const modifier = coreModule.api.Utils.getModifier(saveData.mod)\n                    const info1 = this.actor ? { text: modifier } : ''\n                    const tooltipName = `${name}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n                    const tooltipData = {\n                        name: tooltipName,\n                        modifiers: saveData?.modifiers\n                    }\n                    const tooltip = this.actor ? await this.#getTooltip(actionType, tooltipData) : null\n\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue,\n                        info1,\n                        tooltip\n                    }\n                })\n            )\n\n            // Get group data\n            const groupData = { id: 'saves', type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build abilities\n         * @private\n         */\n        async #buildAbilities () {\n            console.log(`${LOG_PREFIX}Build ability`);\n            const actionType = 'ability'\n\n            // Get skills\n            const skills = (this.actor)\n                ? this.#getAbilities()\n                : this.#getSharedSkills()\n\n            if (!skills) return\n\n            const coreSkills = []\n            const loreSkills = []\n\n            /*for (const skill of skills) {\n                if (!skill[1].lore) {\n                    coreSkills.push(skill)\n                } else {\n                    loreSkills.push(skill)\n                }\n            }\n\n            coreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\n            loreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\n            */\n            \n            const skillsMap = new Map()\n\n            skillsMap.set('skills', new Map())\n\n            skills.forEach(element => {\n                skillsMap.get('skills').set(element.label, element)\n            });\n\n            /*\n            if (coreSkills.length > 0) {\n                skillsMap.set('core-skills', new Map())\n            }\n            if (loreSkills.length > 0) {\n                skillsMap.set('lore-skills', new Map())\n            }\n\n            for (const skill of [...coreSkills, ...loreSkills]) {\n                if (!skill[1].lore) {\n                    skillsMap.get('core-skills').set(skill[0], skill[1])\n                } else {\n                    skillsMap.get('lore-skills').set(skill[0], skill[1])\n                }\n            }*/\n\n            // Loop through inventory subcateogry ids\n            for (const [key, value] of skillsMap) {\n                const groupId = key\n                const skills = value\n\n                // Create group data\n                const groupData = { id: groupId, type: 'system' }\n\n                // Get actions\n                const actions = await Promise.all(\n                    [...skills].map(async ([skillId, skillData]) => {\n                        const id = skillId\n                        const label = coreModule.api.Utils.i18n(skillData.label) ?? coreModule.api.Utils.i18n(CONFIG.abfalter.skillId)\n                        const name = label\n                        const fullName = label\n                        const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                        const listName = `${actionTypeName}${name}`\n                        const encodedValue = [actionType, id].join(this.delimiter)\n                        const cssClass = ''//(this.actor && this.colorSkills && skillData.rank > 0) ? `tah-pf2e-skill-rank-${skillData.rank}` : ''\n                        const modifier = skillData.spec//coreModule.api.Utils.getModifier(skillData.check?.mod)\n                        const info1 = this.actor ? { text: modifier } : ''\n                        const tooltipName = `${fullName}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n                        const tooltipData = {\n                            name: tooltipName,\n                            modifiers: skillData?.modifiers\n                        }\n                        const tooltip = (this.actor) ? await this.#getTooltip(actionType, tooltipData) : null\n\n                        return {\n                            id,\n                            name,\n                            fullName,\n                            listName,\n                            encodedValue,\n                            cssClass,\n                            info1,\n                            tooltip\n                        }\n                    })\n                )\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n            console.log(`${LOG_PREFIX}Build ability done`);\n        }\n\n        /**\n         * Get and unwraps all the abilities from actor.system.secondaryFields\n         * @returns \n         */\n        #getAbilities(){\n            let filter1 = Object.entries(this.actor.system.secondaryFields).filter(s => s[0] !=='category')\n            let ret = []\n            filter1.forEach(s => Object.entries(s[1]).forEach(a => ret.push(a[1])))\n            return ret\n        }\n\n        /**\n         * Get shared skills between all actors\n         * @returns {object}\n         */\n        #getSharedSkills () {\n            if (!this.actors) return\n            const allSkillSets = this.actors.map(actor => Object.entries(actor.skills).filter(skill => !!skill[1].label && skill[1].label.length > 1))\n            const minSkillSetSize = Math.min(...allSkillSets.map(skillSet => skillSet.length))\n            const smallestSkillSet = allSkillSets.find(skillSet => skillSet.length === minSkillSetSize)\n            return smallestSkillSet.filter(smallestSkill => allSkillSets.every(skillSet => skillSet.some(skill => skill[0] === smallestSkill[0])))\n        }\n\n        /**\n         * Build spells\n         * @private\n         */\n        async #buildSpells () {\n            console.log(`${LOG_PREFIX}Build spells`);\n            const actionType = 'spell'\n\n            // Create parent group data\n            const parentGroupData = { id: 'spells', type: 'system' }\n\n            const spellcastingEntries = [...this.items].filter(item => item[1].type === 'spellcastingEntry')\n\n            for (const spellcastingEntry of spellcastingEntries) {\n                const spellbookGroupId = `spells+${spellcastingEntry[1].name.slugify({ replacement: '-', strict: true })}`\n                const spellbookGroupName = spellcastingEntry[1].name\n                const spellbookInfo1 = this.#getSpellDcInfo(spellcastingEntry[1])\n\n                // Create book group data\n                const bookGroupData = {\n                    id: spellbookGroupId,\n                    name: spellbookGroupName,\n                    type: 'system-derived',\n                    info1: spellbookInfo1\n                }\n\n                // Add group to action list\n                await this.addGroup(bookGroupData, parentGroupData)\n\n                // Add spell slot info to group\n                this.addGroupInfo(bookGroupData)\n\n                const spellInfo = await spellcastingEntry[1].getSheetData()\n                const activeLevels = spellInfo.groups.filter(level => level.active.length > 0)\n\n                for (const level of Object.entries(activeLevels)) {\n                    const spellLevel = level[1].id\n                    const levelGroupId = `${spellbookGroupId}+${spellLevel}`\n                    const levelGroupName = String(coreModule.api.Utils.i18n(level[1].label))\n\n                    // Create level group data\n                    const levelGroupData = {\n                        id: levelGroupId,\n                        name: levelGroupName,\n                        type: 'system-derived'\n                    }\n\n                    // Add group to action list\n                    await this.addGroup(levelGroupData, bookGroupData)\n\n                    await this.#addSpellSlotInfo(bookGroupData, levelGroupData, level, spellInfo)\n\n                    // Get available spells\n                    const activeSpells = level[1].active\n                        .filter(activeSpell => activeSpell && !activeSpell.expended)\n                        .map(spell => spell.spell)\n\n                    const spells = new Map(activeSpells.map(spell => [spell.id, spell]))\n\n                    // Get actions\n                    const actions = await Promise.all(\n                        [...spells].map(async ([_, itemData]) => {\n                            const id = this.#getActionId(itemData, actionType, spellLevel)\n                            const name = this.#getActionName(itemData)\n                            const listName = this.#getActionListName(itemData, actionType)\n                            const cssClass = this.#getActionCss(itemData)\n                            const encodedValue = this.#getActionEncodedValue(itemData, actionType, spellLevel)\n                            const icon1 = this.#getIcon1(itemData, actionType)\n                            const img = coreModule.api.Utils.getImage(itemData)\n                            const tooltipData = await this.#getTooltipData(itemData, actionType, spellLevel)\n                            const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                            return {\n                                id,\n                                name,\n                                listName,\n                                encodedValue,\n                                cssClass,\n                                img,\n                                icon1,\n                                tooltip\n                            }\n                        })\n                    )\n\n                    // Add actions to action list\n                    this.addActions(actions, levelGroupData)\n                }\n            }\n        }\n\n        /**\n         * Add spell slot info\n         * @param {object} bookGroupData  The book group data\n         * @param {object} levelGroupData The level group data\n         * @param {number} level          The level\n         * @param {object} spellInfo      The spell info\n         */\n        async #addSpellSlotInfo (\n            bookGroupData,\n            levelGroupData,\n            level,\n            spellInfo\n        ) {\n            const isCantrip = level[1].id === 'cantrips'\n            const isFlexible = spellInfo.isFlexible\n            const isFocusPool = spellInfo.isFocusPool\n            const isInnate = spellInfo.isInnate\n            const isPrepared = spellInfo.isPrepared\n\n            //  Exit if spells are cantrips\n            if (!isFocusPool && (isCantrip || isInnate)) return\n\n            if (!isFocusPool && (isPrepared && !isFlexible)) return\n\n            const actionType = 'spellSlot'\n            const focus = this.actor.system.resources.focus\n            const slots = level[1].uses\n            const spellSlot = (isFocusPool) ? 'focus' : `slot${level[1].id}`\n            const maxSlots = (spellSlot === 'focus') ? focus?.max : slots?.max\n            const availableSlots = (spellSlot === 'focus') ? focus?.value : slots?.value\n            const info1 = { text: (maxSlots >= 0) ? `${availableSlots ?? 0}/${maxSlots}` : '' }\n\n            levelGroupData.info = { info1 }\n\n            // Add group info to the group\n            this.addGroupInfo(levelGroupData)\n\n            const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE.spell)\n\n            // Get actions\n            const actions = [\n                {\n                    id: `${spellInfo.id}>${spellSlot}>slotIncrease`,\n                    name: '+',\n                    listName: `${actionTypeName}: ${bookGroupData.name}: ${levelGroupData.name}: +`,\n                    encodedValue: [actionType, `${spellInfo.id}>${spellSlot}>slotIncrease`].join(this.delimiter),\n                    cssClass: 'shrink'\n                },\n                {\n                    id: `${spellInfo.id}>${spellSlot}>slotDecrease`,\n                    name: '-',\n                    listName: `${actionTypeName}: ${bookGroupData.name}: ${levelGroupData.name}: -`,\n                    encodedValue: [actionType, `${spellInfo.id}>${spellSlot}>slotDecrease`].join(this.delimiter),\n                    cssClass: 'shrink'\n                }\n            ]\n\n            // Add actions to action list\n            this.addActions(actions, levelGroupData)\n        }\n\n        /**\n         * Build elemental blasts\n         */\n        async #buildElementalBlasts () {\n            console.log(`${LOG_PREFIX}Build elemental blast`);\n            const actionType = 'elementalBlast'\n\n            // Get elemental blasts\n            const blasts = new game.pf2e.ElementalBlast(this.actor)?.configs\n\n            // Exit if no strikes exist\n            if (!blasts.length) return\n\n            // Create parent group data\n            const parentGroupData = { id: 'strikes', type: 'system' }\n\n            for (const blast of blasts) {\n                let damageTypeActions = []\n                let strikeGroupData = null\n                const usageData = []\n\n                const strikeId = `${blast.item.id}-${blast.element}`\n                const strikeGroupId = `strikes+${strikeId}`\n                const strikeGroupName = (() => {\n                    let groupName = coreModule.api.Utils.i18n(blast.label)\n                    if (this.showStrikeTraits && this.showStrikeNames) {\n                        const blastTraits = blast.item.system.traits.value\n                        if (blastTraits.length > 0) {\n                            groupName += ' - '\n                            for (const trait of blastTraits) {\n                                groupName += '[' + trait + ']'\n                            }\n                        }\n                    }\n                    return groupName\n                })()\n                const strikeGroupListName = `${coreModule.api.Utils.i18n(ACTION_TYPE.strike)}: ${strikeGroupName} (${blast.item.id})`\n                const image = blast.img ?? blast.item?.img\n                const showTitle = this.showStrikeNames\n                const tooltipData = await this.#getTooltipData(blast, actionType)\n                const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                // Create group data\n                strikeGroupData = {\n                    id: strikeGroupId,\n                    name: strikeGroupName,\n                    listName: strikeGroupListName,\n                    type: 'system-derived',\n                    settings: { showTitle },\n                    tooltip\n                }\n                \n                if (this.showStrikeImages) {\n                    strikeGroupData.settings.image = image\n                }\n\n                // Add group to action list\n                this.addGroup(strikeGroupData, parentGroupData)\n\n                if (blast.damageTypes.length > 1) {\n                    // Get actions\n                    damageTypeActions = blast.damageTypes.map((damageType, index) => {\n                        const id = encodeURIComponent(`${blast.item.id}>${blast.element}>${damageType.value}>`)\n                        const fullName = damageType.label\n                        return {\n                            id,\n                            name: '',\n                            fullName,\n                            listName: `${strikeGroupListName}: ${fullName}`,\n                            encodedValue: ['elementalBlastDamageType', id].join(this.delimiter),\n                            cssClass: this.#getActionCss(damageType),\n                            icon1: this.#getActionIcon(damageType.icon, fullName)\n                        }\n                    })\n                }\n\n                const blastUsages = Object.entries(blast.maps) ?? []\n\n                for (const [key, blastUsage] of blastUsages) {\n                    const usage = key\n                    const usageGroupId = `${strikeGroupId}+${key}`\n                    const usageGroupName = (() => {\n                        if (usage !== 'melee' && blast.range.max > 0 && blast.range.label.length > 0) {\n                            return blast.range.label\n                        } else {\n                            return coreModule.api.Utils.i18n(STRIKE_USAGE[key].name)\n                        }\n                    })()\n                    const usageGroupListName = `${strikeGroupListName}: ${usageGroupName}`\n                    const usageGroupImage = (blastUsages.length > 1)\n                        ? (usage === 'melee')\n                            ? STRIKE_ICON.melee\n                            : STRIKE_ICON.thrown\n                        : ''\n                    const usageGroupShowTitle = !((usageGroupImage || blastUsages.length <= 1))\n                    const settings = { showTitle: usageGroupShowTitle, image: usageGroupImage }\n\n                    const usageGroupData = {\n                        id: usageGroupId,\n                        name: usageGroupName,\n                        listName: usageGroupListName,\n                        type: 'system-derived',\n                        settings\n                    }\n\n                    const rolls = Object.values(blastUsage)\n\n                    const actions = rolls.map((roll, index) => {\n                        const id = encodeURIComponent(`${blast.item.id}>${blast.element}>${index}>` + usage)\n                        const isMap = `${roll}`.includes(this.mapLabel)\n                        let modifier\n                        if (isMap) {\n                            modifier = `${roll}`.split(' ')[0]\n                        } else {\n                            modifier = `${roll}`.replace(coreModule.api.Utils.i18n('PF2E.WeaponStrikeLabel'), '').replace(' ', '')\n                        }\n                        const name = (this.calculateAttackPenalty) ? modifier : roll\n                        return {\n                            id,\n                            name,\n                            encodedValue: [actionType, id].join(this.delimiter),\n                            listName: `${usageGroupListName}: ${name}`\n                        }\n                    })\n\n                    // Get Damage\n                    const damageId = encodeURIComponent(`${blast.item.id}>${blast.element}>damage>${usage}`)\n                    const damageName = coreModule.api.Utils.i18n('PF2E.DamageLabel')\n                    actions.push({\n                        id: damageId,\n                        name: damageName,\n                        listName: `${usageGroupListName}: ${damageName}`,\n                        encodedValue: [actionType, damageId].join(this.delimiter),\n                        systemSelected: this.addDamageAndCritical\n                    })\n\n                    // Get Critical\n                    const criticalId = encodeURIComponent(`${blast.item.id}>${blast.element}>critical>${usage}`)\n                    const criticalName = coreModule.api.Utils.i18n('PF2E.CriticalDamageLabel')\n                    actions.push({\n                        id: criticalId,\n                        name: criticalName,\n                        listName: `${usageGroupListName}: ${criticalName}`,\n                        encodedValue: [actionType, criticalId].join(this.delimiter),\n                        systemSelected: this.addDamageAndCritical\n                    })\n\n                    usageData.push({ actions, usageGroupData })\n                }\n\n                if (this.splitStrikes) {\n                    this.addActions(damageTypeActions, strikeGroupData)\n                    for (const usage of usageData) {\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\n                        this.addActions(usage.actions, usage.usageGroupData)\n                    }\n                } else {\n                    this.addActions([...(usageData[0]?.actions || []), ...damageTypeActions], strikeGroupData)\n                    usageData.shift()\n                    for (const usage of usageData) {\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\n                        this.addActions(usage.actions, usage.usageGroupData)\n                    }\n                }\n            }\n        }\n\n        /**\n         * Build strikes\n         */\n        async #buildStrikes () {\n            const actionType = 'strike'\n\n            // Create parent group data\n            const parentGroupData = { id: 'strikes', type: 'system' }\n            return\n            // Get strikes\n            const strikes = this.actor.system.actions\n                .filter(action => (action.type === actionType && (action.item.system.quantity > 0 || this.actor.type === 'hazard' || this.actor.type === 'npc')))\n\n            // Exit if no strikes exist\n            if (!strikes) return\n\n            for (const strike of strikes) {\n                let auxiliaryActions = []\n                let versatileOptionActions = []\n                let strikeGroupData = null\n                const usageData = []\n\n                const strikeId = `${strike.item.id}-${strike.slug}`\n                const strikeGroupId = `strikes+${strikeId}`\n                const strikeGroupName = (() => {\n                    let groupName = strike.label\n                    if (this.showStrikeTraits && this.showStrikeNames) {\n                        let strikeTraits\n                        if (this.actor.type === 'character') {\n                            strikeTraits = strike.weaponTraits\n                        } else {\n                            strikeTraits = strike.traits\n                        }\n                        if (strikeTraits.length > 0) {\n                            groupName += ' - '\n                            for (const trait of strikeTraits) {\n                                groupName += '[' + trait.label + ']'\n                            }\n                        }\n                    }\n                    return groupName\n                })()\n                const strikeGroupListName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ${strike.label} (${strike.item.id})`\n                const image = strike.imageUrl ?? strike.item?.img\n                const showTitle = this.showStrikeNames\n                const tooltipData = await this.#getTooltipData(strike, actionType)\n                const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                // Create group data\n                strikeGroupData = {\n                    id: strikeGroupId,\n                    name: strikeGroupName,\n                    listName: strikeGroupListName,\n                    type: 'system-derived',\n                    settings: { showTitle },\n                    tooltip\n                }\n                if (this.showStrikeImages) strikeGroupData.settings.image = image\n                if (typeof strikeGroupData.settings.sort === 'undefined' && coreModule.api.Utils.getSetting('sortActions')) strikeGroupData.settings.sort = false\n\n                // Add group to action list\n                this.addGroup(strikeGroupData, parentGroupData)\n\n                if (strike.auxiliaryActions?.length && this.addAuxiliaryActions) {\n                    // Get actions\n                    auxiliaryActions = strike.auxiliaryActions.flatMap((auxiliaryAction, index) => {\n                        if (auxiliaryAction.purpose === 'Modular') {\n                            const modularOptions = strike.item.system.traits.toggles.modular.options\n                            const modularSelection = strike.item.system.traits.toggles.modular.selection\n                            return modularOptions.map(modularOption => {\n                                const id = encodeURIComponent(`${strike.item.id}>${strike.slug}>${index}>${modularOption}`)\n                                const name = coreModule.api.Utils.i18n(MODULAR_OPTION[modularOption])\n                                return {\n                                    id,\n                                    name,\n                                    listName: `${strikeGroupListName}: ${name}`,\n                                    encodedValue: ['strikeAuxiliaryAction', id].join(this.delimiter),\n                                    cssClass: this.#getActionCss({ selected: (modularOption === modularSelection) }),\n                                    icon1: this.#getActionIcon(auxiliaryAction.glyph)\n                                }\n                            })\n                        } else {\n                            const id = encodeURIComponent(`${strike.item.id}>${strike.slug}>${index}>`)\n                            const name = auxiliaryAction.label\n                            return {\n                                id,\n                                name,\n                                listName: `${strikeGroupListName}: ${name}`,\n                                encodedValue: ['strikeAuxiliaryAction', id].join(this.delimiter),\n                                icon1: this.#getActionIcon(auxiliaryAction.glyph),\n                                info: this.#getItemInfo(auxiliaryAction)\n                            }\n                        }\n                    })\n                }\n                if (strike.ready) {\n                    if (strike.versatileOptions?.length) {\n                        // Get actions\n                        versatileOptionActions = strike.versatileOptions.map(versatileOption => {\n                            const encodedId = encodeURIComponent(`${strike.item.id}>${strike.slug}>${versatileOption.value}>`)\n                            const fullName = coreModule.api.Utils.i18n(versatileOption.label)\n                            return {\n                                id: encodedId,\n                                name: '',\n                                fullName,\n                                listName: `${strikeGroupListName}: ${fullName}`,\n                                encodedValue: ['versatileOption', encodedId].join(this.delimiter),\n                                cssClass: this.#getActionCss(versatileOption),\n                                icon1: this.#getActionIcon(versatileOption.glyph, fullName)\n                            }\n                        })\n                    }\n\n                    const strikeUsages = (strike.altUsages) ? [strike, ...strike.altUsages] : [strike]\n\n                    for (const strikeUsage of strikeUsages) {\n                        const glyph = strike.glyph\n                        const encodedUsage = `${strikeUsage.item.isMelee}_${strikeUsage.item.isThrown}_${strikeUsage.item.isRanged}`\n                        let usage\n                        switch (encodedUsage) {\n                        case 'true_false_false':\n                            usage = 'melee'\n                            break\n                        case 'false_true_true':\n                            usage = 'thrown'\n                            break\n                        case 'false_false_true':\n                            usage = 'ranged'\n                            break\n                        }\n                        const usageGroupId = `${strikeGroupId}+${usage}`\n                        const usageGroupName = (strikeUsage.attackRollType)\n                            ? coreModule.api.Utils.i18n(strikeUsage.attackRollType)\n                            : coreModule.api.Utils.i18n(STRIKE_USAGE[usage].name)\n                        const usageGroupListName = `${strikeGroupListName}: ${usageGroupName}`\n                        const usageGroupIcon = (usage !== 'thrown' && glyph)\n                            ? `<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>${glyph}</span>`\n                            : STRIKE_ICON[usage]\n                        const usageGroupImage = (strikeUsages.length > 1) ? STRIKE_ICON[usage] : ''\n                        const usageGroupShowTitle = !((usageGroupImage || strikeUsages.length <= 1))\n                        const settings = { showTitle: usageGroupShowTitle, image: usageGroupImage }\n\n                        const usageGroupData = {\n                            id: usageGroupId,\n                            name: usageGroupName,\n                            listName: usageGroupListName,\n                            icon: usageGroupIcon,\n                            type: 'system-derived',\n                            settings\n                        }\n\n                        if (typeof usageGroupData.settings.sort === 'undefined' && coreModule.api.Utils.getSetting('sortActions')) {\n                            usageGroupData.settings.sort = false\n                        }\n\n                        const actions = strikeUsage.variants.map((variant, index) => {\n                            const id = encodeURIComponent(`${strike.item.id}>${strike.slug}>${index}>` + usage)\n                            const isMap = variant.label.includes(this.mapLabel)\n                            const modifier = (isMap)\n                                ? variant.label.split(' ')[0]\n                                : variant.label.replace(coreModule.api.Utils.i18n('PF2E.WeaponStrikeLabel'), '').replace(' ', '')\n                            const name = (this.calculateAttackPenalty) ? modifier : variant.label\n                            return {\n                                id,\n                                name,\n                                encodedValue: [actionType, id].join(this.delimiter),\n                                listName: `${usageGroupListName}: ${name}`\n                            }\n                        })\n\n                        // Get Damage\n                        const damageId = encodeURIComponent(`${strike.item.id}>${strike.slug}>damage>${usage}`)\n                        const damageName = coreModule.api.Utils.i18n('PF2E.DamageLabel')\n                        actions.push({\n                            id: damageId,\n                            name: damageName,\n                            listName: `${usageGroupListName}: ${damageName}`,\n                            encodedValue: [actionType, damageId].join(this.delimiter),\n                            systemSelected: this.addDamageAndCritical\n                        })\n\n                        // Get Critical\n                        const criticalId = encodeURIComponent(`${strike.item.id}>${strike.slug}>critical>${usage}`)\n                        const criticalName = coreModule.api.Utils.i18n('PF2E.CriticalDamageLabel')\n                        actions.push({\n                            id: criticalId,\n                            name: criticalName,\n                            listName: `${usageGroupListName}: ${criticalName}`,\n                            encodedValue: [actionType, criticalId].join(this.delimiter),\n                            systemSelected: this.addDamageAndCritical\n                        })\n\n                        // Get Ammo\n                        if (strikeUsage.selectedAmmoId && !strikeUsage.ammunition) {\n                            const item = this.actor.items.get(strikeUsage.selectedAmmoId)\n\n                            if (!item) {\n                                const id = 'noAmmo'\n                                const name = coreModule.api.Utils.i18n('tokenActionHud.pf2e.noAmmo')\n                                actions.push({\n                                    id,\n                                    name,\n                                    listName: `${usageGroupListName}: ${name}`,\n                                    encodedValue: id\n                                })\n                            } else {\n                                const id = this.#getActionId(item)\n                                const name = this.#getActionName(item)\n                                actions.push({\n                                    id,\n                                    name,\n                                    listName: `${usageGroupListName}: ${name}`,\n                                    encodedValue: [actionType, id].join(this.delimiter)\n                                })\n                            }\n                        }\n\n                        usageData.push({ actions, usageGroupData })\n                    }\n                }\n\n                if (this.splitStrikes) {\n                    this.addActions([...versatileOptionActions, ...auxiliaryActions], strikeGroupData)\n                    for (const usage of usageData) {\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\n                        this.addActions(usage.actions, usage.usageGroupData)\n                    }\n                } else {\n                    this.addActions([...(usageData[0]?.actions || []), ...versatileOptionActions, ...auxiliaryActions], strikeGroupData)\n                    usageData.shift()\n                    for (const usage of usageData) {\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\n                        this.addActions(usage.actions, usage.usageGroupData)\n                    }\n                }\n            }\n        }\n\n        /**\n         * Build toggles\n         */\n        #buildToggles () {\n            console.log(`${LOG_PREFIX}Build toggles`);\n            const actionType = 'toggle'\n\n            // Get toggles\n            const toggles = Object.values(this.actor.system.toggles).flatMap(domain => Object.values(domain))\n\n            // Exit if no toggles exist\n            if (!toggles.length) return\n\n            const togglesWithoutSuboptions = toggles.filter(toggle => toggle.suboptions.length === 0)\n            const togglesWithSuboptions = toggles.filter(toggle => toggle.suboptions.length !== 0)\n\n            // Create group data\n            const groupData = { id: 'toggles', type: 'system' }\n\n            // Get actions\n            const actions = togglesWithoutSuboptions.map(toggle => {\n                const id = encodeURIComponent(`${toggle.domain}>${toggle.option}>${toggle.itemId}>>`)\n                const name = coreModule.api.Utils.i18n(toggle.label)\n                const encodedValue = [actionType, id].join(this.delimiter)\n                const active = (toggle.checked) ? ' active' : ''\n                const cssClass = `toggle${active}`\n\n                return { id, encodedValue, name, cssClass }\n            })\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n\n            for (const toggle of togglesWithSuboptions) {\n                const id = [toggle.domain, toggle.option].join('.')\n                const subgroupName = coreModule.api.Utils.i18n(toggle.label)\n                const subgroupListName = `${ACTION_TYPE.toggle}: ${subgroupName}`\n                const subgroupData = {\n                    id,\n                    name: subgroupName,\n                    listName: subgroupListName,\n                    type: 'system-derived'\n                }\n\n                this.addGroup(subgroupData, groupData)\n\n                // Get actions\n                const actions = toggle.suboptions.map(suboption => {\n                    const id = encodeURIComponent(`${toggle.domain}>${toggle.option}>${toggle.itemId}>${suboption.value}`)\n                    const name = coreModule.api.Utils.i18n(suboption.label)\n                    const selected = suboption.selected && toggle.enabled && toggle.checked\n\n                    return {\n                        id,\n                        name,\n                        listName: `${subgroupListName}: ${name}`,\n                        encodedValue: ['toggle', id].join(this.delimiter),\n                        cssClass: this.#getActionCss({ selected })\n                    }\n                })\n\n                // Add actions to action list\n                this.addActions(actions, subgroupData)\n            }\n        }\n\n        #getActionId (entity, actionType, spellLevel) {\n            return (actionType === 'spell') ? `${entity.id ?? entity._id}-${spellLevel}` : entity.id ?? entity._id\n        }\n\n        #getActionName (entity) {\n            return entity?.name ?? entity?.label ?? ''\n        }\n\n        #getActionListName (entity, actionType) {\n            const name = this.#getActionName(entity)\n            const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n            return entity.listName ?? `${actionTypeName}${name}`\n        }\n\n        #getActionCss (entity) {\n            if (Object.hasOwn(entity, 'disabled')) {\n                const active = (!entity.disabled) ? ' active' : ''\n                return `toggle${active}`\n            }\n            if (Object.hasOwn(entity, 'selected')) {\n                const active = (entity.selected) ? ' active' : ''\n                return `toggle${active}`\n            }\n        }\n\n        #getActionEncodedValue (entity, actionType, spellLevel) {\n            const spellcastingId = entity?.spellcasting?.id\n            const encodedId = (actionType === 'spell') ? `${spellcastingId}>${spellLevel}>${entity.id ?? entity._id}` : this.#getActionId(entity, actionType, spellLevel)\n            return [actionType, encodedId].join(this.delimiter)\n        }\n\n        #getIcon1 (entity, actionType) {\n            const actions = entity.system?.actions\n            const actionTypes = ['free', 'reaction', 'passive']\n            const actionTypeValue = entity.system?.actionType?.value\n            const actionsCost = (actions) ? parseInt((actions || {}).value, 10) : null\n            const timeValue = entity.system?.time?.value\n            const actionIcon = entity.actionIcon\n            const iconType = (actionType === 'spell') ? timeValue : (actionTypes.includes(actionTypeValue)) ? actionTypeValue : actionsCost ?? actionIcon\n            const name = this.#getActionName(entity)\n            return this.#getActionIcon(iconType, name)\n        }\n\n        /**\n         * Get spell DC info\n         * @private\n         * @param {object} spellcastingEntry The spellcasting entry\n         * @returns {string}                 The spell DC info\n         */\n        #getSpellDcInfo (spellcastingEntry) {\n            const statistic = spellcastingEntry.statistic\n            const spellDc = typeof statistic.dc === 'function'\n                ? statistic.dc().value\n                : statistic.dc.value\n            const spellAttackModifier = statistic.check.mod\n            const spellAttackBonus = spellAttackModifier >= 0\n                ? `${coreModule.api.Utils.i18n('tokenActionHud.pf2e.atk')} +${spellAttackModifier}`\n                : `${coreModule.api.Utils.i18n('tokenActionHud.pf2e.atk')} ${spellAttackModifier}`\n            const spellDcInfo = `${coreModule.api.Utils.i18n('tokenActionHud.pf2e.dc')}${spellDc}`\n            return `${spellAttackBonus} ${spellDcInfo}`\n        }\n\n        /**\n         * Get actors\n         * @private\n         * @returns {object}\n         */\n        #getActors () {\n            const allowedTypes = ['character', 'npc']\n            const actors = canvas.tokens.controlled.map(token => token.actor)\n            if (actors.every(actor => allowedTypes.includes(actor.type))) { return actors }\n        }\n\n        /**\n         * Is equipped item\n         * @private\n         * @param {object} item\n         * @returns {boolean}\n         */\n        #isEquippedItem (item) {\n            const carryTypes = ['held', 'worn']\n            const carryType = item.system.equipped?.carryType\n\n            if (this.addUnequippedItems) return true\n            if (carryTypes.includes(carryType) && !item.system.containerId?.value?.length) return true\n            return false\n        }\n\n        #isAddItem (groupType, item) {\n            if (item.system.equipped?.carryType !== 'stowed') return true\n            return this.#isAddStowedItem(groupType, item)\n        }\n\n        /**\n         * Is add stowed item\n         * @private\n         * @param {string} groupType The group type: container or nonContainer\n         * @param {object} item      The item\n         * @returns {boolean}        Whether the stowed item should be added to the group\n         */\n        #isAddStowedItem (groupType, item) {\n            if (item.system.equipped?.carryType !== 'stowed') return true\n            if (this.addStowedItems === 'both') return true\n            if (groupType === 'container' && this.addStowedItems === 'containers') return true\n            if (groupType === 'nonContainer' && this.addStowedItems === 'nonContainers') return true\n            return false\n        }\n\n        /**\n         * Get item info\n         * @private\n         * @param {object} item\n         * @returns {object}\n         */\n        #getItemInfo (item) {\n            const quantityData = this.#getQuantityData(item) ?? ''\n            return {\n                info1: { text: quantityData }\n            }\n        }\n\n        /**\n         * Get quantity\n         * @private\n         * @param {object} item\n         * @returns {string}\n         */\n        #getQuantityData (item) {\n            const quantity = item?.system?.quantity?.value\n            return (quantity > 1) ? quantity : ''\n        }\n\n        /**\n         * Get action icon\n         * @private\n         * @param {object} action\n         * @returns {string}\n         */\n        #getActionIcon (action, title = '') {\n            if (DAMAGE_TYPE_ICONS[action]) {\n                return `<i class=\"${ACTION_ICON[action]}\" data-tooltip=\"${title}\"></i>`\n            }\n            return ACTION_ICON[action]\n        }\n\n        /**\n         * Get carry type icon\n         * @private\n         * @param {object} itemData The item data\n         * @returns {string}\n         */\n        #getCarryTypeIcon (itemData) {\n            let carryType = ''\n            switch (itemData?.carryType) {\n            case 'held':\n                if (itemData?.handsHeld === 2) {\n                    carryType = 'held2'\n                } else {\n                    carryType = 'held1'\n                }\n                break\n            default:\n                carryType = itemData?.carryType\n                break\n            }\n            const tooltip = coreModule.api.Utils.i18n(CARRY_TYPE_ICON[carryType]?.tooltip) ?? ''\n            return CARRY_TYPE_ICON[carryType]?.icon.replace('placeholder', tooltip) ?? ''\n        }\n\n        /**\n         * Get tooltip data\n         * @param {object} entity     The entity\n         * @param {string} actionType The action type\n         * @returns {Promise<object>} The tooltip data\n         */\n        async #getTooltipData (entity, actionType, spellRank = null) {\n            if (this.tooltipsSetting === 'none' || !entity) return ''\n            else if (this.tooltipsSetting === 'nameOnly') return entity.name ?? ''\n\n            const itemActionTypes = ['elementalBlast', 'strike']\n\n            let chatData\n\n            if (itemActionTypes.includes(actionType)) {\n                chatData = await entity.item.getChatData()\n            } else {\n                chatData = await entity.getChatData()\n            }\n\n            if (!chatData) return ''\n\n            switch (actionType) {\n            case 'item':\n                return {\n                    name: entity.name,\n                    description: chatData.description?.value,\n                    rarity: chatData.rarity,\n                    traits: chatData.traits,\n                    traits2: chatData.properties\n                }\n            case 'spell':\n            {\n                return {\n                    name: entity.name,\n                    description: chatData.description?.value,\n                    properties: chatData.properties,\n                    rarity: chatData.rarity,\n                    traits: chatData.traits,\n                    traitsAlt: chatData.spellTraits\n                }\n            }\n            case 'strike':\n                return {\n                    name: entity.label,\n                    descriptionLocalised: this.#getStrikeDescription(entity),\n                    modifiers: entity.modifiers,\n                    properties: chatData.properties?.filter(property => property !== 'PF2E.WeaponTypeMartial'),\n                    traits: entity.traits,\n                    traitsAlt: entity.weaponTraits\n                }\n            default:\n                return {\n                    name: actionType === 'elementalBlast' ? entity.item.name : entity.name,\n                    description: chatData.description?.value,\n                    properties: chatData.properties,\n                    rarity: chatData.rarity,\n                    traits: chatData.traits\n                }\n            }\n        }\n\n        /**\n         * Get tooltip\n         * @private\n         * @param {string} actionType  The action type\n         * @param {object} tooltipData The tooltip data\n         * @returns {Promise<string>}  The tooltip\n         */\n        async #getTooltip (actionType, tooltipData) {\n            if (this.tooltipsSetting === 'none') return ''\n\n            const name = coreModule.api.Utils.i18n(tooltipData.name)\n\n            if (this.tooltipsSetting === 'nameOnly') return name\n\n            if (typeof tooltipData === 'string') return tooltipData\n\n            const nameHtml = `<h3>${name}</h3>`\n\n            const description = coreModule.api.Utils.i18n(tooltipData?.description ?? tooltipData?.descriptionLocalised ?? '')\n\n            const rarityHtml = tooltipData?.rarity\n                ? `<span class=\"tag ${tooltipData.rarity.name}\">${coreModule.api.Utils.i18n(tooltipData.rarity.label)}</span>`\n                : ''\n\n            const propertiesHtml = tooltipData?.properties\n                ? `<div class=\"tah-properties\">${tooltipData.properties.map(property => `<span class=\"tah-property\">${coreModule.api.Utils.i18n(property)}</span>`).join('')}</div>`\n                : ''\n\n            const traitsHtml = tooltipData?.traits\n                ? tooltipData.traits.map(trait => `<span class=\"tag\">${coreModule.api.Utils.i18n(trait.label)}</span>`).join('')\n                : ''\n\n            const traits2Html = tooltipData?.traits2\n                ? tooltipData.traits2.map(trait => `<span class=\"tag tag_secondary\">${coreModule.api.Utils.i18n(trait.label ?? trait)}</span>`).join('')\n                : ''\n\n            const traitsAltHtml = tooltipData?.traitsAlt\n                ? tooltipData.traitsAlt.map(trait => `<span class=\"tag tag_alt\">${coreModule.api.Utils.i18n(trait.label)}</span>`).join('')\n                : ''\n\n            const modifiersHtml = tooltipData?.modifiers\n                ? `<div class=\"tags\">${tooltipData.modifiers.filter(modifier => modifier.enabled).map(modifier => {\n                    const label = coreModule.api.Utils.i18n(modifier.label)\n                    const sign = modifier.modifier >= 0 ? '+' : ''\n                    const mod = `${sign}${modifier.modifier ?? ''}`\n                    return `<span class=\"tag tag_transparent\">${label} ${mod}</span>`\n                }).join('')}</div>`\n                : ''\n\n            const tagsJoined = [rarityHtml, traitsHtml, traits2Html, traitsAltHtml].join('')\n\n            const tagsHtml = (tagsJoined) ? `<div class=\"tags\">${tagsJoined}</div>` : ''\n\n            const headerTags = (tagsHtml || modifiersHtml) ? `<div class=\"tah-tags-wrapper\">${tagsHtml}${modifiersHtml}</div>` : ''\n\n            if (!description && !tagsHtml && !modifiersHtml) return name\n\n            const tooltipHtml = `<div>${nameHtml}${headerTags}${description}${propertiesHtml}</div>`\n\n            return await TextEditor.enrichHTML(tooltipHtml, { async: true })\n        }\n\n        /**\n         * Get strike description\n         * @private\n         * @param {object} strike The strike data\n         * @returns {string}      The strike description\n         */\n        #getStrikeDescription (strike) {\n            const description = (strike?.description) ? `<p>${coreModule.api.Utils.i18n(strike?.description)}</p>` : ''\n            const criticalSuccess = (strike?.criticalSuccess) ? `<hr><h4>${coreModule.api.Utils.i18n('PF2E.Check.Result.Degree.Check.criticalSuccess')}</h4><p>${coreModule.api.Utils.i18n(strike?.criticalSuccess)}</p>` : ''\n            const success = (strike?.success) ? `<h4>${coreModule.api.Utils.i18n('PF2E.Check.Result.Degree.Check.success')}</h4><p>${coreModule.api.Utils.i18n(strike?.success)}</p>` : ''\n            return `${description}${criticalSuccess}${success}`\n        }\n    }\n})\n","import { GROUP } from './constants.js'\n\n/**\n * Default layout and groups\n */\nexport let DEFAULTS = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    const groups = GROUP\n    Object.values(groups).forEach(group => {\n        group.name = coreModule.api.Utils.i18n(group.name)\n        group.listName = `Group: ${coreModule.api.Utils.i18n(group.listName ?? group.name)}`\n    })\n    const groupsArray = Object.values(groups)\n    DEFAULTS = {\n        layout: [\n            /*{\n                nestId: 'initiative',\n                id: 'initiative',\n                name: coreModule.api.Utils.i18n('abfalter.initiative'),\n                groups:[\n                    {...groups.initiative, nestId: 'initiative_initiative'},\n                    {...groups.DEV, nestId: 'initiative_dev'}\n                ]\n            },\n            {\n                nestId: 'attack',\n                id: 'attack',\n                name: coreModule.api.Utils.i18n('abfalter.attack'),\n                groups: [\n                    { ...groups.attack, nestId: 'attack_attack' }\n                ]\n            },\n            {\n                nestId: 'strikes',\n                id: 'strikes',\n                name: 'strikes',//coreModule.api.Utils.i18n('PF2E.StrikesLabel'),\n                groups: [\n                    { ...groups.toggles, nestId: 'strikes_toggles' },\n                    { ...groups.strikes, nestId: 'strikes_strikes' }\n                ],\n                settings: { customWidth: 500 }\n            },\n            {\n                nestId: 'inventory',\n                id: 'inventory',\n                name: coreModule.api.Utils.i18n('abfalter.inventory'),\n                groups: [\n                    { ...groups.weapons, nestId: 'inventory_weapons' },\n                    { ...groups.shields, nestId: 'inventory_shields' },\n                    { ...groups.armor, nestId: 'inventory_armor' },\n                    { ...groups.equipment, nestId: 'inventory_equipment' },\n                    //{ ...groups.consumables, nestId: 'inventory_consumables' },\n                    //{ ...groups.containers, nestId: 'inventory_containers' },\n                    //{ ...groups.treasure, nestId: 'inventory_treasure' }\n                ]\n            },\n            {\n                nestId: 'spells',\n                id: 'spells',\n                name: coreModule.api.Utils.i18n('PF2E.Item.Spell.Plural'),\n                groups: [\n                    { ...groups.spells, nestId: 'spells_spells' }\n                ]\n            },\n            {\n                nestId: 'attributes',\n                id: 'attributes',\n                name: coreModule.api.Utils.i18n('tokenActionHud.pf2e.attributes'),\n                groups: [\n                    { ...groups.heroPoints, nestId: 'attributes_hero-points' },\n                    { ...groups.mythicPoints, nestId: 'attributes_mythic-points' },\n                    { ...groups.initiative, nestId: 'attributes_initiative' },\n                    { ...groups.perceptionCheck, nestId: 'attributes_perception-check' },\n                    { ...groups.saves, nestId: 'attributes_saves' }\n                ]\n            },\n            {\n                nestId: 'abilities',\n                id: 'abilities',\n                name: coreModule.api.Utils.i18n('tokenActionHud.abfalter.ability.full'),\n                groups: [\n                    { ...groups.favAbilities, nestId: 'abilities_fav' },\n                    { ...groups.athAbilities, nestId: 'abilities_ath' },\n                    { ...groups.creaAbilities, nestId: 'abilities_crea' },\n                    { ...groups.intAbilities, nestId: 'abilities_int' },\n                    { ...groups.subAbilities, nestId: 'abilities_sub' },\n                    { ...groups.socAbilities, nestId: 'abilities_soc' },\n                    { ...groups.vigAbilities, nestId: 'abilities_vig' },\n                    { ...groups.custAbilities, nestId: 'abilities_cust' },\n                ]\n            },\n            {\n                nestId: 'effects',\n                id: 'effects',\n                name: coreModule.api.Utils.i18n('abfalter.effects'),\n                groups: [\n                    { ...groups.conditions, nestId: 'effects_conditions' },\n                    { ...groups.socialConditions, nestId: 'effects_social-conditions' },\n                    { ...groups.otherConditions, nestId: 'effects_other-conditions' },\n                    { ...groups.effects, nestId: 'effects_effects' }\n                ]\n            },*/\n            {\n                nestId: 'utility',\n                id: 'utility',\n                name: coreModule.api.Utils.i18n('tokenActionHud.utility'),\n                groups: [\n                    //{ ...groups.combat, nestId: 'utility_combat' },\n                    { ...groups.token, nestId: 'utility_token' }//,\n                    //{ ...groups.recoveryCheck, nestId: 'utility_recovery-check' },\n                    //{ ...groups.rests, nestId: 'utility_rests' },\n                    //{ ...groups.utility, nestId: 'utility_utility' }\n                ]\n            }\n        ],\n        groups: groupsArray\n    }\n})","import { MODULE } from './constants.js'\n\n/**\n * Register module settings\n * Called by Token Action HUD Core to register Token Action HUD system module settings\n * @param {function} coreUpdate Token Action HUD Core update function\n */\nexport function register (coreUpdate) {\n    /*game.settings.register(MODULE.ID, 'displayUnequipped', {\n        name: game.i18n.localize('tokenActionHud.template.settings.displayUnequipped.name'),\n        hint: game.i18n.localize('tokenActionHud.template.settings.displayUnequipped.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            coreUpdate(value)\n        }\n    })*/\n    //TODO\n    //Probably add things here\n}\n","export let RollHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\n     */\n    RollHandler = class RollHandler extends coreModule.api.RollHandler {\n\n        //TODO\n        //Might change/add/modify things here\n\n        /**\n         * Handle action click\n         * Called by Token Action HUD Core when an action is left or right-clicked\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionClick (event, encodedValue) {\n            const [actionTypeId, actionId] = encodedValue.split('|')\n\n            const renderable = ['item']\n\n            if (renderable.includes(actionTypeId) && this.isRenderItem()) {\n                return this.doRenderItem(this.actor, actionId)\n            }\n\n            const knownCharacters = ['character']\n\n            // If single actor is selected\n            if (this.actor) {\n                await this.#handleAction(event, this.actor, this.token, actionTypeId, actionId)\n                return\n            }\n\n            const controlledTokens = canvas.tokens.controlled\n                .filter((token) => knownCharacters.includes(token.actor?.type))\n\n            // If multiple actors are selected\n            for (const token of controlledTokens) {\n                const actor = token.actor\n                await this.#handleAction(event, actor, token, actionTypeId, actionId)\n            }\n        }\n\n        /**\n         * Handle action hover\n         * Called by Token Action HUD Core when an action is hovered on or off\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionHover (event, encodedValue) {}\n\n        /**\n         * Handle group click\n         * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\n         * @override\n         * @param {object} event The event\n         * @param {object} group The group\n         */\n        async handleGroupClick (event, group) {}\n\n        /**\n         * Handle action\n         * @private\n         * @param {object} event        The event\n         * @param {object} actor        The actor\n         * @param {object} token        The token\n         * @param {string} actionTypeId The action type id\n         * @param {string} actionId     The actionId\n         */\n        async #handleAction (event, actor, token, actionTypeId, actionId) {\n            switch (actionTypeId) {\n            case 'item':\n                this.#handleItemAction(event, actor, actionId)\n                break\n            case 'utility':\n                this.#handleUtilityAction(token, actionId)\n                break\n            case '':\n                \n                break\n            }\n        }\n\n        /**\n         * Handle item action\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #handleItemAction (event, actor, actionId) {\n            const item = actor.items.get(actionId)\n            item.toChat(event)\n        }\n\n        /**\n         * Handle utility action\n         * @private\n         * @param {object} token    The token\n         * @param {string} actionId The action id\n         */\n        async #handleUtilityAction (token, actionId) {\n            switch (actionId) {\n            case 'endTurn':\n                if (game.combat?.current?.tokenId === token.id) {\n                    await game.combat?.nextTurn()\n                }\n                break\n            }\n        }\n    }\n})\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js'\nimport { RollHandler as Core } from './roll-handler.js'\nimport { MODULE, LOG_PREFIX } from './constants.js'\nimport { DEFAULTS } from './defaults.js'\nimport * as systemSettings from './settings.js'\n\nexport let SystemManager = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's SystemManager class\n     */\n    SystemManager = class SystemManager extends coreModule.api.SystemManager {\n        /**\n         * Returns an instance of the ActionHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {class} The ActionHandler instance\n         */\n        getActionHandler () {\n            console.log(\"DEV: returns actionhandler\")\n            return new ActionHandler()\n        }\n\n        /**\n         * Returns a list of roll handlers to Token Action HUD Core\n         * Used to populate the Roll Handler module setting choices\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The available roll handlers\n         */\n        getAvailableRollHandlers () {\n            const coreTitle = 'Core abfalter'\n            const choices = { core: coreTitle }\n            return choices\n        }\n\n        /**\n         * Returns an instance of the RollHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @param {string} rollHandlerId The roll handler ID\n         * @returns {class}              The RollHandler instance\n         */\n        getRollHandler (rollHandlerId) {\n            let rollHandler\n            switch (rollHandlerId) {\n            case 'core':\n            default:\n                rollHandler = new Core()\n                break\n            }\n            return rollHandler\n        }\n\n        /**\n         * Returns the default layout and groups to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @returns {object} The default layout and groups\n         */\n        async registerDefaults () {\n            //TODO\n            //Might add things here\n            return DEFAULTS\n        }\n\n        /**\n         * Register Token Action HUD system module settings\n         * Called by Token Action HUD Core\n         * @override\n         * @param {function} coreUpdate The Token Action HUD Core update function\n         */\n        registerSettings (coreUpdate) {\n            systemSettings.register(coreUpdate)\n        }\n\n        /**\n         * Returns styles to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The TAH system styles\n         */\n        registerStyles () {\n            //console.log(`${LOG_PREFIX}style registering`);\n            \n            //TODO\n            //Might change things here\n            return {\n                template: {\n                    class: 'tah-abflater-template-style', // The class to add to first DIV element\n                    file: 'tah-abfalter-style', // The file without the css extension\n                    moduleId: MODULE.ID, // The module ID\n                    name: 'Abfalter Template Style' // The name to display in the Token Action HUD Core 'Style' module setting\n                }\n            }\n        }\n    }\n})\n","import { SystemManager } from './system-manager.js'\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js'\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n    /**\n     * Return the SystemManager and requiredCoreModuleVersion to Token Action HUD Core\n     */\n    const module = game.modules.get(MODULE.ID)\n    module.api = {\n        requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n        SystemManager\n    }\n    Hooks.call('tokenActionHudSystemReady', module)\n})\n"],"names":["LOG_PREFIX","MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","DAMAGE_TYPE_ICONS","axe","brain","bolt","droplet","fire","ghost","hammer","skull","snowflake","spider","sun","vial","ACTION_ICON","free","reaction","passive","A","D","T","F","R","ACTION_TYPE","attribute","condition","effect","initiative","item","save","ability","spell","strike","strikeAuxiliaryAction","toggle","utility","CARRY_TYPE_ICON","held1","icon","tooltip","held2","dropped","stowed","worn","MODULAR_OPTION","bludgeoning","piercing","slashing","SKILL_ABBREVIATION","acrobatics","arcana","athletics","crafting","deception","diplomacy","intimidation","medicine","nature","occultism","performance","perception","religion","society","stealth","survival","thievery","STRIKE_ICON","melee","thrown","STRIKE_USAGE","name","ranged","GROUP","SKILL_ACTION","l5pbgrj8SSNtRGs8","actionCost","skill","image","ZEWD4zcEDQwYhVT8","LXCy1iJddD95Z91s","xcrdOOiN0l6O1sIn","zn0HadZeoKDALxRu","Tu7LIRelQsiOuo1l","aDsYSdRqiC6qQIOQ","zUJ0UhuoFt5a7tiN","mNphXpAkmGsMadUv","U6WjxFPn4fUqIrfl","RZyfkw1DiqVy3JUC","sDUERv4E88G5BRPr","YWAvvDXpdW1fYPFo","nEwqNNWX6scLt4sc","T2QNEoRojMWEec4a","ooiO59Ch2QaebOmc","lkEcQQss16SIrVxM","RjfPFjqPrNve6eeh","yMTKMnaYSGtDz4wk","rCgGPEyXbzLFcio6","i95kcGLIQKOTsnv6","FlM3HvpnsZpCKawG","v3dlDjFlOmT5T2gC","k5nW4jGyXD0Oq9LR","VTg4t8kYTvXcHROq","QPsV0qi2zXm7syt6","Gj68YCVlDjc75iCP","dWcrojMk0d2WRPBq","BQTA7bL264189Xla","tbveXG4gaIoKnsWX","tikhJ2b6AMh7wQU7","LN67MgbGE8IHb2X0","PmHt7Gb5fCrlWWTr","yNry1xMZqdWHncbV","HSTkVuv0SjTNK3Xx","UKHPveLpG7hUs4D0","zjovbAeuLvyuWFKd","mkKko3CEBCyJVQw1","zkqh01BoXDVgydzo","TIlUkCzviYxdVk4E","Al5LYMMdeDcpC9Br","m4iM5r3TfvQs5Y2n","R03LRl2RBbsm6EcF","gRj7xUfcpUZQLrOC","SKILL","lore","ITEM_TYPE","advantage","groupId","disadvantage","elan","proficiency","spellPath","turnMaint","dailyMaint","incarnation","invocation","mentalPattern","psychicMatrix","maintPower","discipline","arsMagnus","martialArt","kiTechnique","kiSealCreature","armor","armorHelmet","weapon","ammo","inventory","currency","class","ABILITY_TYPE","acrobatic","Utils","Hooks","once","async","coreModule","getSetting","key","defaultValue","value","game","settings","get","api","Logger","debug","setSetting","set","ActionHandler","actors","actorId","actorType","tokenId","items","groupIds","activationGroupIds","effectGroupIds","inventoryGroupIds","spellGroupIds","featureActions","inventoryActions","spellActions","mapLabel","i18n","replace","buildSystemActions","this","actor","getActors","type","includes","sortItemsByName","abbreviateSkills","addAuxiliaryActions","addDamageAndCritical","addStowedItems","addUnequippedItems","calculateAttackPenalty","colorSkills","showStrikeImages","showStrikeNames","showStrikeTraits","splitStrikes","buildCharacterActions","buildFamiliarActions","buildHazardActions","buildNpcActions","buildMultipleTokenActions","Promise","all","buildInitiative","buildAbilities","buildActions","buildAttack","buildCombat","buildEffects","buildInventory","buildPerceptionCheck","buildSaves","buildStrikes","buildFeats","buildSpells","buildToggles","console","log","actionType","size","actionTypes","actionItems","Map","filter","_","itemData","system","actionsMap","suppressed","actionTypeValue","groupData","id","actions","map","getActionId","getActionName","listName","getActionListName","cssClass","getActionCss","encodedValue","join","delimiter","icon1","getIcon1","img","getImage","info","getItemInfo","tooltipData","getTooltipData","getTooltip","addActions","attack","slug","modifier","getModifier","totalModifier","info1","text","combatTypes","endTurn","combat","current","token","Object","entries","combatType","buildConditions","limitedConditions","activeConditions","conditions","pf2e","ConditionManager","conditionId","startsWith","conditionData","activeCondition","activeConditionId","attributeValue","attributes","max","isValued","description","sort","a","b","localeCompare","actionsTemp","reduce","acc","push","actionsOther","buildPoints","mythicEnabled","resources","mythicPoints","heroPoints","unidentified","user","isGM","_$","featTypes","ancestryfeature","classfeature","ancestry","general","bonus","featsMap","category","featType","buildHeroActions","modules","active","actionTypeName","heroActions","getFlag","remainingHeroPoints","length","format","nb","localize","heroActionActions","heroAction","uuid","uuidData","fromUuid","content","fullName","spec","modifiers","inventoryMap","hasQuantity","quantity","isEquippedItem","isAddItem","itemType","itemCategoryMap","categoryTypeMap","icon2","getCarryTypeIcon","has","parentGroupData","containers","container","contents","addGroup","contentsMap","buildRecoveryCheck","dyingValue","dying","buildRests","every","saves","CONFIG","PF2E","saveData","label","mod","skills","getAbilities","getSharedSkills","skillsMap","forEach","element","skillId","skillData","abfalter","filter1","secondaryFields","s","ret","allSkillSets","minSkillSetSize","Math","min","skillSet","find","smallestSkill","some","spellcastingEntries","spellcastingEntry","spellbookGroupId","slugify","replacement","strict","bookGroupData","getSpellDcInfo","addGroupInfo","spellInfo","getSheetData","activeLevels","groups","level","spellLevel","levelGroupData","String","addSpellSlotInfo","activeSpells","activeSpell","expended","spells","getActionEncodedValue","isCantrip","isFlexible","isFocusPool","isInnate","isPrepared","focus","slots","uses","spellSlot","maxSlots","buildElementalBlasts","blasts","ElementalBlast","configs","blast","damageTypeActions","strikeGroupData","usageData","strikeGroupId","strikeGroupName","groupName","blastTraits","traits","trait","strikeGroupListName","showTitle","damageTypes","damageType","index","encodeURIComponent","getActionIcon","blastUsages","maps","blastUsage","usage","usageGroupId","usageGroupName","range","usageGroupListName","usageGroupImage","usageGroupShowTitle","usageGroupData","values","roll","split","damageId","damageName","systemSelected","criticalId","criticalName","shift","toggles","flatMap","domain","togglesWithoutSuboptions","suboptions","togglesWithSuboptions","option","itemId","subgroupName","subgroupListName","subgroupData","suboption","selected","enabled","checked","entity","_id","hasOwn","disabled","spellcastingId","spellcasting","actionsCost","parseInt","timeValue","time","actionIcon","iconType","statistic","spellDc","dc","spellAttackModifier","check","allowedTypes","canvas","tokens","controlled","carryType","equipped","containerId","groupType","isAddStowedItem","getQuantityData","action","title","handsHeld","spellRank","tooltipsSetting","chatData","getChatData","rarity","traits2","properties","traitsAlt","spellTraits","descriptionLocalised","getStrikeDescription","property","weaponTraits","nameHtml","rarityHtml","propertiesHtml","traitsHtml","traits2Html","traitsAltHtml","modifiersHtml","tagsJoined","tagsHtml","tooltipHtml","TextEditor","enrichHTML","criticalSuccess","success","DEFAULTS","register","coreUpdate","group","groupsArray","layout","nestId","RollHandler","handleActionClick","event","actionTypeId","actionId","isRenderItem","doRenderItem","knownCharacters","handleAction","controlledTokens","handleActionHover","handleGroupClick","handleItemAction","handleUtilityAction","toChat","nextTurn","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerDefaults","registerSettings","registerStyles","template","file","moduleId","on","module","requiredCoreModuleVersion","call"],"mappings":"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"}