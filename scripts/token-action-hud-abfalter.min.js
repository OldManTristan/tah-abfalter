const t="TAH-abfalter | ",e={ID:"tah-abfalter"},i={ID:"token-action-hud-core"},s="2.0",a={axe:"fa-solid fa-axe fa-fw",brain:"fa-solid fa-brain fa-fw",bolt:"fa-solid fa-bolt fa-fw","bow-arrow":"fa-solid fa-bow-arrow fa-fw",droplet:"fa-solid fa-droplet fa-fw",fire:"fa-solid fa-fire fa-fw",ghost:"fa-solid fa-ghost fa-fw",hammer:"fa-solid fa-hammer fa-fw",skull:"fa-solid fa-skull fa-fw",snowflake:"fa-solid fa-snowflake fa-fw",spider:"fa-solid fa-spider fa-fw",sun:"fa-solid fa-sun fa-fw",vial:"fa-solid fa-vial fa-fw","waveform-lines":"fa-solid fa-waveform-lines fa-fw"},n={1:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>A</span>",2:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>D</span>",3:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>T</span>",free:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>F</span>",reaction:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>R</span>",passive:"",A:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>A</span>",D:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>D</span>",T:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>T</span>",F:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>F</span>",R:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>R</span>",...a},o={attribute:"attribute",condition:"TYPES.Item.condition",effect:"TYPES.Item.effect",initiative:"abfalter.initiative",item:"PF2E.ItemTitle",save:"abfalter.resistances",ability:"abfalter.ability",spell:"TYPES.Item.spell",strike:"strikes",strikeAuxiliaryAction:"strikesAux",toggle:"toggle",utility:"tokenActionHud.utility"},l={held1:{icon:'<span class="fa-stack fa-fw fa-2xs" data-tooltip="placeholder"><i class="fa-solid fa-hand-back-fist fa-stack-2x"></i><i class="fab fa-1 fa-stack-1x" style="filter: invert(1);"></i></span>',tooltip:"PF2E.CarryType.held1"},held2:{icon:'<span class="fa-stack fa-fw fa-2xs" data-tooltip="placeholder"><i class="fa-solid fa-hand-back-fist fa-stack-2x"></i><i class="fab fa-2 fa-stack-1x" style="filter: invert(1);"></i></span>',tooltip:"PF2E.CarryType.held2"},dropped:{icon:'<i class="fas fa-grip-lines fa-fw" data-tooltip="placeholder"></i>',tooltip:"PF2E.CarryType.dropped"},stowed:{icon:'<i class="fas fa-box fa-fw" data-tooltip="placeholder"></i>',tooltip:"PF2E.CarryType.stowed"},worn:{icon:'<i class="fas fa-tshirt fa-fw" data-tooltip="placeholder"></i>',tooltip:"PF2E.CarryType.worn"}},c={bludgeoning:"PF2E.TraitBludgeoning",piercing:"PF2E.TraitPiercing",slashing:"PF2E.TraitSlashing"},r={acrobatics:"acr",arcana:"arc",athletics:"ath",crafting:"cra",deception:"dec",diplomacy:"dip",intimidation:"itm",medicine:"med",nature:"nat",occultism:"occ",performance:"prf",perception:"per",religion:"rel",society:"soc",stealth:"ste",survival:"sur",thievery:"thi"},d={melee:"systems/pf2e/icons/mdi/sword.svg",thrown:"systems/pf2e/icons/mdi/thrown.svg"},m={melee:{name:"PF2E.WeaponRangeMelee"},ranged:{name:"PF2E.NPCAttackRanged"},thrown:{name:"PF2E.TraitThrown"}},p={attack:{id:"attack",name:"PF2E.AttackLabel",type:"system"},toggles:{id:"toggles",name:"PF2E.TogglesLabel",type:"system"},strikes:{id:"strikes",name:"PF2E.StrikesLabel",type:"system"},weapons:{id:"weapons",name:"tokenActionHud.pf2e.weapons",type:"system"},shields:{id:"shields",name:"tokenActionHud.pf2e.shields",type:"system"},armor:{id:"armor",name:"tokenActionHud.pf2e.armor",type:"system"},equipment:{id:"equipment",name:"tokenActionHud.pf2e.equipment",type:"system"},consumables:{id:"consumables",name:"tokenActionHud.pf2e.consumables",type:"system"},containers:{id:"containers",name:"tokenActionHud.pf2e.containers",type:"system"},treasure:{id:"treasure",name:"tokenActionHud.pf2e.treasure",type:"system"},ancestryFeatures:{id:"ancestry-features",name:"PF2E.Actor.Character.FeatSlot.AncestryFeaturesHeader",type:"system"},classFeatures:{id:"class-features",name:"PF2E.Actor.Character.FeatSlot.ClassFeaturesHeader",type:"system"},ancestryFeats:{id:"ancestry-feats",name:"PF2E.Actor.Character.FeatSlot.AncestryHeader",type:"system"},spells:{id:"spells",name:"PF2E.Item.Spell.Plural",type:"system"},initiative:{id:"initiative",name:"PF2E.InitiativeLabel",type:"system"},perceptionCheck:{id:"perception-check",name:"PF2E.PerceptionLabel",type:"system"},coreSkills:{id:"core-skills",name:"PF2E.CoreSkillsHeader",type:"system"},loreSkills:{id:"lore-skills",name:"PF2E.LoreSkillsHeader",type:"system"},effects:{id:"effects",name:"PF2E.EffectsLabel",type:"system"},combat:{id:"combat",name:"tokenActionHud.combat",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"},recoveryCheck:{id:"recovery-check",name:"PF2E.Check.Specific.Recovery",type:"system"},rests:{id:"rests",name:"tokenActionHud.pf2e.rests",type:"system"},saves:{id:"saves",name:"PF2E.SavesHeader",type:"system"},utility:{id:"utility",name:"tokenActionHud.utility",type:"system"},abilities:{id:"abilities",name:"tokenActionHud.abfalter.abilities",type:"system"},"fav-abilities":{id:"fav_abilities",name:"tokenActionHud.abfalter.abilities",type:"system"}},u={l5pbgrj8SSNtRGs8:{name:"PF2E.Actions.AdministerFirstAid.Stabilize.Title",actionCost:2,skill:"medicine",image:"systems/pf2e/icons/features/feats/treat-wounds.webp"},ZEWD4zcEDQwYhVT8:{name:"PF2E.Actions.AdministerFirstAid.StopBleeding.Title",actionCost:2,skill:"medicine",image:"systems/pf2e/icons/conditions/persistent-damage.webp"},"55mxH0w8UkY1o3Xv":{name:"PF2E.Actions.Balance.Title",skill:"acrobatics",actionCost:1,image:"icons/skills/movement/feet-winged-boots-brown.webp"},LXCy1iJddD95Z91s:{name:"PF2E.Actions.Climb.Title",skill:"athletics",actionCost:1,image:"icons/sundries/misc/ladder.webp"},"9RNumMausgG7adgL":{name:"PF2E.Actions.Coerce.Title",skill:"intimidation",actionCost:"passive",image:"icons/skills/social/intimidation-impressing.webp"},xcrdOOiN0l6O1sIn:{name:"PF2E.Actions.CommandAnAnimal.Title",skill:"nature",actionCost:1,image:"icons/environment/creatures/horse-white.webp"},zn0HadZeoKDALxRu:{name:"PF2E.Actions.ConcealAnObject.Title",skill:"stealth",actionCost:1,image:"systems/pf2e/icons/equipment/adventuring-gear/wax-key-blank.webp"},Tu7LIRelQsiOuo1l:{name:"PF2E.Actions.Craft.Title",skill:"crafting",actionCost:"passive",image:"icons/skills/trades/smithing-anvil-silver-red.webp"},aDsYSdRqiC6qQIOQ:{name:"PF2E.Actions.CreateADiversion.DistractingWords.Title",skill:"deception",actionCost:1,image:"icons/magic/control/mouth-smile-deception-purple.webp"},zUJ0UhuoFt5a7tiN:{name:"PF2E.Actions.CreateADiversion.Gesture.Title",skill:"deception",actionCost:1,image:"icons/skills/social/wave-halt-stop.webp"},"1JpYPlIkjyseE9JU":{name:"PF2E.Actions.CreateADiversion.Trick.Title",skill:"deception",actionCost:1,image:"systems/pf2e/icons/spells/charming-words.webp"},mNphXpAkmGsMadUv:{name:"PF2E.Actions.CreateForgery.Title",skill:"society",actionCost:"passive",image:"systems/pf2e/icons/spells/transcribe-moment.webp"},U6WjxFPn4fUqIrfl:{name:"PF2E.Actions.DecipherWriting.Title",skill:"arcana",actionCost:"passive",image:"icons/skills/trades/academics-book-study-runes.webp"},RZyfkw1DiqVy3JUC:{name:"PF2E.Actions.DecipherWriting.Title",skill:"occultism",actionCost:"passive",image:"icons/skills/trades/academics-book-study-purple.webp"},sDUERv4E88G5BRPr:{name:"PF2E.Actions.DecipherWriting.Title",skill:"religion",actionCost:"passive",image:"systems/pf2e/icons/equipment/other/spellbooks/thresholds-of-truth.webp"},YWAvvDXpdW1fYPFo:{name:"PF2E.Actions.DecipherWriting.Title",skill:"society",actionCost:"passive",image:"icons/skills/trades/academics-study-reading-book.webp"},nEwqNNWX6scLt4sc:{name:"PF2E.Actions.Demoralize.Title",skill:"intimidation",actionCost:1,image:"icons/skills/social/intimidation-impressing.webp"},T2QNEoRojMWEec4a:{name:"PF2E.Actions.DisableDevice.Title",skill:"thievery",actionCost:2,image:"systems/pf2e/icons/equipment/adventuring-gear/thieves-tools.webp"},ooiO59Ch2QaebOmc:{name:"PF2E.Actions.Disarm.Title",skill:"athletics",actionCost:1,image:"icons/skills/melee/sword-damaged-broken-glow-red.webp"},"50Q0DYL33Kalu1BH":{name:"PF2E.Actions.Escape.Title",skill:"acrobatics",actionCost:1,image:"icons/skills/movement/feet-winged-boots-glowing-yellow.webp"},lkEcQQss16SIrVxM:{name:"PF2E.Actions.Escape.Title",skill:"athletics",actionCost:1,image:"icons/skills/movement/feet-winged-boots-glowing-yellow.webp"},RjfPFjqPrNve6eeh:{name:"PF2E.Actions.Feint.Title",skill:"deception",actionCost:1,image:"icons/skills/melee/maneuver-sword-katana-yellow.webp"},yMTKMnaYSGtDz4wk:{name:"PF2E.Actions.ForceOpen.Title",skill:"athletics",actionCost:1,image:"icons/equipment/feet/boots-armored-steel.webp"},rCgGPEyXbzLFcio6:{name:"PF2E.Actions.GatherInformation.Title",skill:"diplomacy",actionCost:"passive",image:"icons/skills/social/diplomacy-handshake.webp"},i95kcGLIQKOTsnv6:{name:"PF2E.Actions.Grapple.Title",skill:"athletics",actionCost:"passive",image:"icons/skills/melee/unarmed-punch-fist.webp"},FlM3HvpnsZpCKawG:{name:"PF2E.Actions.Hide.Title",skill:"stealth",actionCost:1,image:"systems/pf2e/icons/features/classes/wild.webp"},v3dlDjFlOmT5T2gC:{name:"PF2E.Actions.HighJump.Title",skill:"athletics",actionCost:2,image:"icons/skills/movement/arrows-up-trio-red.webp"},k5nW4jGyXD0Oq9LR:{name:"PF2E.Actions.Impersonate.Title",skill:"deception",actionCost:"passive",image:"icons/equipment/head/mask-carved-scream-tan.webp"},VTg4t8kYTvXcHROq:{name:"PF2E.Actions.Lie.Title",skill:"deception",actionCost:"passive",image:"icons/magic/control/mouth-smile-deception-purple.webp"},QPsV0qi2zXm7syt6:{name:"PF2E.Actions.LongJump.Title",skill:"athletics",actionCost:2,image:"icons/skills/movement/figure-running-gray.webp"},"1Sj2Pz3VI2SFWqZw":{name:"PF2E.Actions.MakeAnImpression.Title",skill:"diplomacy",actionCost:"passive",image:"icons/environment/people/commoner.webp"},"9Ul5Op5OceT9P5SS":{name:"PF2E.Actions.ManeuverInFlight.Title",skill:"acrobatics",actionCost:1,image:"icons/commodities/biological/wing-bird-white.webp"},Gj68YCVlDjc75iCP:{name:"PF2E.Actions.PalmAnObject.Title",skill:"thievery",actionCost:1,image:"icons/sundries/gaming/playing-cards.webp"},dWcrojMk0d2WRPBq:{name:"PF2E.Actions.Perform.Title",skill:"performance",actionCost:1,image:"icons/skills/trades/music-singing-voice-blue.webp"},"8YrH37NzKRuiKFbF":{name:"PF2E.Actions.PickALock.Title",skill:"thievery",actionCost:2,image:"icons/sundries/misc/lock-bronze-reinforced.webp"},BQTA7bL264189Xla:{name:"PF2E.Actions.Repair.Title",skill:"crafting",actionCost:"passive",image:"icons/tools/smithing/anvil.webp"},tbveXG4gaIoKnsWX:{name:"PF2E.Actions.Request.Title",skill:"diplomacy",actionCost:1,image:"icons/skills/social/thumbsup-approval-like.webp"},tikhJ2b6AMh7wQU7:{name:"PF2E.Actions.Seek.Title",skill:"perception",actionCost:1,image:"icons/tools/scribal/magnifying-glass.webp"},LN67MgbGE8IHb2X0:{name:"PF2E.Actions.SenseDirection.Title",skill:"survival",actionCost:"passive",image:"icons/tools/navigation/compass-brass-blue-red.webp"},PmHt7Gb5fCrlWWTr:{name:"PF2E.Actions.SenseMotive.Title",skill:"perception",actionCost:1,image:"icons/environment/people/commoner.webp"},yNry1xMZqdWHncbV:{name:"PF2E.Actions.Shove.Title",skill:"athletics",actionCost:1,image:"systems/pf2e/icons/spells/hydraulic-push.webp"},HSTkVuv0SjTNK3Xx:{name:"PF2E.Actions.Sneak.Title",skill:"stealth",actionCost:1,image:"systems/pf2e/icons/conditions/unnoticed.webp"},UKHPveLpG7hUs4D0:{name:"PF2E.Actions.Squeeze.Title",skill:"acrobatics",actionCost:"passive",image:"icons/commodities/tech/claw-mechanical.webp"},zjovbAeuLvyuWFKd:{name:"PF2E.Actions.Steal.Title",skill:"thievery",actionCost:1,image:"icons/containers/bags/coinpouch-gold-red.webp"},mkKko3CEBCyJVQw1:{name:"PF2E.Actions.Subsist.Title",skill:"society",actionCost:"passive",image:"icons/environment/settlement/building-rubble.webp"},zkqh01BoXDVgydzo:{name:"PF2E.Actions.Subsist.Title",skill:"survival",actionCost:"passive",image:"icons/environment/wilderness/camp-improvised.webp"},TIlUkCzviYxdVk4E:{name:"PF2E.Actions.Swim.Title",skill:"athletics",actionCost:1,image:"icons/creatures/fish/fish-shark-swimming.webp"},Al5LYMMdeDcpC9Br:{name:"PF2E.Actions.Track.Title",skill:"survival",actionCost:"passive",image:"systems/pf2e/icons/conditions/observed.webp"},m4iM5r3TfvQs5Y2n:{name:"PF2E.Actions.TreatDisease.Title",skill:"medicine",actionCost:"passive",image:"icons/magic/nature/root-vine-caduceus-healing.webp"},R03LRl2RBbsm6EcF:{name:"PF2E.Actions.TreatPoison.Title",skill:"medicine",actionCost:1,image:"systems/pf2e/icons/effects/treat-poison.webp"},gRj7xUfcpUZQLrOC:{name:"PF2E.Actions.Trip.Title",skill:"athletics",actionCost:1,image:"icons/skills/wounds/bone-broken-marrow-yellow.webp"},"2qhYHkcSsTJoSwrJ":{name:"PF2E.Actions.TumbleThrough.Title",skill:"acrobatics",actionCost:1,image:"icons/skills/movement/feet-winged-sandals-tan.webp"}},h={acrobatics:{name:"PF2E.SkillAcrobatics"},arcana:{name:"PF2E.SkillArcana"},athletics:{name:"PF2E.SkillAthletics"},crafting:{name:"PF2E.SkillCrafting"},deception:{name:"PF2E.SkillDeception"},diplomacy:{name:"PF2E.SkillDiplomacy"},intimidation:{name:"PF2E.SkillIntimidation"},lore:{name:"PF2E.SkillLore"},medicine:{name:"PF2E.SkillMedicine"},nature:{name:"PF2E.SkillNature"},occultism:{name:"PF2E.SkillOccultism"},perception:{name:"PF2E.PerceptionLabel"},performance:{name:"PF2E.SkillPerformance"},religion:{name:"PF2E.SkillReligion"},society:{name:"PF2E.SkillSociety"},stealth:{name:"PF2E.SkillStealth"},survival:{name:"PF2E.SkillSurvival"},thievery:{name:"PF2E.SkillThievery"}},g={advantage:{groupId:"advantage"},disadvantage:{groupId:"disadvantage"},elan:{groupId:"elan"},proficiency:{groupId:"proficiency"},spell:{groupId:"spell"},spellPath:{groupId:"spellPath"},turnMaint:{groupId:"turnMaint"},dailyMaint:{groupId:"dailyMaint"},incarnation:{groupId:"incarnation"},invocation:{groupId:"invocation"},mentalPattern:{groupId:"mentalPattern"},psychicMatrix:{groupId:"psychicMatrix"},maintPower:{groupId:"maintPower"},discipline:{groupId:"discipline"},arsMagnus:{groupId:"arsMagnus"},martialArt:{groupId:"martialArt"},kiTechnique:{groupId:"kiTechnique"},kiSealCreature:{groupId:"kiSealCreature"},armor:{groupId:"armor"},armorHelmet:{groupId:"armorHelmet"},weapon:{groupId:"weapon"},ammo:{groupId:"ammo"},inventory:{groupId:"inventory"},currency:{groupId:"currency"},class:{groupId:"class"}},f={acrobatic:{groupId:"abilAcro"},acrobatics:{groupId:"abilAcro"}};let y=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{y=class Utils{static getSetting(i,s=null){let a=s??null;try{a=game.settings.get(e.ID,i)}catch{t.api.Logger.debug(`Setting '${i}' not found`)}return a}static async setSetting(i,s){try{s=await game.settings.set(e.ID,i,s),t.api.Logger.debug(`Setting '${i}' set to '${s}'`)}catch{t.api.Logger.debug(`Setting '${i}' not found`)}}}}));let b=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{b=class ActionHandler extends t.api.ActionHandler{actors=null;actorId=null;actorType=null;tokenId=null;items=null;groupIds=null;activationGroupIds=null;effectGroupIds=null;inventoryGroupIds=null;spellGroupIds=null;featureActions=null;inventoryActions=null;spellActions=null;mapLabel=t.api.Utils.i18n("PF2E.MAPAbbreviationLabel").replace(" {penalty}","");async buildSystemActions(e){this.actors=this.actor?[this.actor]:this.#t(),this.actorType=this.actor?.type;if(!this.actorType||["character","familiar","hazard","npc"].includes(this.actorType)){if(this.actor){let e=this.actor.items;e=t.api.Utils.sortItemsByName(e),this.items=e}this.abbreviateSkills=y.getSetting("abbreviateSkills"),this.addAuxiliaryActions=y.getSetting("addAuxiliaryActions"),this.addDamageAndCritical=y.getSetting("addDamageAndCritical"),this.addStowedItems=y.getSetting("addStowedItems"),this.addUnequippedItems=y.getSetting("addUnequippedItems"),this.calculateAttackPenalty=y.getSetting("calculateAttackPenalty"),this.colorSkills=y.getSetting("colorSkills"),this.showStrikeImages=y.getSetting("showStrikeImages"),this.showStrikeNames=y.getSetting("showStrikeNames"),this.showStrikeTraits=y.getSetting("showStrikeTraits"),this.splitStrikes=y.getSetting("splitStrikes"),this.groupIds=e,"character"===this.actorType?await this.#e():"familiar"===this.actorType?await this.#i():"hazard"===this.actorType?await this.#s():"npc"===this.actorType?await this.#a():this.actor||this.#n()}}async#e(){await Promise.all([this.#o(),this.#l(),this.#c(),this.#r(),this.#d(),this.#m(),this.#p("heroPoints"),this.#p("mythicPoints"),this.#u(),this.#h(),this.#g(),this.#f(),this.#y(),this.#b(),this.#k(),this.#A(),this.#w(),this.#v(),this.#$()]),await this.#I()}async#i(){await Promise.all([this.#o(),this.#P(),this.#l(),this.#c(),this.#r(),this.#h(),this.#g(),this.#b(),this.#A()])}async#s(){await Promise.all([this.#o(),this.#l(),this.#u(),this.#b(),this.#v()])}async#a(){await Promise.all([this.#o(),this.#l(),this.#c(),this.#r(),this.#d(),this.#u(),this.#h(),this.#g(),this.#b(),this.#k(),this.#A(),this.#v(),this.#w(),this.#$()])}async#n(){await Promise.all([this.#u(),this.#g(),this.#b(),this.#k(),this.#A()])}async#o(){const e="action";if(0===this.items.size)return;const i=["action","reaction","free","passive"],s=new Map([...this.items].filter((([t,e])=>"action"===e.type||i.includes(e.system?.actionType?.value)))),a=new Map;for(const[t,e]of s){if(!0===e.suppressed)continue;const i=e.system.actionType?.value;switch(i){case"action":a.set("actions",a.get("actions")||new Map),a.get("actions").set(t,e);break;case"reaction":a.set("reactions",a.get("reactions")||new Map),a.get("reactions").set(t,e);break;case"free":a.set("free-actions",a.get("free-actions")||new Map),a.get("free-actions").set(t,e);break;case"passive":a.set("passives",a.get("passives")||new Map),a.get("passives").set(t,e)}}for(const[i,s]of a){if(!0===s.suppressed)continue;const a=s,n={id:i,type:"system"},o=await Promise.all([...a].map((async([i,s])=>{const a=this.#C(s),n=this.#S(s),o=this.#T(s,e),l=this.#F(s),c=[e,a].join(this.delimiter),r=this.#E(s,e),d=t.api.Utils.getImage(s),m=this.#U(s),p=await this.#N(s,e);return{id:a,name:n,encodedValue:c,cssClass:l,img:d,icon1:r,info:m,listName:o,tooltip:await this.#D(e,p)}})));this.addActions(o,n)}}#P(){const e="familiarAttack",i=this.actor.system.attack;if(i){const s=i.slug,a=t.api.Utils.i18n("PF2E.AttackLabel"),n=`${`${t.api.Utils.i18n(o[e])}: `??""}${a}`,l=[e,s].join(this.delimiter),c=t.api.Utils.getModifier(i?.totalModifier),r=[{id:s,name:a,listName:n,encodedValue:l,info1:this.actor?{text:c}:""}],d={id:"attack",type:"system"};this.addActions(r,d)}}#l(){const e="utility",i={endTurn:{id:"endTurn",name:t.api.Utils.i18n("tokenActionHud.endTurn")}};game.combat?.current?.tokenId!==this.token?.id&&delete i.endTurn;const s=Object.entries(i).map((i=>{const s=i[1].id,a=i[1].name,n=`${`${t.api.Utils.i18n(o[e])}: `??""}${a}`,l=[e,s].join(this.delimiter);return{id:s,name:a,listName:n,encodedValue:l}}));this.addActions(s,{id:"combat",type:"system"})}async#c(){const e="condition",i=["doomed","dying","wounded"],s=new Map([...this.items].filter((t=>t[1].type===e)).map((t=>{const e=t[1];return[e.slug,e]}))),a=[...game.pf2e.ConditionManager.conditions].filter((([t])=>!t.startsWith("Compendium"))).map((([t,e])=>(e.name=e.name.replace(" 1",""),[t,e]))),n=await Promise.all(a.map((async([a,n])=>{const l=n.slug,c=s.get(a),r=c?.id,d=n.name,m=`${`${t.api.Utils.i18n(o[e])}: `??""}${d}`,p=[e,l].join(this.delimiter),u=t.api.Utils.getImage(n),h=`toggle${r?" active":""}`;let g="",f="";if(r)if(i.includes(c.slug)){const t=this.actor.system.attributes[c.slug];f=t.value;const e=t.max;g={text:e>0?`${f??0}/${e}`:""}}else c.system.value.isValued&&(f=c.system.value.value,g={text:f});const y={name:`${d}${f?` ${f}`:""}`,description:n.description};return{id:l,name:d,listName:m,encodedValue:p,cssClass:h,img:u,info1:g,tooltip:await this.#D(e,y)}})));n.sort(((t,e)=>t.name.localeCompare(e.name)));const l=[];await this.addActions(n.reduce((function(t,e){return["Friendly","Helpful","Hostile","Indifferent","Malevolence","Unfriendly"].includes(e.name)?l.push(e):t.push(e),t}),[]),{id:"conditions",type:"system"});const c=[];await this.addActions(l.reduce((function(t,e){return["Friendly","Helpful","Hostile","Indifferent","Unfriendly"].includes(e.name)?t.push(e):c.push(e),t}),[]),{id:"social-conditions",type:"system"});await this.addActions(c,{id:"other-conditions",type:"system"})}async#p(e){let i,s;const a=!!this.actor.system.resources?.mythicPoints.max;if("heroPoints"!==e||a){if("mythicPoints"===e&&a){s={id:"mythic-points",type:"system"};const a=this.actor.system.resources?.mythicPoints,n=a.value,o=a.max;i=[{id:"mythicPoints",name:t.api.Utils.i18n("PF2E.Actor.Resource.MythicPoints"),encodedValue:[e,e].join(this.delimiter),info1:{text:o>0?`${n??0}/${o}`:""}}]}}else{s={id:"hero-points",type:"system"};const a=this.actor.system.resources?.heroPoints,n=a.value,o=a.max;i=[{id:"heroPoints",name:t.api.Utils.i18n("PF2E.Actor.Resource.HeroPoints"),encodedValue:[e,e].join(this.delimiter),info1:{text:o>0?`${n??0}/${o}`:""}}]}i&&s&&this.addActions(i,s)}async#r(){const e="effect",i=new Map([...this.items].filter((t=>"effect"===t[1].type&&(!t[1].system?.unidentified&&!t[1].unidentified||game.user.isGM)))),s=await Promise.all([...i].map((async([i,s])=>{const a=this.#C(s),n=this.#S(s),o=this.#T(s,e),l=this.#F(s),c=[e,a].join(this.delimiter),r=this.#E(s,e),d=t.api.Utils.getImage(s),m=this.#U(s),p={name:n,description:s.description};return{id:a,name:n,listName:o,encodedValue:c,cssClass:l,img:d,icon1:r,info:m,tooltip:await this.#D(e,p)}})));s.sort(((t,e)=>t.name.localeCompare(e.name))),this.addActions(s,{id:"effects",type:"system"})}async#d(){const e="feat",i={ancestryfeature:"ancestry-features",classfeature:"class-features",ancestry:"ancestry-feats",class:"class-feats",skill:"skill-feats",general:"general-feats",bonus:"bonus-feats"},s=new Map;for(const[t,e]of this.items){if("feat"!==e.type)continue;if(!0===e.suppressed)continue;const a=i[e.system?.category??e.featType];s.set(a,s.get(a)||new Map),s.get(a).set(t,e)}for(const[i,a]of s){const s=a,n={id:i,type:"system"},o=await Promise.all([...s].map((async([i,s])=>{const a=this.#C(s),n=this.#S(s),o=this.#T(s,e),l=this.#F(s),c=[e,a].join(this.delimiter),r=this.#E(s,e),d=t.api.Utils.getImage(s),m=this.#U(s),p=await this.#N(s,e);return{id:a,name:n,encodedValue:c,cssClass:l,img:d,icon1:r,info:m,listName:o,tooltip:await this.#D(e,p)}})));this.addActions(o,n)}}async#m(){if(!game.modules.get("pf2e-hero-actions")?.active)return;const e="heroAction",i=t.api.Utils.i18n(o[e]),s=this.actor.getFlag("pf2e-hero-actions","heroActions")??[],a=[],n=this.actor.heroPoints?.value,l=n-(s?.length??0);l>0&&a.push({id:"drawHeroActions",name:game.i18n.format("pf2e-hero-actions.templates.heroActions.draw",{nb:l}),listName:`${i}: ${game.i18n.localize("pf2e-hero-actions.templates.heroActions.draw").replace("({nb}) ","")}`,encodedValue:[e,"drawHeroActions"].join(this.delimiter)});const c=await Promise.all([...s].map((async s=>{const a=s?.uuid,n=s?.name,o=`${i}: ${n}`,l=[e,a].join(this.delimiter),c=t.api.Utils.getImage("systems/pf2e/icons/actions/Passive.webp"),r=s?.uuid?await fromUuid(s?.uuid):null,d={name:n,description:r?.text?.content??null};return{id:a,name:n,encodedValue:l,img:c,listName:o,tooltip:await this.#D(e,d)}})));a.push(...c),this.addActions(a,{id:"hero-actions",type:"system"})}async#u(){const e="initiative",i=this.actor?.system?.initiative?.statistic??null,s=[];if("hazard"!==this.actorType){const a=this.actor?this.actor.system.initiative:t.api.Utils.i18n("PF2E.PerceptionLabel"),n=t.api.Utils.i18n("PF2E.PerceptionLabel"),l=this.abbreviatedSkills?r.perception??n:n,c=`${`${t.api.Utils.i18n(o[e])}: `??""}${l}`,d=[e,"perception"].join(this.delimiter),m=`toggle${"perception"===i?" active":""}`,p=t.api.Utils.getModifier(a?.totalModifier),u=this.actor?{text:p}:"",h={name:`${n}${this.actor&&p?` ${p}`:""}`,modifiers:a?.modifiers},g=this.actor?await this.#D(e,h):null;s.push({id:"initiative-perception",name:l,listName:c,encodedValue:d,cssClass:m,info1:u,tooltip:g})}const a=this.actor?Object.entries(this.actor.skills).filter((([t,e])=>!!e.label&&e.label.length>1)):this.#H();if(!a)return;const n=[],l=[];for(const t of a)t[1].lore?l.push(t):n.push(t);n.sort(((t,e)=>t[1].label.localeCompare(e[1].label))),l.sort(((t,e)=>t[1].label.localeCompare(e[1].label)));const c=await Promise.all([...n,...l].map((async([s,a])=>{const n=`initiative-${s}`,l=a,c=t.api.Utils.i18n(l.label)??t.api.Utils.i18n(CONFIG.PF2E.skillList[s]),d=this.abbreviatedSkills?r[l.slug]??c:c,m=`${`${t.api.Utils.i18n(o[e])}: `??""}${d}`,p=[e,s].join(this.delimiter),u=`toggle${i===s?" active":""}`,h=t.api.Utils.getModifier(a.check?.mod),g=this.actor?{text:h}:"",f={name:`${c}${this.actor&&h?` ${h}`:""}`,modifiers:a?.modifiers};return{id:n,name:d,listName:m,encodedValue:p,cssClass:u,info1:g,tooltip:this.actor?await this.#D(e,f):null}})));s.push(...c);this.addActions(s,{id:"initiative",type:"system"})}async#h(){if(0===this.items.size)return;const e="item",i=new Map;for(const[t,e]of this.items){const s=e.system?.quantity>0,a=this.#j(e),n=this.#M("nonContainer",e),o=e.type;if(s&&n){const s=a?"equipped":"unequipped",n=i.get(s)??new Map;if(n.set(t,e),i.set(s,n),a){const s=i.get(o)??new Map;s.set(t,e),i.set(o,s)}}}for(const[s,a]of i){const i=g[s]?.groupId;if(!i)continue;const n={id:i,type:"system"},o=await Promise.all([...a].map((async([i,s])=>{const a=this.#C(s),n=this.#S(s),o=this.#T(s,e),l=this.#F(s),c=[e,a].join(this.delimiter),r=this.#E(s,e),d=this.#R(s),m=t.api.Utils.getImage(s),p=this.#U(s),u=await this.#N(s,e);return{id:a,name:n,encodedValue:c,cssClass:l,img:m,icon1:r,icon2:d,info:p,listName:o,tooltip:await this.#D(e,u)}})));this.addActions(o,n)}if(i.has("backpack")){const s={id:"containers",type:"system"},a=i.get("backpack");for(const[i,n]of a){const a=n.contents;if(!a.size)continue;const o={id:i,name:n.name,listName:`Group: ${n.name}`,type:"system-derived"};await this.addGroup(o,s);const l=new Map;for(const t of a){this.#M("container",t)&&l.set(t.id,t)}const c=await Promise.all([...l].map((async([i,s])=>{const a=this.#C(s),n=this.#S(s),o=this.#T(s,e),l=this.#F(s),c=[e,a].join(this.delimiter),r=this.#E(s,e),d=this.#R(s),m=t.api.Utils.getImage(s),p=this.#U(s),u=await this.#N(s,e);return{id:a,name:n,encodedValue:c,cssClass:l,img:m,icon1:r,icon2:d,info:p,listName:o,tooltip:await this.#D(e,u)}})));this.addActions(c,o)}}}async#g(){const e="perceptionCheck",i=this.actor?this.actor.system.perception:t.api.Utils.i18n("PF2E.PerceptionLabel"),s=t.api.Utils.i18n("PF2E.PerceptionLabel"),a=t.api.Utils.getModifier(i?.totalModifier),n=this.actor?{text:a}:"",o={name:`${s}${this.actor&&a?` ${a}`:""}`,modifiers:i?.modifiers},l=await this.#D(e,o),c=[{id:"perception",name:s,encodedValue:[e,"perception"].join(this.delimiter),info1:n,tooltip:l}];this.addActions(c,{id:"perception-check",type:"system"})}#f(){const e="recoveryCheck",i=this.actor?.system.attributes?.dying;if(i?.value>0){const i=[{id:e,name:t.api.Utils.i18n("PF2E.Check.Specific.Recovery"),encodedValue:[e,e].join(this.delimiter)}],s={id:"recovery-check",type:"system"};this.addActions(i,s)}}#y(){if(!this.actor&&!this.actors.every((t=>"character"===t.type)))return;const e="utility",i=[{id:"treatWounds",name:t.api.Utils.i18n("PF2E.Actions.TreatWounds.Label"),encodedValue:[e,"treatWounds"].join(this.delimiter)},{id:"rest",name:t.api.Utils.i18n("PF2E.Actor.Character.Rest.Label"),encodedValue:[e,"rest"].join(this.delimiter)}];game.settings.get("pf2e","staminaVariant")&&i.push({id:"takeBreather",name:t.api.Utils.i18n("tokenActionHud.pf2e.takeBreather"),encodedValue:[e,"takeBreather"].join(this.delimiter)});this.addActions(i,{id:"rests",type:"system"})}async#b(){const e="save",i=this.actor?Object.entries(this.actor.saves||[]):Object.entries(CONFIG.PF2E.saves);if(!i||0===i.length)return;const s=await Promise.all(i.map((async([i,s])=>{const a=s.label??("string"==typeof s?t.api.Utils.i18n(s):""),n=`${`${t.api.Utils.i18n(o[e])}: `??""}${a}`,l=[e,i].join(this.delimiter),c=t.api.Utils.getModifier(s.mod),r=this.actor?{text:c}:"",d={name:`${a}${this.actor&&c?` ${c}`:""}`,modifiers:s?.modifiers};return{id:i,name:a,listName:n,encodedValue:l,info1:r,tooltip:this.actor?await this.#D(e,d):null}})));this.addActions(s,{id:"saves",type:"system"})}async#k(){const e="compendiumMacro",i=await game.packs.get("pf2e.action-macros").getIndex();if(!i.size)return;const s=new Map,a=[];for(const n of i){const i=u[n._id];if(!i)continue;const l=n._id,c=t.api.Utils.i18n(i.name),r=`${c} - ${t.api.Utils.i18n(h[i.skill]?.name)}`,d=`${`${t.api.Utils.i18n(o.skillAction)}: `??""}${r}`,m=[e,"pf2e.action-macros",l].join(this.delimiter),p=this.#x(i.actionCost),g=i.image,f=t.api.Utils.getModifier(this.actor?.skills[i.skill]?.check?.mod),y={id:l,name:r,listName:d,encodedValue:m,icon1:p,img:g,info1:this.actor?{text:f}:null};a.push(y),s.set(i.skill,s.get(i.skill)||new Map),s.get(i.skill).set(n._id,{...y,name:c})}await this.addActions(a,{id:"skill-actions-ungrouped",type:"system"});for(const[e,i]of Object.entries(h)){const a=e,n=t.api.Utils.i18n(i.name),o=s.get(a);if(!o)continue;const l={id:a,name:n,type:"system-derived"};await this.addGroup(l,{id:"skill-actions-grouped",type:"system"});const c=[...o].map((([t,e])=>e));await this.addActions(c,l)}}async#A(){const e="skill",i=this.actor?Object.entries(this.actor.skills).filter((t=>!!t[1].label&&t[1].label.length>1)):this.#H();if(!i)return;const s=[],a=[];for(const t of i)t[1].lore?a.push(t):s.push(t);s.sort(((t,e)=>t[1].label.localeCompare(e[1].label))),a.sort(((t,e)=>t[1].label.localeCompare(e[1].label)));const n=new Map;n.set("skills",new Map),s.length>0&&n.set("core-skills",new Map),a.length>0&&n.set("lore-skills",new Map);for(const t of[...s,...a])t[1].lore?n.get("lore-skills").set(t[0],t[1]):n.get("core-skills").set(t[0],t[1]);for(const[i,s]of n){const a=s,n={id:i,type:"system"},l=await Promise.all([...a].map((async([i,s])=>{const a=i,n=t.api.Utils.i18n(s.label)??t.api.Utils.i18n(CONFIG.PF2E.skillList[i]),l=this.abbreviatedSkills?r[s.slug]??n:n,c=n,d=`${`${t.api.Utils.i18n(o[e])}: `??""}${l}`,m=[e,a].join(this.delimiter),p=this.actor&&this.colorSkills&&s.rank>0?`tah-pf2e-skill-rank-${s.rank}`:"",u=t.api.Utils.getModifier(s.check?.mod),h=this.actor?{text:u}:"",g={name:`${c}${this.actor&&u?` ${u}`:""}`,modifiers:s?.modifiers};return{id:a,name:l,fullName:c,listName:d,encodedValue:m,cssClass:p,info1:h,tooltip:this.actor?await this.#D(e,g):null}})));this.addActions(l,n)}}#H(){if(!this.actors)return;const t=this.actors.map((t=>Object.entries(t.skills).filter((t=>!!t[1].label&&t[1].label.length>1)))),e=Math.min(...t.map((t=>t.length)));return t.find((t=>t.length===e)).filter((e=>t.every((t=>t.some((t=>t[0]===e[0]))))))}async#w(){const e="spell",i={id:"spells",type:"system"},s=[...this.items].filter((t=>"spellcastingEntry"===t[1].type));for(const a of s){const s=`spells+${a[1].name.slugify({replacement:"-",strict:!0})}`,n={id:s,name:a[1].name,type:"system-derived",info1:this.#L(a[1])};await this.addGroup(n,i),this.addGroupInfo(n);const o=await a[1].getSheetData(),l=o.groups.filter((t=>t.active.length>0));for(const i of Object.entries(l)){const a=i[1].id,l={id:`${s}+${a}`,name:String(t.api.Utils.i18n(i[1].label)),type:"system-derived"};await this.addGroup(l,n),await this.#V(n,l,i,o);const c=i[1].active.filter((t=>t&&!t.expended)).map((t=>t.spell)),r=new Map(c.map((t=>[t.id,t]))),d=await Promise.all([...r].map((async([i,s])=>{const n=this.#C(s,e,a),o=this.#S(s),l=this.#T(s,e),c=this.#F(s),r=this.#G(s,e,a),d=this.#E(s,e),m=t.api.Utils.getImage(s),p=await this.#N(s,e,a);return{id:n,name:o,listName:l,encodedValue:r,cssClass:c,img:m,icon1:d,tooltip:await this.#D(e,p)}})));this.addActions(d,l)}}}async#V(e,i,s,a){const n="cantrips"===s[1].id,l=a.isFlexible,c=a.isFocusPool,r=a.isInnate,d=a.isPrepared;if(!c&&(n||r))return;if(!c&&d&&!l)return;const m="spellSlot",p=this.actor.system.resources.focus,u=s[1].uses,h=c?"focus":`slot${s[1].id}`,g="focus"===h?p?.max:u?.max,f={text:g>=0?`${("focus"===h?p?.value:u?.value)??0}/${g}`:""};i.info={info1:f},this.addGroupInfo(i);const y=t.api.Utils.i18n(o.spell),b=[{id:`${a.id}>${h}>slotIncrease`,name:"+",listName:`${y}: ${e.name}: ${i.name}: +`,encodedValue:[m,`${a.id}>${h}>slotIncrease`].join(this.delimiter),cssClass:"shrink"},{id:`${a.id}>${h}>slotDecrease`,name:"-",listName:`${y}: ${e.name}: ${i.name}: -`,encodedValue:[m,`${a.id}>${h}>slotDecrease`].join(this.delimiter),cssClass:"shrink"}];this.addActions(b,i)}async#I(){const e="elementalBlast",i=new game.pf2e.ElementalBlast(this.actor)?.configs;if(!i.length)return;const s={id:"strikes",type:"system"};for(const a of i){let i=[],n=null;const l=[],c=`strikes+${`${a.item.id}-${a.element}`}`,r=(()=>{let e=t.api.Utils.i18n(a.label);if(this.showStrikeTraits&&this.showStrikeNames){const t=a.item.system.traits.value;if(t.length>0){e+=" - ";for(const i of t)e+="["+i+"]"}}return e})(),p=`${t.api.Utils.i18n(o.strike)}: ${r} (${a.item.id})`,u=a.img??a.item?.img,h=this.showStrikeNames,g=await this.#N(a,e),f=await this.#D(e,g);n={id:c,name:r,listName:p,type:"system-derived",settings:{showTitle:h},tooltip:f},this.showStrikeImages&&(n.settings.image=u),this.addGroup(n,s),a.damageTypes.length>1&&(i=a.damageTypes.map(((t,e)=>{const i=encodeURIComponent(`${a.item.id}>${a.element}>${t.value}>`),s=t.label;return{id:i,name:"",fullName:s,listName:`${p}: ${s}`,encodedValue:["elementalBlastDamageType",i].join(this.delimiter),cssClass:this.#F(t),icon1:this.#x(t.icon,s)}})));const y=Object.entries(a.maps)??[];for(const[i,s]of y){const n=i,o=`${c}+${i}`,r="melee"!==n&&a.range.max>0&&a.range.label.length>0?a.range.label:t.api.Utils.i18n(m[i].name),u=`${p}: ${r}`,h=y.length>1?"melee"===n?d.melee:d.thrown:"",g=!(h||y.length<=1),f={id:o,name:r,listName:u,type:"system-derived",settings:{showTitle:g,image:h}},b=Object.values(s).map(((i,s)=>{const o=encodeURIComponent(`${a.item.id}>${a.element}>${s}>`+n);let l;l=`${i}`.includes(this.mapLabel)?`${i}`.split(" ")[0]:`${i}`.replace(t.api.Utils.i18n("PF2E.WeaponStrikeLabel"),"").replace(" ","");const c=this.calculateAttackPenalty?l:i;return{id:o,name:c,encodedValue:[e,o].join(this.delimiter),listName:`${u}: ${c}`}})),k=encodeURIComponent(`${a.item.id}>${a.element}>damage>${n}`),A=t.api.Utils.i18n("PF2E.DamageLabel");b.push({id:k,name:A,listName:`${u}: ${A}`,encodedValue:[e,k].join(this.delimiter),systemSelected:this.addDamageAndCritical});const w=encodeURIComponent(`${a.item.id}>${a.element}>critical>${n}`),v=t.api.Utils.i18n("PF2E.CriticalDamageLabel");b.push({id:w,name:v,listName:`${u}: ${v}`,encodedValue:[e,w].join(this.delimiter),systemSelected:this.addDamageAndCritical}),l.push({actions:b,usageGroupData:f})}if(this.splitStrikes){this.addActions(i,n);for(const t of l)this.addGroup(t.usageGroupData,n),this.addActions(t.actions,t.usageGroupData)}else{this.addActions([...l[0]?.actions||[],...i],n),l.shift();for(const t of l)this.addGroup(t.usageGroupData,n),this.addActions(t.actions,t.usageGroupData)}}}async#v(){const e="strike",i={id:"strikes",type:"system"},s=this.actor.system.actions.filter((t=>t.type===e&&(t.item.system.quantity>0||"hazard"===this.actor.type||"npc"===this.actor.type)));if(s)for(const a of s){let s=[],n=[],l=null;const r=[],p=`strikes+${`${a.item.id}-${a.slug}`}`,u=(()=>{let t=a.label;if(this.showStrikeTraits&&this.showStrikeNames){let e;if(e="character"===this.actor.type?a.weaponTraits:a.traits,e.length>0){t+=" - ";for(const i of e)t+="["+i.label+"]"}}return t})(),h=`${t.api.Utils.i18n(o[e])}: ${a.label} (${a.item.id})`,g=a.imageUrl??a.item?.img,f=this.showStrikeNames,y=await this.#N(a,e),b=await this.#D(e,y);if(l={id:p,name:u,listName:h,type:"system-derived",settings:{showTitle:f},tooltip:b},this.showStrikeImages&&(l.settings.image=g),void 0===l.settings.sort&&t.api.Utils.getSetting("sortActions")&&(l.settings.sort=!1),this.addGroup(l,i),a.auxiliaryActions?.length&&this.addAuxiliaryActions&&(s=a.auxiliaryActions.flatMap(((e,i)=>{if("Modular"===e.purpose){const s=a.item.system.traits.toggles.modular.options,n=a.item.system.traits.toggles.modular.selection;return s.map((s=>{const o=encodeURIComponent(`${a.item.id}>${a.slug}>${i}>${s}`),l=t.api.Utils.i18n(c[s]);return{id:o,name:l,listName:`${h}: ${l}`,encodedValue:["strikeAuxiliaryAction",o].join(this.delimiter),cssClass:this.#F({selected:s===n}),icon1:this.#x(e.glyph)}}))}{const t=encodeURIComponent(`${a.item.id}>${a.slug}>${i}>`),s=e.label;return{id:t,name:s,listName:`${h}: ${s}`,encodedValue:["strikeAuxiliaryAction",t].join(this.delimiter),icon1:this.#x(e.glyph),info:this.#U(e)}}}))),a.ready){a.versatileOptions?.length&&(n=a.versatileOptions.map((e=>{const i=encodeURIComponent(`${a.item.id}>${a.slug}>${e.value}>`),s=t.api.Utils.i18n(e.label);return{id:i,name:"",fullName:s,listName:`${h}: ${s}`,encodedValue:["versatileOption",i].join(this.delimiter),cssClass:this.#F(e),icon1:this.#x(e.glyph,s)}})));const i=a.altUsages?[a,...a.altUsages]:[a];for(const s of i){const n=a.glyph;let o;switch(`${s.item.isMelee}_${s.item.isThrown}_${s.item.isRanged}`){case"true_false_false":o="melee";break;case"false_true_true":o="thrown";break;case"false_false_true":o="ranged"}const l=`${p}+${o}`,c=s.attackRollType?t.api.Utils.i18n(s.attackRollType):t.api.Utils.i18n(m[o].name),u=`${h}: ${c}`,g="thrown"!==o&&n?`<span style='font-family: "Pathfinder2eActions"; font-size: var(--font-size-20);'>${n}</span>`:d[o],f=i.length>1?d[o]:"",y=!(f||i.length<=1),b={id:l,name:c,listName:u,icon:g,type:"system-derived",settings:{showTitle:y,image:f}};void 0===b.settings.sort&&t.api.Utils.getSetting("sortActions")&&(b.settings.sort=!1);const k=s.variants.map(((i,s)=>{const n=encodeURIComponent(`${a.item.id}>${a.slug}>${s}>`+o),l=i.label.includes(this.mapLabel)?i.label.split(" ")[0]:i.label.replace(t.api.Utils.i18n("PF2E.WeaponStrikeLabel"),"").replace(" ",""),c=this.calculateAttackPenalty?l:i.label;return{id:n,name:c,encodedValue:[e,n].join(this.delimiter),listName:`${u}: ${c}`}})),A=encodeURIComponent(`${a.item.id}>${a.slug}>damage>${o}`),w=t.api.Utils.i18n("PF2E.DamageLabel");k.push({id:A,name:w,listName:`${u}: ${w}`,encodedValue:[e,A].join(this.delimiter),systemSelected:this.addDamageAndCritical});const v=encodeURIComponent(`${a.item.id}>${a.slug}>critical>${o}`),$=t.api.Utils.i18n("PF2E.CriticalDamageLabel");if(k.push({id:v,name:$,listName:`${u}: ${$}`,encodedValue:[e,v].join(this.delimiter),systemSelected:this.addDamageAndCritical}),s.selectedAmmoId&&!s.ammunition){const i=this.actor.items.get(s.selectedAmmoId);if(i){const t=this.#C(i),s=this.#S(i);k.push({id:t,name:s,listName:`${u}: ${s}`,encodedValue:[e,t].join(this.delimiter)})}else{const e="noAmmo",i=t.api.Utils.i18n("tokenActionHud.pf2e.noAmmo");k.push({id:e,name:i,listName:`${u}: ${i}`,encodedValue:e})}}r.push({actions:k,usageGroupData:b})}}if(this.splitStrikes){this.addActions([...n,...s],l);for(const t of r)this.addGroup(t.usageGroupData,l),this.addActions(t.actions,t.usageGroupData)}else{this.addActions([...r[0]?.actions||[],...n,...s],l),r.shift();for(const t of r)this.addGroup(t.usageGroupData,l),this.addActions(t.actions,t.usageGroupData)}}}#$(){const e="toggle",i=Object.values(this.actor.synthetics.toggles).flatMap((t=>Object.values(t)));if(!i.length)return;const s=i.filter((t=>0===t.suboptions.length)),a=i.filter((t=>0!==t.suboptions.length)),n={id:"toggles",type:"system"},l=s.map((i=>{const s=encodeURIComponent(`${i.domain}>${i.option}>${i.itemId}>>`),a=t.api.Utils.i18n(i.label),n=[e,s].join(this.delimiter);return{id:s,encodedValue:n,name:a,cssClass:`toggle${i.checked?" active":""}`}}));this.addActions(l,n);for(const e of a){const i=[e.domain,e.option].join("."),s=t.api.Utils.i18n(e.label),a=`${o.toggle}: ${s}`,l={id:i,name:s,listName:a,type:"system-derived"};this.addGroup(l,n);const c=e.suboptions.map((i=>{const s=encodeURIComponent(`${e.domain}>${e.option}>${e.itemId}>${i.value}`),n=t.api.Utils.i18n(i.label),o=i.selected&&e.enabled&&e.checked;return{id:s,name:n,listName:`${a}: ${n}`,encodedValue:["toggle",s].join(this.delimiter),cssClass:this.#F({selected:o})}}));this.addActions(c,l)}}#C(t,e,i){return"spell"===e?`${t.id??t._id}-${i}`:t.id??t._id}#S(t){return t?.name??t?.label??""}#T(e,i){const s=this.#S(e),a=`${t.api.Utils.i18n(o[i])}: `??"";return e.listName??`${a}${s}`}#F(t){if(Object.hasOwn(t,"disabled")){return`toggle${t.disabled?"":" active"}`}if(Object.hasOwn(t,"selected")){return`toggle${t.selected?" active":""}`}}#G(t,e,i){const s=t?.spellcasting?.id;return[e,"spell"===e?`${s}>${i}>${t.id??t._id}`:this.#C(t,e,i)].join(this.delimiter)}#E(t,e){const i=t.system?.actions,s=t.system?.actionType?.value,a=i?parseInt((i||{}).value,10):null,n=t.system?.time?.value,o=t.actionIcon,l="spell"===e?n:["free","reaction","passive"].includes(s)?s:a??o,c=this.#S(t);return this.#x(l,c)}#L(e){const i=e.statistic,s="function"==typeof i.dc?i.dc().value:i.dc.value,a=i.check.mod;return`${a>=0?`${t.api.Utils.i18n("tokenActionHud.pf2e.atk")} +${a}`:`${t.api.Utils.i18n("tokenActionHud.pf2e.atk")} ${a}`} ${`${t.api.Utils.i18n("tokenActionHud.pf2e.dc")}${s}`}`}#t(){const t=["character","npc"],e=canvas.tokens.controlled.map((t=>t.actor));if(e.every((e=>t.includes(e.type))))return e}#j(t){const e=t.system.equipped?.carryType;return!!this.addUnequippedItems||!(!["held","worn"].includes(e)||t.system.containerId?.value?.length)}#M(t,e){return"stowed"!==e.system.equipped?.carryType||this.#z(t,e)}#z(t,e){return"stowed"!==e.system.equipped?.carryType||("both"===this.addStowedItems||("container"===t&&"containers"===this.addStowedItems||"nonContainer"===t&&"nonContainers"===this.addStowedItems))}#U(t){return{info1:{text:this.#_(t)??""}}}#_(t){const e=t?.system?.quantity?.value;return e>1?e:""}#x(t,e=""){return a[t]?`<i class="${n[t]}" data-tooltip="${e}"></i>`:n[t]}#R(e){let i="";if("held"===e?.carryType)i=2===e?.handsHeld?"held2":"held1";else i=e?.carryType;const s=t.api.Utils.i18n(l[i]?.tooltip)??"";return l[i]?.icon.replace("placeholder",s)??""}async#N(t,e,i=null){if("none"===this.tooltipsSetting||!t)return"";if("nameOnly"===this.tooltipsSetting)return t.name??"";let s;if(s=["elementalBlast","strike"].includes(e)?await t.item.getChatData():await t.getChatData(),!s)return"";switch(e){case"item":return{name:t.name,description:s.description?.value,rarity:s.rarity,traits:s.traits,traits2:s.properties};case"spell":return{name:t.name,description:s.description?.value,properties:s.properties,rarity:s.rarity,traits:s.traits,traitsAlt:s.spellTraits};case"strike":return{name:t.label,descriptionLocalised:this.#O(t),modifiers:t.modifiers,properties:s.properties?.filter((t=>"PF2E.WeaponTypeMartial"!==t)),traits:t.traits,traitsAlt:t.weaponTraits};default:return{name:"elementalBlast"===e?t.item.name:t.name,description:s.description?.value,properties:s.properties,rarity:s.rarity,traits:s.traits}}}async#D(e,i){if("none"===this.tooltipsSetting)return"";const s=t.api.Utils.i18n(i.name);if("nameOnly"===this.tooltipsSetting)return s;if("string"==typeof i)return i;const a=`<h3>${s}</h3>`,n=t.api.Utils.i18n(i?.description??i?.descriptionLocalised??""),o=i?.rarity?`<span class="tag ${i.rarity.name}">${t.api.Utils.i18n(i.rarity.label)}</span>`:"",l=i?.properties?`<div class="tah-properties">${i.properties.map((e=>`<span class="tah-property">${t.api.Utils.i18n(e)}</span>`)).join("")}</div>`:"",c=i?.traits?i.traits.map((e=>`<span class="tag">${t.api.Utils.i18n(e.label)}</span>`)).join(""):"",r=i?.traits2?i.traits2.map((e=>`<span class="tag tag_secondary">${t.api.Utils.i18n(e.label??e)}</span>`)).join(""):"",d=i?.traitsAlt?i.traitsAlt.map((e=>`<span class="tag tag_alt">${t.api.Utils.i18n(e.label)}</span>`)).join(""):"",m=i?.modifiers?`<div class="tags">${i.modifiers.filter((t=>t.enabled)).map((e=>`<span class="tag tag_transparent">${t.api.Utils.i18n(e.label)} ${`${e.modifier>=0?"+":""}${e.modifier??""}`}</span>`)).join("")}</div>`:"",p=[o,c,r,d].join(""),u=p?`<div class="tags">${p}</div>`:"";if(!n&&!u&&!m)return s;const h=`<div>${a}${u||m?`<div class="tah-tags-wrapper">${u}${m}</div>`:""}${n}${l}</div>`;return await TextEditor.enrichHTML(h,{async:!0})}#O(e){return`${e?.description?`<p>${t.api.Utils.i18n(e?.description)}</p>`:""}${e?.criticalSuccess?`<hr><h4>${t.api.Utils.i18n("PF2E.Check.Result.Degree.Check.criticalSuccess")}</h4><p>${t.api.Utils.i18n(e?.criticalSuccess)}</p>`:""}${e?.success?`<h4>${t.api.Utils.i18n("PF2E.Check.Result.Degree.Check.success")}</h4><p>${t.api.Utils.i18n(e?.success)}</p>`:""}`}}}));let k=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{const e=p;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const i=Object.values(e);k={layout:[{nestId:"attack",id:"attack",name:t.api.Utils.i18n("abfalter.attack"),groups:[{...e.attack,nestId:"attack_attack"}]},{nestId:"strikes",id:"strikes",name:"strikes",groups:[{...e.toggles,nestId:"strikes_toggles"},{...e.strikes,nestId:"strikes_strikes"}],settings:{customWidth:500}},{nestId:"inventory",id:"inventory",name:t.api.Utils.i18n("abfalter.inventory"),groups:[{...e.weapons,nestId:"inventory_weapons"},{...e.shields,nestId:"inventory_shields"},{...e.armor,nestId:"inventory_armor"},{...e.equipment,nestId:"inventory_equipment"},{...e.consumables,nestId:"inventory_consumables"},{...e.containers,nestId:"inventory_containers"},{...e.treasure,nestId:"inventory_treasure"}]},{nestId:"spells",id:"spells",name:t.api.Utils.i18n("PF2E.Item.Spell.Plural"),groups:[{...e.spells,nestId:"spells_spells"}]},{nestId:"attributes",id:"attributes",name:t.api.Utils.i18n("tokenActionHud.pf2e.attributes"),groups:[{...e.heroPoints,nestId:"attributes_hero-points"},{...e.mythicPoints,nestId:"attributes_mythic-points"},{...e.initiative,nestId:"attributes_initiative"},{...e.perceptionCheck,nestId:"attributes_perception-check"},{...e.saves,nestId:"attributes_saves"}]},{nestId:"abilities",id:"abilities",name:t.api.Utils.i18n("abfalter.ability"),groups:[{...e.coreSkills,nestId:"abilities_core-skills"},{...e.loreSkills,nestId:"abilities_lore-skills"}]},{nestId:"effects",id:"effects",name:t.api.Utils.i18n("abfalter.effects"),groups:[{...e.conditions,nestId:"effects_conditions"},{...e.socialConditions,nestId:"effects_social-conditions"},{...e.otherConditions,nestId:"effects_other-conditions"},{...e.effects,nestId:"effects_effects"}]},{nestId:"utility",id:"utility",name:t.api.Utils.i18n("tokenActionHud.utility"),groups:[{...e.combat,nestId:"utility_combat"},{...e.token,nestId:"utility_token"},{...e.recoveryCheck,nestId:"utility_recovery-check"},{...e.rests,nestId:"utility_rests"},{...e.utility,nestId:"utility_utility"}]}],groups:i}}));let A=null;function register(t){}Hooks.once("tokenActionHudCoreApiReady",(async t=>{A=class RollHandler extends t.api.RollHandler{async handleActionClick(t,e){const[i,s]=e.split("|");if(["item"].includes(i)&&this.isRenderItem())return this.doRenderItem(this.actor,s);const a=["character"];if(this.actor)return void await this.#q(t,this.actor,this.token,i,s);const n=canvas.tokens.controlled.filter((t=>a.includes(t.actor?.type)));for(const e of n){const a=e.actor;await this.#q(t,a,e,i,s)}}async handleActionHover(t,e){}async handleGroupClick(t,e){}async#q(t,e,i,s,a){switch(s){case"item":this.#W(t,e,a);break;case"utility":this.#B(i,a)}}#W(t,e,i){e.items.get(i).toChat(t)}async#B(t,e){if("endTurn"===e)game.combat?.current?.tokenId===t.id&&await(game.combat?.nextTurn())}}}));let w=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{w=class SystemManager extends t.api.SystemManager{getActionHandler(){return console.log("DEV: returns actionhandler"),new b}getAvailableRollHandlers(){return{core:"Core abfalter"}}getRollHandler(t){let e;return e=new A,e}async registerDefaults(){return k}registerSettings(t){}registerStyles(){return{template:{class:"tah-abflater-template-style",file:"tah-abfalter-style",moduleId:e.ID,name:"Abfalter Template Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{console.log(`${t}init start`);const i=game.modules.get(e.ID);console.log(game.modules),i.api={requiredCoreModuleVersion:"2.0",SystemManager:w},Hooks.call("tokenActionHudSystemReady",i)}));export{f as ABILITY_TYPE,n as ACTION_ICON,o as ACTION_TYPE,b as ActionHandler,l as CARRY_TYPE_ICON,i as CORE_MODULE,a as DAMAGE_TYPE_ICONS,k as DEFAULTS,p as GROUP,g as ITEM_TYPE,t as LOG_PREFIX,c as MODULAR_OPTION,e as MODULE,s as REQUIRED_CORE_MODULE_VERSION,A as RollHandler,h as SKILL,r as SKILL_ABBREVIATION,u as SKILL_ACTION,d as STRIKE_ICON,m as STRIKE_USAGE,w as SystemManager,y as Utils,register};
//# sourceMappingURL=token-action-hud-abfalter.min.js.map
