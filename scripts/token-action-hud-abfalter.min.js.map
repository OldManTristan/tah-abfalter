{"version":3,"file":"token-action-hud-abfalter.min.js","sources":["constants.js","utils.js","action-handler.js","defaults.js","roll-handler.js","settings.js","system-manager.js","init.js"],"sourcesContent":["export const LOG_PREFIX = 'TAH-abfalter | '\n\n/**\n * Module-based constants\n */\nexport const MODULE = {\n    ID: 'tah-abfalter'\n}\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n    ID: 'token-action-hud-core'\n}\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '2.0' //update this when new Core functions are needed\n\n/**\n * Damage type icons\n */\nexport const DAMAGE_TYPE_ICONS = {\n    axe: 'fa-solid fa-axe fa-fw',\n    brain: 'fa-solid fa-brain fa-fw',\n    bolt: 'fa-solid fa-bolt fa-fw',\n    'bow-arrow': 'fa-solid fa-bow-arrow fa-fw',\n    droplet: 'fa-solid fa-droplet fa-fw',\n    fire: 'fa-solid fa-fire fa-fw',\n    ghost: 'fa-solid fa-ghost fa-fw',\n    hammer: 'fa-solid fa-hammer fa-fw',\n    skull: 'fa-solid fa-skull fa-fw',\n    snowflake: 'fa-solid fa-snowflake fa-fw',\n    spider: 'fa-solid fa-spider fa-fw',\n    sun: 'fa-solid fa-sun fa-fw',\n    vial: 'fa-solid fa-vial fa-fw',\n    'waveform-lines': 'fa-solid fa-waveform-lines fa-fw'\n}\n\n/**\n * Action icons\n */\nexport const ACTION_ICON = {\n    1: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>A</span>',\n    2: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>D</span>',\n    3: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>T</span>',\n    free: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>F</span>',\n    reaction: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>R</span>',\n    passive: '',\n    A: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>A</span>',\n    D: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>D</span>',\n    T: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>T</span>',\n    F: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>F</span>',\n    R: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>R</span>',\n    ...DAMAGE_TYPE_ICONS\n}\n\n/**\n * Action type\n */\nexport const ACTION_TYPE = {\n    //action: 'TYPES.Item.action',\n    attribute: 'attribute',\n    condition: 'TYPES.Item.condition',\n    effect: 'TYPES.Item.effect',\n    //familiarAttack: 'PF2E.AttackLabel',\n    //feat: 'PF2E.Item.Feat.LevelLabel',\n    //heroAction: 'tokenActionHud.pf2e.heroAction',\n    initiative: 'abfalter.initiative',\n    item: 'PF2E.ItemTitle',\n    save: 'abfalter.resistances',\n    ability: 'abfalter.ability',\n    //skillAction: 'tokenActionHud.pf2e.skillAction',\n    spell: 'TYPES.Item.spell',\n    strike: 'strikes',\n    strikeAuxiliaryAction: 'strikesAux',\n    toggle: 'toggle',\n    utility: 'tokenActionHud.utility'\n}\n\n/**\n * Carry types icons\n */\nexport const CARRY_TYPE_ICON = {\n    held1: {\n        icon: '<span class=\"fa-stack fa-fw fa-2xs\" data-tooltip=\"placeholder\"><i class=\"fa-solid fa-hand-back-fist fa-stack-2x\"></i><i class=\"fab fa-1 fa-stack-1x\" style=\"filter: invert(1);\"></i></span>',\n        tooltip: 'PF2E.CarryType.held1'\n    },\n    held2: {\n        icon: '<span class=\"fa-stack fa-fw fa-2xs\" data-tooltip=\"placeholder\"><i class=\"fa-solid fa-hand-back-fist fa-stack-2x\"></i><i class=\"fab fa-2 fa-stack-1x\" style=\"filter: invert(1);\"></i></span>',\n        tooltip: 'PF2E.CarryType.held2'\n    },\n    dropped: {\n        icon: '<i class=\"fas fa-grip-lines fa-fw\" data-tooltip=\"placeholder\"></i>',\n        tooltip: 'PF2E.CarryType.dropped'\n    },\n    stowed: {\n        icon: '<i class=\"fas fa-box fa-fw\" data-tooltip=\"placeholder\"></i>',\n        tooltip: 'PF2E.CarryType.stowed'\n    },\n    worn: {\n        icon: '<i class=\"fas fa-tshirt fa-fw\" data-tooltip=\"placeholder\"></i>',\n        tooltip: 'PF2E.CarryType.worn'\n    }\n}\n\n/**\n * Modular options\n */\nexport const MODULAR_OPTION = {\n    bludgeoning: 'PF2E.TraitBludgeoning',\n    piercing: 'PF2E.TraitPiercing',\n    slashing: 'PF2E.TraitSlashing'\n}\n\n/**\n * Skill abbreviations\n */\nexport const SKILL_ABBREVIATION = {\n    acrobatics: 'acr',\n    arcana: 'arc',\n    athletics: 'ath',\n    crafting: 'cra',\n    deception: 'dec',\n    diplomacy: 'dip',\n    intimidation: 'itm',\n    medicine: 'med',\n    nature: 'nat',\n    occultism: 'occ',\n    performance: 'prf',\n    perception: 'per',\n    religion: 'rel',\n    society: 'soc',\n    stealth: 'ste',\n    survival: 'sur',\n    thievery: 'thi'\n}\n\n/**\n * Strike icons\n */\nexport const STRIKE_ICON = {\n    melee: 'systems/pf2e/icons/mdi/sword.svg',\n    thrown: 'systems/pf2e/icons/mdi/thrown.svg'\n}\n\n/**\n * Strike usage\n */\nexport const STRIKE_USAGE = {\n    melee: { name: 'PF2E.WeaponRangeMelee' },\n    ranged: { name: 'PF2E.NPCAttackRanged' },\n    thrown: { name: 'PF2E.TraitThrown' }\n}\n\n/**\n * Groups\n */\nexport const GROUP = {\n    attack: { id: 'attack', name: 'PF2E.AttackLabel', type: 'system' },\n    toggles: { id: 'toggles', name: 'PF2E.TogglesLabel', type: 'system' },\n    strikes: { id: 'strikes', name: 'PF2E.StrikesLabel', type: 'system' },\n    //actions: { id: 'actions', name: 'PF2E.ActionsActionsHeader', type: 'system' },\n    //reactions: { id: 'reactions', name: 'PF2E.ActionsReactionsHeader', type: 'system' },\n    //freeActions: { id: 'free-actions', name: 'PF2E.ActionsFreeActionsHeader', type: 'system' },\n    //passives: { id: 'passives', name: 'PF2E.NPC.PassivesLabel', type: 'system' },\n    //skillActionsGrouped: { id: 'skill-actions-grouped', name: 'tokenActionHud.pf2e.skillActions', listName: 'tokenActionHud.pf2e.skillActionsGrouped', type: 'system' },\n    //skillActionsUngrouped: { id: 'skill-actions-ungrouped', name: 'tokenActionHud.pf2e.skillActions', listName: 'tokenActionHud.pf2e.skillActionsUngrouped', type: 'system', settings: { sort: true } },\n    weapons: { id: 'weapons', name: 'tokenActionHud.pf2e.weapons', type: 'system' },\n    shields: { id: 'shields', name: 'tokenActionHud.pf2e.shields', type: 'system' },\n    armor: { id: 'armor', name: 'tokenActionHud.pf2e.armor', type: 'system' },\n    equipment: { id: 'equipment', name: 'tokenActionHud.pf2e.equipment', type: 'system' },\n    consumables: { id: 'consumables', name: 'tokenActionHud.pf2e.consumables', type: 'system' },\n    containers: { id: 'containers', name: 'tokenActionHud.pf2e.containers', type: 'system' },\n    treasure: { id: 'treasure', name: 'tokenActionHud.pf2e.treasure', type: 'system' },\n    ancestryFeatures: { id: 'ancestry-features', name: 'PF2E.Actor.Character.FeatSlot.AncestryFeaturesHeader', type: 'system' },\n    classFeatures: { id: 'class-features', name: 'PF2E.Actor.Character.FeatSlot.ClassFeaturesHeader', type: 'system' },\n    ancestryFeats: { id: 'ancestry-feats', name: 'PF2E.Actor.Character.FeatSlot.AncestryHeader', type: 'system' },\n    //classFeats: { id: 'class-feats', name: 'PF2E.Actor.Character.FeatSlot.ClassHeader', type: 'system' },\n    //skillFeats: { id: 'skill-feats', name: 'PF2E.Actor.Character.FeatSlot.SkillHeader', type: 'system' },\n    //generalFeats: { id: 'general-feats', name: 'PF2E.Actor.Character.FeatSlot.GeneralHeader', type: 'system' },\n    //bonusFeats: { id: 'bonus-feats', name: 'PF2E.Actor.Character.FeatSlot.BonusHeader', type: 'system' },\n    spells: { id: 'spells', name: 'PF2E.Item.Spell.Plural', type: 'system' },\n    //heroPoints: { id: 'hero-points', name: 'PF2E.Actor.Resource.HeroPoints', type: 'system' },\n    //mythicPoints: { id: 'mythic-points', name: 'PF2E.Actor.Resource.MythicPoints', type: 'system' },\n    initiative: { id: 'initiative', name: 'PF2E.InitiativeLabel', type: 'system' },\n    perceptionCheck: { id: 'perception-check', name: 'PF2E.PerceptionLabel', type: 'system' },\n    coreSkills: { id: 'core-skills', name: 'PF2E.CoreSkillsHeader', type: 'system' },\n    loreSkills: { id: 'lore-skills', name: 'PF2E.LoreSkillsHeader', type: 'system' },\n    //conditions: { id: 'conditions', name: 'PF2E.ConditionsLabel', type: 'system' },\n    //socialConditions: { id: 'social-conditions', name: 'tokenActionHud.pf2e.socialConditions', type: 'system' },\n    //otherConditions: { id: 'other-conditions', name: 'tokenActionHud.pf2e.otherConditions', type: 'system' },\n    effects: { id: 'effects', name: 'PF2E.EffectsLabel', type: 'system' },\n    combat: { id: 'combat', name: 'tokenActionHud.combat', type: 'system' },\n    token: { id: 'token', name: 'tokenActionHud.token', type: 'system' },\n    recoveryCheck: { id: 'recovery-check', name: 'PF2E.Check.Specific.Recovery', type: 'system' },\n    rests: { id: 'rests', name: 'tokenActionHud.pf2e.rests', type: 'system' },\n    saves: { id: 'saves', name: 'PF2E.SavesHeader', type: 'system' },\n    utility: { id: 'utility', name: 'tokenActionHud.utility', type: 'system' },\n    abilities: { id:'abilities', name: 'tokenActionHud.abfalter.abilities', type: 'system'},\n    'fav-abilities': { id:'fav_abilities', name: 'tokenActionHud.abfalter.abilities', type: 'system'},\n}\n\n/**\n * Skill actions\n */\nexport const SKILL_ACTION = {\n    l5pbgrj8SSNtRGs8: { name: 'PF2E.Actions.AdministerFirstAid.Stabilize.Title', actionCost: 2, skill: 'medicine', image: 'systems/pf2e/icons/features/feats/treat-wounds.webp' },\n    ZEWD4zcEDQwYhVT8: { name: 'PF2E.Actions.AdministerFirstAid.StopBleeding.Title', actionCost: 2, skill: 'medicine', image: 'systems/pf2e/icons/conditions/persistent-damage.webp' },\n    '55mxH0w8UkY1o3Xv': { name: 'PF2E.Actions.Balance.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/skills/movement/feet-winged-boots-brown.webp' },\n    LXCy1iJddD95Z91s: { name: 'PF2E.Actions.Climb.Title', skill: 'athletics', actionCost: 1, image: 'icons/sundries/misc/ladder.webp' },\n    '9RNumMausgG7adgL': { name: 'PF2E.Actions.Coerce.Title', skill: 'intimidation', actionCost: 'passive', image: 'icons/skills/social/intimidation-impressing.webp' },\n    xcrdOOiN0l6O1sIn: { name: 'PF2E.Actions.CommandAnAnimal.Title', skill: 'nature', actionCost: 1, image: 'icons/environment/creatures/horse-white.webp' },\n    zn0HadZeoKDALxRu: { name: 'PF2E.Actions.ConcealAnObject.Title', skill: 'stealth', actionCost: 1, image: 'systems/pf2e/icons/equipment/adventuring-gear/wax-key-blank.webp' },\n    Tu7LIRelQsiOuo1l: { name: 'PF2E.Actions.Craft.Title', skill: 'crafting', actionCost: 'passive', image: 'icons/skills/trades/smithing-anvil-silver-red.webp' },\n    aDsYSdRqiC6qQIOQ: { name: 'PF2E.Actions.CreateADiversion.DistractingWords.Title', skill: 'deception', actionCost: 1, image: 'icons/magic/control/mouth-smile-deception-purple.webp' },\n    zUJ0UhuoFt5a7tiN: { name: 'PF2E.Actions.CreateADiversion.Gesture.Title', skill: 'deception', actionCost: 1, image: 'icons/skills/social/wave-halt-stop.webp' },\n    '1JpYPlIkjyseE9JU': { name: 'PF2E.Actions.CreateADiversion.Trick.Title', skill: 'deception', actionCost: 1, image: 'systems/pf2e/icons/spells/charming-words.webp' },\n    mNphXpAkmGsMadUv: { name: 'PF2E.Actions.CreateForgery.Title', skill: 'society', actionCost: 'passive', image: 'systems/pf2e/icons/spells/transcribe-moment.webp' },\n    U6WjxFPn4fUqIrfl: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'arcana', actionCost: 'passive', image: 'icons/skills/trades/academics-book-study-runes.webp' },\n    RZyfkw1DiqVy3JUC: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'occultism', actionCost: 'passive', image: 'icons/skills/trades/academics-book-study-purple.webp' },\n    sDUERv4E88G5BRPr: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'religion', actionCost: 'passive', image: 'systems/pf2e/icons/equipment/other/spellbooks/thresholds-of-truth.webp' },\n    YWAvvDXpdW1fYPFo: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'society', actionCost: 'passive', image: 'icons/skills/trades/academics-study-reading-book.webp' },\n    nEwqNNWX6scLt4sc: { name: 'PF2E.Actions.Demoralize.Title', skill: 'intimidation', actionCost: 1, image: 'icons/skills/social/intimidation-impressing.webp' },\n    T2QNEoRojMWEec4a: { name: 'PF2E.Actions.DisableDevice.Title', skill: 'thievery', actionCost: 2, image: 'systems/pf2e/icons/equipment/adventuring-gear/thieves-tools.webp' },\n    ooiO59Ch2QaebOmc: { name: 'PF2E.Actions.Disarm.Title', skill: 'athletics', actionCost: 1, image: 'icons/skills/melee/sword-damaged-broken-glow-red.webp' },\n    '50Q0DYL33Kalu1BH': { name: 'PF2E.Actions.Escape.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/skills/movement/feet-winged-boots-glowing-yellow.webp' },\n    lkEcQQss16SIrVxM: { name: 'PF2E.Actions.Escape.Title', skill: 'athletics', actionCost: 1, image: 'icons/skills/movement/feet-winged-boots-glowing-yellow.webp' },\n    RjfPFjqPrNve6eeh: { name: 'PF2E.Actions.Feint.Title', skill: 'deception', actionCost: 1, image: 'icons/skills/melee/maneuver-sword-katana-yellow.webp' },\n    yMTKMnaYSGtDz4wk: { name: 'PF2E.Actions.ForceOpen.Title', skill: 'athletics', actionCost: 1, image: 'icons/equipment/feet/boots-armored-steel.webp' },\n    rCgGPEyXbzLFcio6: { name: 'PF2E.Actions.GatherInformation.Title', skill: 'diplomacy', actionCost: 'passive', image: 'icons/skills/social/diplomacy-handshake.webp' },\n    i95kcGLIQKOTsnv6: { name: 'PF2E.Actions.Grapple.Title', skill: 'athletics', actionCost: 'passive', image: 'icons/skills/melee/unarmed-punch-fist.webp' },\n    FlM3HvpnsZpCKawG: { name: 'PF2E.Actions.Hide.Title', skill: 'stealth', actionCost: 1, image: 'systems/pf2e/icons/features/classes/wild.webp' },\n    v3dlDjFlOmT5T2gC: { name: 'PF2E.Actions.HighJump.Title', skill: 'athletics', actionCost: 2, image: 'icons/skills/movement/arrows-up-trio-red.webp' },\n    k5nW4jGyXD0Oq9LR: { name: 'PF2E.Actions.Impersonate.Title', skill: 'deception', actionCost: 'passive', image: 'icons/equipment/head/mask-carved-scream-tan.webp' },\n    VTg4t8kYTvXcHROq: { name: 'PF2E.Actions.Lie.Title', skill: 'deception', actionCost: 'passive', image: 'icons/magic/control/mouth-smile-deception-purple.webp' },\n    QPsV0qi2zXm7syt6: { name: 'PF2E.Actions.LongJump.Title', skill: 'athletics', actionCost: 2, image: 'icons/skills/movement/figure-running-gray.webp' },\n    '1Sj2Pz3VI2SFWqZw': { name: 'PF2E.Actions.MakeAnImpression.Title', skill: 'diplomacy', actionCost: 'passive', image: 'icons/environment/people/commoner.webp' },\n    '9Ul5Op5OceT9P5SS': { name: 'PF2E.Actions.ManeuverInFlight.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/commodities/biological/wing-bird-white.webp' },\n    Gj68YCVlDjc75iCP: { name: 'PF2E.Actions.PalmAnObject.Title', skill: 'thievery', actionCost: 1, image: 'icons/sundries/gaming/playing-cards.webp' },\n    dWcrojMk0d2WRPBq: { name: 'PF2E.Actions.Perform.Title', skill: 'performance', actionCost: 1, image: 'icons/skills/trades/music-singing-voice-blue.webp' },\n    '8YrH37NzKRuiKFbF': { name: 'PF2E.Actions.PickALock.Title', skill: 'thievery', actionCost: 2, image: 'icons/sundries/misc/lock-bronze-reinforced.webp' },\n    BQTA7bL264189Xla: { name: 'PF2E.Actions.Repair.Title', skill: 'crafting', actionCost: 'passive', image: 'icons/tools/smithing/anvil.webp' },\n    tbveXG4gaIoKnsWX: { name: 'PF2E.Actions.Request.Title', skill: 'diplomacy', actionCost: 1, image: 'icons/skills/social/thumbsup-approval-like.webp' },\n    tikhJ2b6AMh7wQU7: { name: 'PF2E.Actions.Seek.Title', skill: 'perception', actionCost: 1, image: 'icons/tools/scribal/magnifying-glass.webp' },\n    LN67MgbGE8IHb2X0: { name: 'PF2E.Actions.SenseDirection.Title', skill: 'survival', actionCost: 'passive', image: 'icons/tools/navigation/compass-brass-blue-red.webp' },\n    PmHt7Gb5fCrlWWTr: { name: 'PF2E.Actions.SenseMotive.Title', skill: 'perception', actionCost: 1, image: 'icons/environment/people/commoner.webp' },\n    yNry1xMZqdWHncbV: { name: 'PF2E.Actions.Shove.Title', skill: 'athletics', actionCost: 1, image: 'systems/pf2e/icons/spells/hydraulic-push.webp' },\n    HSTkVuv0SjTNK3Xx: { name: 'PF2E.Actions.Sneak.Title', skill: 'stealth', actionCost: 1, image: 'systems/pf2e/icons/conditions/unnoticed.webp' },\n    UKHPveLpG7hUs4D0: { name: 'PF2E.Actions.Squeeze.Title', skill: 'acrobatics', actionCost: 'passive', image: 'icons/commodities/tech/claw-mechanical.webp' },\n    zjovbAeuLvyuWFKd: { name: 'PF2E.Actions.Steal.Title', skill: 'thievery', actionCost: 1, image: 'icons/containers/bags/coinpouch-gold-red.webp' },\n    mkKko3CEBCyJVQw1: { name: 'PF2E.Actions.Subsist.Title', skill: 'society', actionCost: 'passive', image: 'icons/environment/settlement/building-rubble.webp' },\n    zkqh01BoXDVgydzo: { name: 'PF2E.Actions.Subsist.Title', skill: 'survival', actionCost: 'passive', image: 'icons/environment/wilderness/camp-improvised.webp' },\n    TIlUkCzviYxdVk4E: { name: 'PF2E.Actions.Swim.Title', skill: 'athletics', actionCost: 1, image: 'icons/creatures/fish/fish-shark-swimming.webp' },\n    Al5LYMMdeDcpC9Br: { name: 'PF2E.Actions.Track.Title', skill: 'survival', actionCost: 'passive', image: 'systems/pf2e/icons/conditions/observed.webp' },\n    m4iM5r3TfvQs5Y2n: { name: 'PF2E.Actions.TreatDisease.Title', skill: 'medicine', actionCost: 'passive', image: 'icons/magic/nature/root-vine-caduceus-healing.webp' },\n    R03LRl2RBbsm6EcF: { name: 'PF2E.Actions.TreatPoison.Title', skill: 'medicine', actionCost: 1, image: 'systems/pf2e/icons/effects/treat-poison.webp' },\n    gRj7xUfcpUZQLrOC: { name: 'PF2E.Actions.Trip.Title', skill: 'athletics', actionCost: 1, image: 'icons/skills/wounds/bone-broken-marrow-yellow.webp' },\n    '2qhYHkcSsTJoSwrJ': { name: 'PF2E.Actions.TumbleThrough.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/skills/movement/feet-winged-sandals-tan.webp' }\n}\n\n/**\n * Skills\n */\nexport const SKILL = {\n    acrobatics: { name: 'PF2E.SkillAcrobatics' },\n    arcana: { name: 'PF2E.SkillArcana' },\n    athletics: { name: 'PF2E.SkillAthletics' },\n    crafting: { name: 'PF2E.SkillCrafting' },\n    deception: { name: 'PF2E.SkillDeception' },\n    diplomacy: { name: 'PF2E.SkillDiplomacy' },\n    intimidation: { name: 'PF2E.SkillIntimidation' },\n    lore: { name: 'PF2E.SkillLore' },\n    medicine: { name: 'PF2E.SkillMedicine' },\n    nature: { name: 'PF2E.SkillNature' },\n    occultism: { name: 'PF2E.SkillOccultism' },\n    perception: { name: 'PF2E.PerceptionLabel' },\n    performance: { name: 'PF2E.SkillPerformance' },\n    religion: { name: 'PF2E.SkillReligion' },\n    society: { name: 'PF2E.SkillSociety' },\n    stealth: { name: 'PF2E.SkillStealth' },\n    survival: { name: 'PF2E.SkillSurvival' },\n    thievery: { name: 'PF2E.SkillThievery' }\n}\n\n/**\n * Item types\n */\nexport const ITEM_TYPE = {\n    advantage: { groupId: 'advantage' },\n    disadvantage: { groupId: 'disadvantage' },\n    elan: { groupId: 'elan' },\n    proficiency: { groupId: 'proficiency' },\n    spell: { groupId: 'spell' },\n    spellPath: { groupId: 'spellPath' },\n    turnMaint: { groupId: 'turnMaint' },\n    dailyMaint: { groupId: 'dailyMaint' },\n    incarnation: { groupId: 'incarnation' },\n    invocation: { groupId: 'invocation' },\n    mentalPattern: { groupId: 'mentalPattern' },\n    psychicMatrix: { groupId: 'psychicMatrix' },\n    maintPower: { groupId: 'maintPower' },\n    discipline: { groupId: 'discipline' },\n    arsMagnus: { groupId: 'arsMagnus' },\n    martialArt: { groupId: 'martialArt' },\n    kiTechnique: { groupId: 'kiTechnique' },\n    kiSealCreature: { groupId: 'kiSealCreature' },\n    armor: { groupId: 'armor' },\n    armorHelmet: { groupId: 'armorHelmet' },\n    weapon: { groupId: 'weapon' },\n    ammo: { groupId: 'ammo' },\n    inventory: { groupId: 'inventory' },\n    currency: { groupId: 'currency' },\n    class: { groupId: 'class' }\n}\n\nexport const ABILITY_TYPE = {\n    acrobatic: { groupId: 'abilAcro'},\n    acrobatics: { groupId: 'abilAcro'}\n}","import { MODULE } from './constants.js'\r\n\r\nexport let Utils = null\r\n\r\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\r\n    /**\r\n     * Utility functions\r\n     */\r\n    Utils = class Utils {\r\n        /**\r\n         * Get setting\r\n         * @param {string} key               The key\r\n         * @param {string=null} defaultValue The default value\r\n         * @returns {string}                 The setting value\r\n         */\r\n        static getSetting (key, defaultValue = null) {\r\n            let value = defaultValue ?? null\r\n            try {\r\n                value = game.settings.get(MODULE.ID, key)\r\n            } catch {\r\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\r\n            }\r\n            return value\r\n        }\r\n\r\n        /**\r\n         * Set setting\r\n         * @param {string} key   The key\r\n         * @param {string} value The value\r\n         */\r\n        static async setSetting (key, value) {\r\n            try {\r\n                value = await game.settings.set(MODULE.ID, key, value)\r\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\r\n            } catch {\r\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\r\n            }\r\n        }\r\n    }\r\n})\r\n","// System Module Imports\nimport { ACTION_ICON, ACTION_TYPE, CARRY_TYPE_ICON, ITEM_TYPE, MODULAR_OPTION, SKILL_ABBREVIATION, SKILL, SKILL_ACTION, STRIKE_ICON, STRIKE_USAGE, DAMAGE_TYPE_ICONS } from './constants.js'\nimport { Utils } from './utils.js'\n\nexport let ActionHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n        // Initialize actor and token variables\n        actors = null\n        actorId = null\n        actorType = null\n        tokenId = null\n\n        // Initialize items variable\n        items = null\n\n        // Initialize groupIds variables\n        groupIds = null\n        activationGroupIds = null\n        effectGroupIds = null\n        inventoryGroupIds = null\n        spellGroupIds = null\n\n        // Initialize action variables\n        featureActions = null\n        inventoryActions = null\n        spellActions = null\n\n        mapLabel = coreModule.api.Utils.i18n('PF2E.MAPAbbreviationLabel').replace(' {penalty}', '')\n\n        /**\n         * Build System Actions\n         * @override\n         * @param {array} groupIds\n         */\n        async buildSystemActions (groupIds) {\n            // Set actor and token variables\n            this.actors = (!this.actor) ? this.#getActors() : [this.actor]\n            this.actorType = this.actor?.type\n\n            // Exit if actor is not a known type\n            const knownActors = ['character', 'familiar', 'hazard', 'npc']\n            if (this.actorType && !knownActors.includes(this.actorType)) return\n\n            // Set items variable\n            if (this.actor) {\n                let items = this.actor.items\n                items = coreModule.api.Utils.sortItemsByName(items)\n                this.items = items\n            }\n\n            // Set settings variables\n            this.abbreviateSkills = Utils.getSetting('abbreviateSkills')\n            this.addAuxiliaryActions = Utils.getSetting('addAuxiliaryActions')\n            this.addDamageAndCritical = Utils.getSetting('addDamageAndCritical')\n            this.addStowedItems = Utils.getSetting('addStowedItems')\n            this.addUnequippedItems = Utils.getSetting('addUnequippedItems')\n            this.calculateAttackPenalty = Utils.getSetting('calculateAttackPenalty')\n            this.colorSkills = Utils.getSetting('colorSkills')\n            this.showStrikeImages = Utils.getSetting('showStrikeImages')\n            this.showStrikeNames = Utils.getSetting('showStrikeNames')\n            this.showStrikeTraits = Utils.getSetting('showStrikeTraits')\n            this.splitStrikes = Utils.getSetting('splitStrikes')\n\n            // Set group variables\n            this.groupIds = groupIds\n\n            if (this.actorType === 'character') {\n                await this.#buildCharacterActions()\n            } else if (this.actorType === 'familiar') {\n                await this.#buildFamiliarActions()\n            } else if (this.actorType === 'hazard') {\n                await this.#buildHazardActions()\n            } else if (this.actorType === 'npc') {\n                await this.#buildNpcActions()\n            } else if (!this.actor) {\n                this.#buildMultipleTokenActions()\n            }\n        }\n\n        /**\n         * Build character actions\n         * @private\n         */\n        async #buildCharacterActions () {\n            await Promise.all([\n                this.#buildActions(),\n                this.#buildCombat(),\n                this.#buildConditions(),\n                this.#buildEffects(),\n                this.#buildFeats(),\n                this.#buildHeroActions(),\n                this.#buildPoints('heroPoints'),\n                this.#buildPoints('mythicPoints'),\n                this.#buildInitiative(),\n                this.#buildInventory(),\n                this.#buildPerceptionCheck(),\n                this.#buildRecoveryCheck(),\n                this.#buildRests(),\n                this.#buildSaves(),\n                this.#buildSkillActions(),\n                this.#buildSkills(),\n                this.#buildSpells(),\n                this.#buildStrikes(),\n                this.#buildToggles()\n            ])\n            // Build elemental blasts after other character actions so they are grouped together\n            await this.#buildElementalBlasts()\n        }\n\n        /**\n         * Build familiar actions\n         * @private\n         */\n        async #buildFamiliarActions () {\n            await Promise.all([\n                this.#buildActions(),\n                this.#buildAttack(),\n                this.#buildCombat(),\n                this.#buildConditions(),\n                this.#buildEffects(),\n                this.#buildInventory(),\n                this.#buildPerceptionCheck(),\n                this.#buildSaves(),\n                this.#buildSkills()\n            ])\n        }\n\n        /**\n         * Build hazard actions\n         * @private\n         */\n        async #buildHazardActions () {\n            await Promise.all([\n                this.#buildActions(),\n                this.#buildCombat(),\n                this.#buildInitiative(),\n                this.#buildSaves(),\n                this.#buildStrikes()\n            ])\n        }\n\n        /**\n         * Build NPC actions\n         */\n        async #buildNpcActions () {\n            await Promise.all([\n                this.#buildActions(),\n                this.#buildCombat(),\n                this.#buildConditions(),\n                this.#buildEffects(),\n                this.#buildFeats(),\n                this.#buildInitiative(),\n                this.#buildInventory(),\n                this.#buildPerceptionCheck(),\n                this.#buildSaves(),\n                this.#buildSkillActions(),\n                this.#buildSkills(),\n                this.#buildStrikes(),\n                this.#buildSpells(),\n                this.#buildToggles()\n            ])\n        }\n\n        /**\n         * Build multiple token actions\n         * @private\n         * @returns {object}\n         */\n        async #buildMultipleTokenActions () {\n            await Promise.all([\n                this.#buildInitiative(),\n                this.#buildPerceptionCheck(),\n                this.#buildSaves(),\n                this.#buildSkillActions(),\n                this.#buildSkills()\n            ])\n        }\n\n        /**\n         * Build actions\n         */\n        async #buildActions () {\n            const actionType = 'action'\n\n            // Exit early if no items exist\n            if (this.items.size === 0) return\n\n            const actionTypes = ['action', 'reaction', 'free', 'passive']\n\n            const actionItems = new Map([...this.items].filter(([_, itemData]) => itemData.type === 'action' || actionTypes.includes(itemData.system?.actionType?.value)))\n\n            const actionsMap = new Map()\n\n            for (const [key, value] of actionItems) {\n                if (value.suppressed === true) continue\n\n                // Set variables\n                const actionTypeValue = value.system.actionType?.value\n\n                switch (actionTypeValue) {\n                case 'action':\n                    actionsMap.set('actions', actionsMap.get('actions') || new Map())\n                    actionsMap.get('actions').set(key, value)\n                    break\n                case 'reaction':\n                    actionsMap.set('reactions', actionsMap.get('reactions') || new Map())\n                    actionsMap.get('reactions').set(key, value)\n                    break\n                case 'free':\n                    actionsMap.set('free-actions', actionsMap.get('free-actions') || new Map())\n                    actionsMap.get('free-actions').set(key, value)\n                    break\n                case 'passive':\n                    actionsMap.set('passives', actionsMap.get('passives') || new Map())\n                    actionsMap.get('passives').set(key, value)\n                    break\n                }\n            }\n\n            // Loop through inventory subcategory ids\n            for (const [key, value] of actionsMap) {\n                if (value.suppressed === true) continue\n                \n                const groupId = key\n                const items = value\n\n                // Create group data\n                const groupData = { id: groupId, type: 'system' }\n\n                const actions = await Promise.all(\n                    [...items].map(async ([_, itemData]) => {\n                        const id = this.#getActionId(itemData)\n                        const name = this.#getActionName(itemData)\n                        const listName = this.#getActionListName(itemData, actionType)\n                        const cssClass = this.#getActionCss(itemData)\n                        const encodedValue = [actionType, id].join(this.delimiter)\n                        const icon1 = this.#getIcon1(itemData, actionType)\n                        const img = coreModule.api.Utils.getImage(itemData)\n                        const info = this.#getItemInfo(itemData)\n                        const tooltipData = await this.#getTooltipData(itemData, actionType)\n                        const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                        return {\n                            id,\n                            name,\n                            encodedValue,\n                            cssClass,\n                            img,\n                            icon1,\n                            info,\n                            listName,\n                            tooltip\n                        }\n                    })\n                )\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build attacks\n         * @private\n         */\n        #buildAttack () {\n            const actionType = 'familiarAttack'\n\n            const attack = this.actor.system.attack\n\n            if (attack) {\n                const id = attack.slug\n                const name = coreModule.api.Utils.i18n('PF2E.AttackLabel')\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, id].join(this.delimiter)\n                const modifier = coreModule.api.Utils.getModifier(attack?.totalModifier)\n                const info1 = this.actor ? { text: modifier } : ''\n\n                // Get actions\n                const actions = [{\n                    id,\n                    name,\n                    listName,\n                    encodedValue,\n                    info1\n                }]\n\n                // Create group data\n                const groupData = { id: 'attack', type: 'system' }\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build combat\n         */\n        #buildCombat () {\n            const actionType = 'utility'\n\n            // Set combat types\n            const combatTypes = {\n                endTurn: { id: 'endTurn', name: coreModule.api.Utils.i18n('tokenActionHud.endTurn') }\n            }\n\n            // Delete endTurn for multiple tokens\n            if (game.combat?.current?.tokenId !== this.token?.id) delete combatTypes.endTurn\n\n            // Get actions\n            const actions = Object.entries(combatTypes).map((combatType) => {\n                const id = combatType[1].id\n                const name = combatType[1].name\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, id].join(this.delimiter)\n                return {\n                    id,\n                    name,\n                    listName,\n                    encodedValue\n                }\n            })\n\n            // Create group data\n            const groupData = { id: 'combat', type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build conditions\n         * @private\n         */\n        async #buildConditions () {\n            const actionType = 'condition'\n            const limitedConditions = ['doomed', 'dying', 'wounded']\n\n            // Get active conditions\n            const activeConditions = new Map(\n                [...this.items]\n                    .filter(item => item[1].type === actionType)\n                    .map(item => {\n                        const itemData = item[1]\n                        return [\n                            itemData.slug,\n                            itemData\n                        ]\n                    })\n            )\n\n            // Get conditions\n            // Conditions are duplicated in the ConditionManager and the name scaled conditions is suffixed with ' 1'\n            const conditions = [...game.pf2e.ConditionManager.conditions]\n                .filter(([conditionId]) => !conditionId.startsWith('Compendium'))\n                .map(([conditionId, conditionData]) => {\n                    conditionData.name = conditionData.name.replace(' 1', '')\n                    return [conditionId, conditionData]\n                })\n\n            // Build actions\n            const actions = await Promise.all(\n                conditions.map(async ([conditionId, conditionData]) => {\n                    const id = conditionData.slug\n                    const activeCondition = activeConditions.get(conditionId)\n                    const activeConditionId = activeCondition?.id\n                    const name = conditionData.name\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                    const listName = `${actionTypeName}${name}`\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    const img = coreModule.api.Utils.getImage(conditionData)\n                    const active = activeConditionId ? ' active' : ''\n                    const cssClass = `toggle${active}`\n                    let info1 = ''\n                    let attributeValue = ''\n\n                    if (activeConditionId) {\n                        if (limitedConditions.includes(activeCondition.slug)) {\n                            const attribute = this.actor.system.attributes[activeCondition.slug]\n                            attributeValue = attribute.value\n                            const max = attribute.max\n                            info1 = { text: (max > 0) ? `${attributeValue ?? 0}/${max}` : '' }\n                        } else if (activeCondition.system.value.isValued) {\n                            attributeValue = activeCondition.system.value.value\n                            info1 = { text: attributeValue }\n                        }\n                    }\n\n                    const tooltipName = `${name}${(attributeValue) ? ` ${attributeValue}` : ''}`\n                    const tooltipData = {\n                        name: tooltipName,\n                        description: conditionData.description\n                    }\n                    const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue,\n                        cssClass,\n                        img,\n                        info1,\n                        tooltip\n                    }\n                })\n            )\n\n            actions.sort((a, b) => a.name.localeCompare(b.name))\n\n            // Create group data\n            const conditionsGroupData = { id: 'conditions', type: 'system' }\n            const actionsTemp = []\n\n            // Add conditions to the group\n            await this.addActions(\n                actions.reduce(function (acc, current) {\n                    const filter = ['Friendly', 'Helpful', 'Hostile', 'Indifferent', 'Malevolence', 'Unfriendly']\n                    if (!filter.includes(current.name)) {\n                        acc.push(current)\n                    } else {\n                        actionsTemp.push(current)\n                    }\n                    return acc\n                }, []),\n                conditionsGroupData\n            )\n\n            const socialGroupData = { id: 'social-conditions', type: 'system' }\n            const actionsOther = []\n\n            // Add social conditions to the group\n            await this.addActions(\n                actionsTemp.reduce(function (acc, current) {\n                    const filter = ['Friendly', 'Helpful', 'Hostile', 'Indifferent', 'Unfriendly']\n                    if (filter.includes(current.name)) {\n                        acc.push(current)\n                    } else {\n                        actionsOther.push(current)\n                    }\n                    return acc\n                }, []),\n                socialGroupData\n            )\n\n            const otherGroupData = { id: 'other-conditions', type: 'system' }\n\n            // Add other conditions to the group\n            await this.addActions(actionsOther, otherGroupData)\n        }\n\n        /**\n         * Build hero points\n         */\n        async #buildPoints (actionType) {\n            let actions, groupData\n\n            const mythicEnabled = this.actor.system.resources?.mythicPoints.max ? true : false\n\n            // Create group data\n            if (actionType === 'heroPoints' && !mythicEnabled) {\n                groupData = { id: 'hero-points', type: 'system' }\n\n                const heroPoints = this.actor.system.resources?.heroPoints\n                const value = heroPoints.value\n                const max = heroPoints.max\n\n                // Get actions\n                actions = [{\n                    id: 'heroPoints',\n                    name: coreModule.api.Utils.i18n('PF2E.Actor.Resource.HeroPoints'),\n                    encodedValue: [actionType, actionType].join(this.delimiter),\n                    info1: { text: (max > 0) ? `${value ?? 0}/${max}` : '' }\n                }]\n            }\n            else if (actionType === 'mythicPoints' && mythicEnabled) {\n                groupData = { id: 'mythic-points', type: 'system' }\n\n                const mythicPoints = this.actor.system.resources?.mythicPoints\n                const value = mythicPoints.value\n                const max = mythicPoints.max\n\n                // Get actions\n                actions = [{\n                    id: 'mythicPoints',\n                    name: coreModule.api.Utils.i18n('PF2E.Actor.Resource.MythicPoints'),\n                    encodedValue: [actionType, actionType].join(this.delimiter),\n                    info1: { text: (max > 0) ? `${value ?? 0}/${max}` : '' }\n                }]\n            }\n\n            // Add actions to action list\n            if (actions && groupData) {\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build effects\n         * @private\n         */\n        async #buildEffects () {\n            const actionType = 'effect'\n\n            // Get effects\n            const items = new Map([...this.items]\n                .filter(item =>\n                    item[1].type === 'effect' &&\n                    ((!(item[1].system?.unidentified ?? false) &&\n                    !(item[1].unidentified ?? false)) || game.user.isGM)))\n\n            // Create group data\n            const groupData = { id: 'effects', type: 'system' }\n\n            const actions = await Promise.all(\n                [...items].map(async ([_$, itemData]) => {\n                    const id = this.#getActionId(itemData)\n                    const name = this.#getActionName(itemData)\n                    const listName = this.#getActionListName(itemData, actionType)\n                    const cssClass = this.#getActionCss(itemData)\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    const icon1 = this.#getIcon1(itemData, actionType)\n                    const img = coreModule.api.Utils.getImage(itemData)\n                    const info = this.#getItemInfo(itemData)\n                    const tooltipData = {\n                        name,\n                        description: itemData.description\n                    }\n                    const tooltip = await this.#getTooltip(actionType, tooltipData)\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue,\n                        cssClass,\n                        img,\n                        icon1,\n                        info,\n                        tooltip\n                    }\n                })\n            )\n\n            actions.sort((a, b) => a.name.localeCompare(b.name))\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build Feats\n         * @private\n         */\n        async #buildFeats () {\n            const actionType = 'feat'\n            const featTypes = {\n                ancestryfeature: 'ancestry-features',\n                classfeature: 'class-features',\n                ancestry: 'ancestry-feats',\n                class: 'class-feats',\n                skill: 'skill-feats',\n                general: 'general-feats',\n                bonus: 'bonus-feats'\n            }\n\n            // Get feats\n            const featsMap = new Map()\n\n            for (const [key, value] of this.items) {\n                if (value.type !== 'feat') continue\n                if (value.suppressed === true) continue\n\n                const featType = value.system?.category ?? value.featType\n                const groupId = featTypes[featType]\n\n                featsMap.set(groupId, featsMap.get(groupId) || new Map())\n                featsMap.get(groupId).set(key, value)\n            }\n\n            for (const [key, value] of featsMap) {\n                const groupId = key\n                const items = value\n\n                // Get group data\n                const groupData = { id: groupId, type: 'system' }\n\n                const actions = await Promise.all(\n                    [...items].map(async ([_, itemData]) => {\n                        const id = this.#getActionId(itemData)\n                        const name = this.#getActionName(itemData)\n                        const listName = this.#getActionListName(itemData, actionType)\n                        const cssClass = this.#getActionCss(itemData)\n                        const encodedValue = [actionType, id].join(this.delimiter)\n                        const icon1 = this.#getIcon1(itemData, actionType)\n                        const img = coreModule.api.Utils.getImage(itemData)\n                        const info = this.#getItemInfo(itemData)\n                        const tooltipData = await this.#getTooltipData(itemData, actionType)\n                        const tooltip = await this.#getTooltip(actionType, tooltipData)\n                        return {\n                            id,\n                            name,\n                            encodedValue,\n                            cssClass,\n                            img,\n                            icon1,\n                            info,\n                            listName,\n                            tooltip\n                        }\n                    })\n                )\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n        * Build hero actions\n        * @private\n        */\n        async #buildHeroActions () {\n            if (!game.modules.get('pf2e-hero-actions')?.active) return\n\n            const actionType = 'heroAction'\n            const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionType])\n            const heroActions = this.actor.getFlag('pf2e-hero-actions', 'heroActions') ?? []\n\n            const groupData = { id: 'hero-actions', type: 'system' }\n\n            const actions = []\n\n            const heroPoints = this.actor.heroPoints?.value\n            const remainingHeroPoints = heroPoints - (heroActions?.length ?? 0)\n\n            if (remainingHeroPoints > 0) {\n                actions.push({\n                    id: 'drawHeroActions',\n                    name: game.i18n.format('pf2e-hero-actions.templates.heroActions.draw', { nb: remainingHeroPoints }),\n                    listName: `${actionTypeName}: ${game.i18n.localize('pf2e-hero-actions.templates.heroActions.draw').replace('({nb}) ', '')}`,\n                    encodedValue: [actionType, 'drawHeroActions'].join(this.delimiter)\n                })\n            }\n\n            const heroActionActions = await Promise.all(\n                [...heroActions].map(async (heroAction) => {\n                    const id = heroAction?.uuid\n                    const name = heroAction?.name\n                    const listName = `${actionTypeName}: ${name}`\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    const img = coreModule.api.Utils.getImage('systems/pf2e/icons/actions/Passive.webp')\n                    const uuidData = (heroAction?.uuid) ? await fromUuid(heroAction?.uuid) : null\n                    const tooltipData = {\n                        name,\n                        description: uuidData?.text?.content ?? null\n                    }\n                    const tooltip = await this.#getTooltip(actionType, tooltipData)\n                    return {\n                        id,\n                        name,\n                        encodedValue,\n                        img,\n                        listName,\n                        tooltip\n                    }\n                })\n            )\n\n            actions.push(...heroActionActions)\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build initiative\n         * @private\n         */\n        async #buildInitiative () {\n            const actionType = 'initiative'\n\n            const initiativeStatistic = this.actor?.system?.initiative?.statistic ?? null\n\n            // Get actions\n            const actions = []\n\n            if (this.actorType !== 'hazard') {\n                const initiative = this.actor ? this.actor.system.initiative : coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\n                const fullName = coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\n                const name = this.abbreviatedSkills ? SKILL_ABBREVIATION.perception ?? fullName : fullName\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, 'perception'].join(this.delimiter)\n                const active = (initiativeStatistic === 'perception') ? ' active' : ''\n                const cssClass = `toggle${active}`\n                const modifier = coreModule.api.Utils.getModifier(initiative?.totalModifier)\n                const info1 = this.actor ? { text: modifier } : ''\n                const tooltipName = `${fullName}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n                const tooltipData = {\n                    name: tooltipName,\n                    modifiers: initiative?.modifiers\n                }\n                const tooltip = this.actor ? await this.#getTooltip(actionType, tooltipData) : null\n\n                // Get actions\n                actions.push({\n                    id: 'initiative-perception',\n                    name,\n                    listName,\n                    encodedValue,\n                    cssClass,\n                    info1,\n                    tooltip\n                })\n            }\n\n            // Get skills\n            const skills = (this.actor)\n                ? Object.entries(this.actor.skills).filter(([_, skillData]) => !!skillData.label && skillData.label.length > 1)\n                : this.#getSharedSkills()\n\n            if (!skills) return\n\n            const coreSkills = []\n            const loreSkills = []\n\n            for (const skill of skills) {\n                if (!skill[1].lore) {\n                    coreSkills.push(skill)\n                } else {\n                    loreSkills.push(skill)\n                }\n            }\n\n            coreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\n            loreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\n\n            const skillActions = await Promise.all(\n                [...coreSkills, ...loreSkills].map(async ([skillId, skillData]) => {\n                    const id = `initiative-${skillId}`\n                    const data = skillData\n                    const fullName = coreModule.api.Utils.i18n(data.label) ?? coreModule.api.Utils.i18n(CONFIG.PF2E.skillList[skillId])\n                    const name = this.abbreviatedSkills ? SKILL_ABBREVIATION[data.slug] ?? fullName : fullName\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                    const listName = `${actionTypeName}${name}`\n                    const encodedValue = [actionType, skillId].join(this.delimiter)\n                    const active = (initiativeStatistic === skillId) ? ' active' : ''\n                    const cssClass = `toggle${active}`\n                    const modifier = coreModule.api.Utils.getModifier(skillData.check?.mod)\n                    const info1 = this.actor ? { text: modifier } : ''\n                    const tooltipName = `${fullName}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n                    const tooltipData = {\n                        name: tooltipName,\n                        modifiers: skillData?.modifiers\n                    }\n                    const tooltip = (this.actor) ? await this.#getTooltip(actionType, tooltipData) : null\n\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue,\n                        cssClass,\n                        info1,\n                        tooltip\n                    }\n                })\n            )\n\n            actions.push(...skillActions)\n\n            // Create group data\n            const groupData = { id: 'initiative', type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build inventory\n         * @private\n         */\n        async #buildInventory () {\n            // Exit if no items exist\n            if (this.items.size === 0) return\n\n            const actionType = 'item'\n            const inventoryMap = new Map()\n\n            for (const [key, value] of this.items) {\n                const hasQuantity = value.system?.quantity > 0\n                const isEquippedItem = this.#isEquippedItem(value)\n                const isAddItem = this.#isAddItem('nonContainer', value)\n                const type = value.type\n\n                if (hasQuantity && isAddItem) {\n                    const itemType = isEquippedItem ? 'equipped' : 'unequipped'\n                    const itemCategoryMap = inventoryMap.get(itemType) ?? new Map()\n                    itemCategoryMap.set(key, value)\n                    inventoryMap.set(itemType, itemCategoryMap)\n\n                    if (isEquippedItem) {\n                        const categoryTypeMap = inventoryMap.get(type) ?? new Map()\n                        categoryTypeMap.set(key, value)\n                        inventoryMap.set(type, categoryTypeMap)\n                    }\n                }\n            }\n\n            // Loop through inventory group ids\n            for (const [id, items] of inventoryMap) {\n                const groupId = ITEM_TYPE[id]?.groupId\n\n                if (!groupId) continue\n\n                // Create group data\n                const groupData = { id: groupId, type: 'system' }\n\n                // Get actions\n                const actions = await Promise.all(\n                    [...items].map(async ([_, itemData]) => {\n                        const id = this.#getActionId(itemData)\n                        const name = this.#getActionName(itemData)\n                        const listName = this.#getActionListName(itemData, actionType)\n                        const cssClass = this.#getActionCss(itemData)\n                        const encodedValue = [actionType, id].join(this.delimiter)\n                        const icon1 = this.#getIcon1(itemData, actionType)\n                        const icon2 = this.#getCarryTypeIcon(itemData)\n                        const img = coreModule.api.Utils.getImage(itemData)\n                        const info = this.#getItemInfo(itemData)\n                        const tooltipData = await this.#getTooltipData(itemData, actionType)\n                        const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                        return {\n                            id,\n                            name,\n                            encodedValue,\n                            cssClass,\n                            img,\n                            icon1,\n                            icon2,\n                            info,\n                            listName,\n                            tooltip\n                        }\n                    })\n                )\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n\n            // Add container contents\n            if (inventoryMap.has('backpack')) {\n                // Create parent group data\n                const parentGroupData = { id: 'containers', type: 'system' }\n\n                const containers = inventoryMap.get('backpack')\n\n                for (const [id, container] of containers) {\n                    const contents = container.contents\n\n                    // Skip if container has no contents\n                    if (!contents.size) continue\n\n                    // Create group data\n                    const groupData = {\n                        id,\n                        name: container.name,\n                        listName: `Group: ${container.name}`,\n                        type: 'system-derived'\n                    }\n\n                    // Add group to action list\n                    await this.addGroup(groupData, parentGroupData)\n\n                    const contentsMap = new Map()\n\n                    for (const content of contents) {\n                        const isAddItem = this.#isAddItem('container', content)\n\n                        if (isAddItem) {\n                            contentsMap.set(content.id, content)\n                        }\n                    }\n\n                    const actions = await Promise.all(\n                        [...contentsMap].map(async ([_, itemData]) => {\n                            const id = this.#getActionId(itemData)\n                            const name = this.#getActionName(itemData)\n                            const listName = this.#getActionListName(itemData, actionType)\n                            const cssClass = this.#getActionCss(itemData)\n                            const encodedValue = [actionType, id].join(this.delimiter)\n                            const icon1 = this.#getIcon1(itemData, actionType)\n                            const icon2 = this.#getCarryTypeIcon(itemData)\n                            const img = coreModule.api.Utils.getImage(itemData)\n                            const info = this.#getItemInfo(itemData)\n                            const tooltipData = await this.#getTooltipData(itemData, actionType)\n                            const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                            return {\n                                id,\n                                name,\n                                encodedValue,\n                                cssClass,\n                                img,\n                                icon1,\n                                icon2,\n                                info,\n                                listName,\n                                tooltip\n                            }\n                        })\n                    )\n\n                    // Add actions to action list\n                    this.addActions(actions, groupData)\n                }\n            }\n        }\n\n        /**\n         * Build perception check\n         * @private\n         */\n        async #buildPerceptionCheck () {\n            const actionType = 'perceptionCheck'\n            const perception = this.actor ? this.actor.system.perception : coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\n            const name = coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\n            const modifier = coreModule.api.Utils.getModifier(perception?.totalModifier)\n            const info1 = this.actor ? { text: modifier } : ''\n            const tooltipName = `${name}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n            const tooltipData = {\n                name: tooltipName,\n                modifiers: perception?.modifiers\n            }\n            const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n            // Get actions\n            const actions = [{\n                id: 'perception',\n                name,\n                encodedValue: [actionType, 'perception'].join(this.delimiter),\n                info1,\n                tooltip\n            }]\n\n            // Create group data\n            const groupData = { id: 'perception-check', type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build recovery check\n         */\n        #buildRecoveryCheck () {\n            const actionType = 'recoveryCheck'\n            const dyingValue = this.actor?.system.attributes?.dying\n\n            if (dyingValue?.value > 0) {\n                // Get actions\n                const actions = [{\n                    id: actionType,\n                    name: coreModule.api.Utils.i18n('PF2E.Check.Specific.Recovery'),\n                    encodedValue: [actionType, actionType].join(this.delimiter)\n                }]\n\n                // Create group data\n                const groupData = { id: 'recovery-check', type: 'system' }\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build rests\n         */\n        #buildRests () {\n            // Exit if multiple actors and not every actor is the character type\n            if (!this.actor && !this.actors.every(actor => actor.type === 'character')) return\n\n            const actionType = 'utility'\n\n            // Get actions\n            const actions = [\n                {\n                    id: 'treatWounds',\n                    name: coreModule.api.Utils.i18n('PF2E.Actions.TreatWounds.Label'),\n                    encodedValue: [actionType, 'treatWounds'].join(this.delimiter)\n                },\n                {\n                    id: 'rest',\n                    name: coreModule.api.Utils.i18n('PF2E.Actor.Character.Rest.Label'),\n                    encodedValue: [actionType, 'rest'].join(this.delimiter)\n                }\n            ]\n\n            // Take a Breather\n            if (game.settings.get('pf2e', 'staminaVariant')) {\n                actions.push({\n                    id: 'takeBreather',\n                    name: coreModule.api.Utils.i18n('tokenActionHud.pf2e.takeBreather'),\n                    encodedValue: [actionType, 'takeBreather'].join(this.delimiter)\n                })\n            }\n\n            // Create group data\n            const groupData = { id: 'rests', type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build saves\n         * @private\n         */\n        async #buildSaves () {\n            const actionType = 'save'\n\n            // Get saves\n            const saves = this.actor ? Object.entries(this.actor.saves || []) : Object.entries(CONFIG.PF2E.saves)\n\n            // Exit if no saves exist\n            if (!saves || saves.length === 0) return\n\n            // Get actions\n            const actions = await Promise.all(\n                saves.map(async ([id, saveData]) => {\n                    const name = saveData.label ?? (typeof saveData === 'string' ? coreModule.api.Utils.i18n(saveData) : '')\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                    const listName = `${actionTypeName}${name}`\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    const modifier = coreModule.api.Utils.getModifier(saveData.mod)\n                    const info1 = this.actor ? { text: modifier } : ''\n                    const tooltipName = `${name}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n                    const tooltipData = {\n                        name: tooltipName,\n                        modifiers: saveData?.modifiers\n                    }\n                    const tooltip = this.actor ? await this.#getTooltip(actionType, tooltipData) : null\n\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue,\n                        info1,\n                        tooltip\n                    }\n                })\n            )\n\n            // Get group data\n            const groupData = { id: 'saves', type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build skill actions\n         * @private\n         */\n        async #buildSkillActions () {\n            const actionType = 'compendiumMacro'\n\n            // Get skill actions\n            const actionMacros = await game.packs.get('pf2e.action-macros').getIndex()\n\n            if (!actionMacros.size) return\n\n            const skillActionsMap = new Map()\n\n            // Get actions\n            const actions = []\n            for (const actionMacro of actionMacros) {\n                const skillAction = SKILL_ACTION[actionMacro._id]\n\n                if (!skillAction) continue\n\n                const id = actionMacro._id\n                const actionName = coreModule.api.Utils.i18n(skillAction.name)\n                const skillName = coreModule.api.Utils.i18n(SKILL[skillAction.skill]?.name)\n                const name = `${actionName} - ${skillName}`\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE.skillAction)}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, 'pf2e.action-macros', id].join(this.delimiter)\n                const icon1 = this.#getActionIcon(skillAction.actionCost)\n                const img = skillAction.image\n                const modifier = coreModule.api.Utils.getModifier(this.actor?.skills[skillAction.skill]?.check?.mod)\n                const info1 = this.actor ? { text: modifier } : null\n\n                const action = {\n                    id,\n                    name,\n                    listName,\n                    encodedValue,\n                    icon1,\n                    img,\n                    info1\n                }\n\n                actions.push(action)\n\n                skillActionsMap.set(skillAction.skill, skillActionsMap.get(skillAction.skill) || new Map())\n                skillActionsMap.get(skillAction.skill).set(actionMacro._id, { ...action, name: actionName })\n            }\n\n            // Add actions to HUD\n            await this.addActions(actions, { id: 'skill-actions-ungrouped', type: 'system' })\n\n            for (const [key, value] of Object.entries(SKILL)) {\n                const groupId = key\n                const groupName = coreModule.api.Utils.i18n(value.name)\n                const skillActions = skillActionsMap.get(groupId)\n\n                if (!skillActions) continue\n\n                // Create group data\n                const groupData = { id: groupId, name: groupName, type: 'system-derived' }\n\n                // Add group to HUD\n                await this.addGroup(groupData, { id: 'skill-actions-grouped', type: 'system' })\n\n                // Get actions\n                const actions = [...skillActions].map(([_, skillAction]) => {\n                    return skillAction\n                })\n\n                // Add actions to HUD\n                await this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build skills\n         * @private\n         */\n        async #buildSkills () {\n            const actionType = 'skill'\n\n            // Get skills\n            const skills = (this.actor)\n                ? Object.entries(this.actor.skills).filter(skill => !!skill[1].label && skill[1].label.length > 1)\n                : this.#getSharedSkills()\n\n            if (!skills) return\n\n            const coreSkills = []\n            const loreSkills = []\n\n            for (const skill of skills) {\n                if (!skill[1].lore) {\n                    coreSkills.push(skill)\n                } else {\n                    loreSkills.push(skill)\n                }\n            }\n\n            coreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\n            loreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\n\n            const skillsMap = new Map()\n\n            skillsMap.set('skills', new Map())\n\n            if (coreSkills.length > 0) {\n                skillsMap.set('core-skills', new Map())\n            }\n            if (loreSkills.length > 0) {\n                skillsMap.set('lore-skills', new Map())\n            }\n\n            for (const skill of [...coreSkills, ...loreSkills]) {\n                if (!skill[1].lore) {\n                    skillsMap.get('core-skills').set(skill[0], skill[1])\n                } else {\n                    skillsMap.get('lore-skills').set(skill[0], skill[1])\n                }\n            }\n\n            // Loop through inventory subcateogry ids\n            for (const [key, value] of skillsMap) {\n                const groupId = key\n                const skills = value\n\n                // Create group data\n                const groupData = { id: groupId, type: 'system' }\n\n                // Get actions\n                const actions = await Promise.all(\n                    [...skills].map(async ([skillId, skillData]) => {\n                        const id = skillId\n                        const label = coreModule.api.Utils.i18n(skillData.label) ?? coreModule.api.Utils.i18n(CONFIG.PF2E.skillList[skillId])\n                        const name = this.abbreviatedSkills ? SKILL_ABBREVIATION[skillData.slug] ?? label : label\n                        const fullName = label\n                        const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                        const listName = `${actionTypeName}${name}`\n                        const encodedValue = [actionType, id].join(this.delimiter)\n                        const cssClass = (this.actor && this.colorSkills && skillData.rank > 0) ? `tah-pf2e-skill-rank-${skillData.rank}` : ''\n                        const modifier = coreModule.api.Utils.getModifier(skillData.check?.mod)\n                        const info1 = this.actor ? { text: modifier } : ''\n                        const tooltipName = `${fullName}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n                        const tooltipData = {\n                            name: tooltipName,\n                            modifiers: skillData?.modifiers\n                        }\n                        const tooltip = (this.actor) ? await this.#getTooltip(actionType, tooltipData) : null\n\n                        return {\n                            id,\n                            name,\n                            fullName,\n                            listName,\n                            encodedValue,\n                            cssClass,\n                            info1,\n                            tooltip\n                        }\n                    })\n                )\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Get shared skills between all actors\n         * @returns {object}\n         */\n        #getSharedSkills () {\n            if (!this.actors) return\n            const allSkillSets = this.actors.map(actor => Object.entries(actor.skills).filter(skill => !!skill[1].label && skill[1].label.length > 1))\n            const minSkillSetSize = Math.min(...allSkillSets.map(skillSet => skillSet.length))\n            const smallestSkillSet = allSkillSets.find(skillSet => skillSet.length === minSkillSetSize)\n            return smallestSkillSet.filter(smallestSkill => allSkillSets.every(skillSet => skillSet.some(skill => skill[0] === smallestSkill[0])))\n        }\n\n        /**\n         * Build spells\n         * @private\n         */\n        async #buildSpells () {\n            const actionType = 'spell'\n\n            // Create parent group data\n            const parentGroupData = { id: 'spells', type: 'system' }\n\n            const spellcastingEntries = [...this.items].filter(item => item[1].type === 'spellcastingEntry')\n\n            for (const spellcastingEntry of spellcastingEntries) {\n                const spellbookGroupId = `spells+${spellcastingEntry[1].name.slugify({ replacement: '-', strict: true })}`\n                const spellbookGroupName = spellcastingEntry[1].name\n                const spellbookInfo1 = this.#getSpellDcInfo(spellcastingEntry[1])\n\n                // Create book group data\n                const bookGroupData = {\n                    id: spellbookGroupId,\n                    name: spellbookGroupName,\n                    type: 'system-derived',\n                    info1: spellbookInfo1\n                }\n\n                // Add group to action list\n                await this.addGroup(bookGroupData, parentGroupData)\n\n                // Add spell slot info to group\n                this.addGroupInfo(bookGroupData)\n\n                const spellInfo = await spellcastingEntry[1].getSheetData()\n                const activeLevels = spellInfo.groups.filter(level => level.active.length > 0)\n\n                for (const level of Object.entries(activeLevels)) {\n                    const spellLevel = level[1].id\n                    const levelGroupId = `${spellbookGroupId}+${spellLevel}`\n                    const levelGroupName = String(coreModule.api.Utils.i18n(level[1].label))\n\n                    // Create level group data\n                    const levelGroupData = {\n                        id: levelGroupId,\n                        name: levelGroupName,\n                        type: 'system-derived'\n                    }\n\n                    // Add group to action list\n                    await this.addGroup(levelGroupData, bookGroupData)\n\n                    await this.#addSpellSlotInfo(bookGroupData, levelGroupData, level, spellInfo)\n\n                    // Get available spells\n                    const activeSpells = level[1].active\n                        .filter(activeSpell => activeSpell && !activeSpell.expended)\n                        .map(spell => spell.spell)\n\n                    const spells = new Map(activeSpells.map(spell => [spell.id, spell]))\n\n                    // Get actions\n                    const actions = await Promise.all(\n                        [...spells].map(async ([_, itemData]) => {\n                            const id = this.#getActionId(itemData, actionType, spellLevel)\n                            const name = this.#getActionName(itemData)\n                            const listName = this.#getActionListName(itemData, actionType)\n                            const cssClass = this.#getActionCss(itemData)\n                            const encodedValue = this.#getActionEncodedValue(itemData, actionType, spellLevel)\n                            const icon1 = this.#getIcon1(itemData, actionType)\n                            const img = coreModule.api.Utils.getImage(itemData)\n                            const tooltipData = await this.#getTooltipData(itemData, actionType, spellLevel)\n                            const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                            return {\n                                id,\n                                name,\n                                listName,\n                                encodedValue,\n                                cssClass,\n                                img,\n                                icon1,\n                                tooltip\n                            }\n                        })\n                    )\n\n                    // Add actions to action list\n                    this.addActions(actions, levelGroupData)\n                }\n            }\n        }\n\n        /**\n         * Add spell slot info\n         * @param {object} bookGroupData  The book group data\n         * @param {object} levelGroupData The level group data\n         * @param {number} level          The level\n         * @param {object} spellInfo      The spell info\n         */\n        async #addSpellSlotInfo (\n            bookGroupData,\n            levelGroupData,\n            level,\n            spellInfo\n        ) {\n            const isCantrip = level[1].id === 'cantrips'\n            const isFlexible = spellInfo.isFlexible\n            const isFocusPool = spellInfo.isFocusPool\n            const isInnate = spellInfo.isInnate\n            const isPrepared = spellInfo.isPrepared\n\n            //  Exit if spells are cantrips\n            if (!isFocusPool && (isCantrip || isInnate)) return\n\n            if (!isFocusPool && (isPrepared && !isFlexible)) return\n\n            const actionType = 'spellSlot'\n            const focus = this.actor.system.resources.focus\n            const slots = level[1].uses\n            const spellSlot = (isFocusPool) ? 'focus' : `slot${level[1].id}`\n            const maxSlots = (spellSlot === 'focus') ? focus?.max : slots?.max\n            const availableSlots = (spellSlot === 'focus') ? focus?.value : slots?.value\n            const info1 = { text: (maxSlots >= 0) ? `${availableSlots ?? 0}/${maxSlots}` : '' }\n\n            levelGroupData.info = { info1 }\n\n            // Add group info to the group\n            this.addGroupInfo(levelGroupData)\n\n            const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE.spell)\n\n            // Get actions\n            const actions = [\n                {\n                    id: `${spellInfo.id}>${spellSlot}>slotIncrease`,\n                    name: '+',\n                    listName: `${actionTypeName}: ${bookGroupData.name}: ${levelGroupData.name}: +`,\n                    encodedValue: [actionType, `${spellInfo.id}>${spellSlot}>slotIncrease`].join(this.delimiter),\n                    cssClass: 'shrink'\n                },\n                {\n                    id: `${spellInfo.id}>${spellSlot}>slotDecrease`,\n                    name: '-',\n                    listName: `${actionTypeName}: ${bookGroupData.name}: ${levelGroupData.name}: -`,\n                    encodedValue: [actionType, `${spellInfo.id}>${spellSlot}>slotDecrease`].join(this.delimiter),\n                    cssClass: 'shrink'\n                }\n            ]\n\n            // Add actions to action list\n            this.addActions(actions, levelGroupData)\n        }\n\n        /**\n         * Build elemental blasts\n         */\n        async #buildElementalBlasts () {\n            const actionType = 'elementalBlast'\n\n            // Get elemental blasts\n            const blasts = new game.pf2e.ElementalBlast(this.actor)?.configs\n\n            // Exit if no strikes exist\n            if (!blasts.length) return\n\n            // Create parent group data\n            const parentGroupData = { id: 'strikes', type: 'system' }\n\n            for (const blast of blasts) {\n                let damageTypeActions = []\n                let strikeGroupData = null\n                const usageData = []\n\n                const strikeId = `${blast.item.id}-${blast.element}`\n                const strikeGroupId = `strikes+${strikeId}`\n                const strikeGroupName = (() => {\n                    let groupName = coreModule.api.Utils.i18n(blast.label)\n                    if (this.showStrikeTraits && this.showStrikeNames) {\n                        const blastTraits = blast.item.system.traits.value\n                        if (blastTraits.length > 0) {\n                            groupName += ' - '\n                            for (const trait of blastTraits) {\n                                groupName += '[' + trait + ']'\n                            }\n                        }\n                    }\n                    return groupName\n                })()\n                const strikeGroupListName = `${coreModule.api.Utils.i18n(ACTION_TYPE.strike)}: ${strikeGroupName} (${blast.item.id})`\n                const image = blast.img ?? blast.item?.img\n                const showTitle = this.showStrikeNames\n                const tooltipData = await this.#getTooltipData(blast, actionType)\n                const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                // Create group data\n                strikeGroupData = {\n                    id: strikeGroupId,\n                    name: strikeGroupName,\n                    listName: strikeGroupListName,\n                    type: 'system-derived',\n                    settings: { showTitle },\n                    tooltip\n                }\n                \n                if (this.showStrikeImages) {\n                    strikeGroupData.settings.image = image\n                }\n\n                // Add group to action list\n                this.addGroup(strikeGroupData, parentGroupData)\n\n                if (blast.damageTypes.length > 1) {\n                    // Get actions\n                    damageTypeActions = blast.damageTypes.map((damageType, index) => {\n                        const id = encodeURIComponent(`${blast.item.id}>${blast.element}>${damageType.value}>`)\n                        const fullName = damageType.label\n                        return {\n                            id,\n                            name: '',\n                            fullName,\n                            listName: `${strikeGroupListName}: ${fullName}`,\n                            encodedValue: ['elementalBlastDamageType', id].join(this.delimiter),\n                            cssClass: this.#getActionCss(damageType),\n                            icon1: this.#getActionIcon(damageType.icon, fullName)\n                        }\n                    })\n                }\n\n                const blastUsages = Object.entries(blast.maps) ?? []\n\n                for (const [key, blastUsage] of blastUsages) {\n                    const usage = key\n                    const usageGroupId = `${strikeGroupId}+${key}`\n                    const usageGroupName = (() => {\n                        if (usage !== 'melee' && blast.range.max > 0 && blast.range.label.length > 0) {\n                            return blast.range.label\n                        } else {\n                            return coreModule.api.Utils.i18n(STRIKE_USAGE[key].name)\n                        }\n                    })()\n                    const usageGroupListName = `${strikeGroupListName}: ${usageGroupName}`\n                    const usageGroupImage = (blastUsages.length > 1)\n                        ? (usage === 'melee')\n                            ? STRIKE_ICON.melee\n                            : STRIKE_ICON.thrown\n                        : ''\n                    const usageGroupShowTitle = !((usageGroupImage || blastUsages.length <= 1))\n                    const settings = { showTitle: usageGroupShowTitle, image: usageGroupImage }\n\n                    const usageGroupData = {\n                        id: usageGroupId,\n                        name: usageGroupName,\n                        listName: usageGroupListName,\n                        type: 'system-derived',\n                        settings\n                    }\n\n                    const rolls = Object.values(blastUsage)\n\n                    const actions = rolls.map((roll, index) => {\n                        const id = encodeURIComponent(`${blast.item.id}>${blast.element}>${index}>` + usage)\n                        const isMap = `${roll}`.includes(this.mapLabel)\n                        let modifier\n                        if (isMap) {\n                            modifier = `${roll}`.split(' ')[0]\n                        } else {\n                            modifier = `${roll}`.replace(coreModule.api.Utils.i18n('PF2E.WeaponStrikeLabel'), '').replace(' ', '')\n                        }\n                        const name = (this.calculateAttackPenalty) ? modifier : roll\n                        return {\n                            id,\n                            name,\n                            encodedValue: [actionType, id].join(this.delimiter),\n                            listName: `${usageGroupListName}: ${name}`\n                        }\n                    })\n\n                    // Get Damage\n                    const damageId = encodeURIComponent(`${blast.item.id}>${blast.element}>damage>${usage}`)\n                    const damageName = coreModule.api.Utils.i18n('PF2E.DamageLabel')\n                    actions.push({\n                        id: damageId,\n                        name: damageName,\n                        listName: `${usageGroupListName}: ${damageName}`,\n                        encodedValue: [actionType, damageId].join(this.delimiter),\n                        systemSelected: this.addDamageAndCritical\n                    })\n\n                    // Get Critical\n                    const criticalId = encodeURIComponent(`${blast.item.id}>${blast.element}>critical>${usage}`)\n                    const criticalName = coreModule.api.Utils.i18n('PF2E.CriticalDamageLabel')\n                    actions.push({\n                        id: criticalId,\n                        name: criticalName,\n                        listName: `${usageGroupListName}: ${criticalName}`,\n                        encodedValue: [actionType, criticalId].join(this.delimiter),\n                        systemSelected: this.addDamageAndCritical\n                    })\n\n                    usageData.push({ actions, usageGroupData })\n                }\n\n                if (this.splitStrikes) {\n                    this.addActions(damageTypeActions, strikeGroupData)\n                    for (const usage of usageData) {\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\n                        this.addActions(usage.actions, usage.usageGroupData)\n                    }\n                } else {\n                    this.addActions([...(usageData[0]?.actions || []), ...damageTypeActions], strikeGroupData)\n                    usageData.shift()\n                    for (const usage of usageData) {\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\n                        this.addActions(usage.actions, usage.usageGroupData)\n                    }\n                }\n            }\n        }\n\n        /**\n         * Build strikes\n         */\n        async #buildStrikes () {\n            const actionType = 'strike'\n\n            // Create parent group data\n            const parentGroupData = { id: 'strikes', type: 'system' }\n\n            // Get strikes\n            const strikes = this.actor.system.actions\n                .filter(action => (action.type === actionType && (action.item.system.quantity > 0 || this.actor.type === 'hazard' || this.actor.type === 'npc')))\n\n            // Exit if no strikes exist\n            if (!strikes) return\n\n            for (const strike of strikes) {\n                let auxiliaryActions = []\n                let versatileOptionActions = []\n                let strikeGroupData = null\n                const usageData = []\n\n                const strikeId = `${strike.item.id}-${strike.slug}`\n                const strikeGroupId = `strikes+${strikeId}`\n                const strikeGroupName = (() => {\n                    let groupName = strike.label\n                    if (this.showStrikeTraits && this.showStrikeNames) {\n                        let strikeTraits\n                        if (this.actor.type === 'character') {\n                            strikeTraits = strike.weaponTraits\n                        } else {\n                            strikeTraits = strike.traits\n                        }\n                        if (strikeTraits.length > 0) {\n                            groupName += ' - '\n                            for (const trait of strikeTraits) {\n                                groupName += '[' + trait.label + ']'\n                            }\n                        }\n                    }\n                    return groupName\n                })()\n                const strikeGroupListName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ${strike.label} (${strike.item.id})`\n                const image = strike.imageUrl ?? strike.item?.img\n                const showTitle = this.showStrikeNames\n                const tooltipData = await this.#getTooltipData(strike, actionType)\n                const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                // Create group data\n                strikeGroupData = {\n                    id: strikeGroupId,\n                    name: strikeGroupName,\n                    listName: strikeGroupListName,\n                    type: 'system-derived',\n                    settings: { showTitle },\n                    tooltip\n                }\n                if (this.showStrikeImages) strikeGroupData.settings.image = image\n                if (typeof strikeGroupData.settings.sort === 'undefined' && coreModule.api.Utils.getSetting('sortActions')) strikeGroupData.settings.sort = false\n\n                // Add group to action list\n                this.addGroup(strikeGroupData, parentGroupData)\n\n                if (strike.auxiliaryActions?.length && this.addAuxiliaryActions) {\n                    // Get actions\n                    auxiliaryActions = strike.auxiliaryActions.flatMap((auxiliaryAction, index) => {\n                        if (auxiliaryAction.purpose === 'Modular') {\n                            const modularOptions = strike.item.system.traits.toggles.modular.options\n                            const modularSelection = strike.item.system.traits.toggles.modular.selection\n                            return modularOptions.map(modularOption => {\n                                const id = encodeURIComponent(`${strike.item.id}>${strike.slug}>${index}>${modularOption}`)\n                                const name = coreModule.api.Utils.i18n(MODULAR_OPTION[modularOption])\n                                return {\n                                    id,\n                                    name,\n                                    listName: `${strikeGroupListName}: ${name}`,\n                                    encodedValue: ['strikeAuxiliaryAction', id].join(this.delimiter),\n                                    cssClass: this.#getActionCss({ selected: (modularOption === modularSelection) }),\n                                    icon1: this.#getActionIcon(auxiliaryAction.glyph)\n                                }\n                            })\n                        } else {\n                            const id = encodeURIComponent(`${strike.item.id}>${strike.slug}>${index}>`)\n                            const name = auxiliaryAction.label\n                            return {\n                                id,\n                                name,\n                                listName: `${strikeGroupListName}: ${name}`,\n                                encodedValue: ['strikeAuxiliaryAction', id].join(this.delimiter),\n                                icon1: this.#getActionIcon(auxiliaryAction.glyph),\n                                info: this.#getItemInfo(auxiliaryAction)\n                            }\n                        }\n                    })\n                }\n                if (strike.ready) {\n                    if (strike.versatileOptions?.length) {\n                        // Get actions\n                        versatileOptionActions = strike.versatileOptions.map(versatileOption => {\n                            const encodedId = encodeURIComponent(`${strike.item.id}>${strike.slug}>${versatileOption.value}>`)\n                            const fullName = coreModule.api.Utils.i18n(versatileOption.label)\n                            return {\n                                id: encodedId,\n                                name: '',\n                                fullName,\n                                listName: `${strikeGroupListName}: ${fullName}`,\n                                encodedValue: ['versatileOption', encodedId].join(this.delimiter),\n                                cssClass: this.#getActionCss(versatileOption),\n                                icon1: this.#getActionIcon(versatileOption.glyph, fullName)\n                            }\n                        })\n                    }\n\n                    const strikeUsages = (strike.altUsages) ? [strike, ...strike.altUsages] : [strike]\n\n                    for (const strikeUsage of strikeUsages) {\n                        const glyph = strike.glyph\n                        const encodedUsage = `${strikeUsage.item.isMelee}_${strikeUsage.item.isThrown}_${strikeUsage.item.isRanged}`\n                        let usage\n                        switch (encodedUsage) {\n                        case 'true_false_false':\n                            usage = 'melee'\n                            break\n                        case 'false_true_true':\n                            usage = 'thrown'\n                            break\n                        case 'false_false_true':\n                            usage = 'ranged'\n                            break\n                        }\n                        const usageGroupId = `${strikeGroupId}+${usage}`\n                        const usageGroupName = (strikeUsage.attackRollType)\n                            ? coreModule.api.Utils.i18n(strikeUsage.attackRollType)\n                            : coreModule.api.Utils.i18n(STRIKE_USAGE[usage].name)\n                        const usageGroupListName = `${strikeGroupListName}: ${usageGroupName}`\n                        const usageGroupIcon = (usage !== 'thrown' && glyph)\n                            ? `<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>${glyph}</span>`\n                            : STRIKE_ICON[usage]\n                        const usageGroupImage = (strikeUsages.length > 1) ? STRIKE_ICON[usage] : ''\n                        const usageGroupShowTitle = !((usageGroupImage || strikeUsages.length <= 1))\n                        const settings = { showTitle: usageGroupShowTitle, image: usageGroupImage }\n\n                        const usageGroupData = {\n                            id: usageGroupId,\n                            name: usageGroupName,\n                            listName: usageGroupListName,\n                            icon: usageGroupIcon,\n                            type: 'system-derived',\n                            settings\n                        }\n\n                        if (typeof usageGroupData.settings.sort === 'undefined' && coreModule.api.Utils.getSetting('sortActions')) {\n                            usageGroupData.settings.sort = false\n                        }\n\n                        const actions = strikeUsage.variants.map((variant, index) => {\n                            const id = encodeURIComponent(`${strike.item.id}>${strike.slug}>${index}>` + usage)\n                            const isMap = variant.label.includes(this.mapLabel)\n                            const modifier = (isMap)\n                                ? variant.label.split(' ')[0]\n                                : variant.label.replace(coreModule.api.Utils.i18n('PF2E.WeaponStrikeLabel'), '').replace(' ', '')\n                            const name = (this.calculateAttackPenalty) ? modifier : variant.label\n                            return {\n                                id,\n                                name,\n                                encodedValue: [actionType, id].join(this.delimiter),\n                                listName: `${usageGroupListName}: ${name}`\n                            }\n                        })\n\n                        // Get Damage\n                        const damageId = encodeURIComponent(`${strike.item.id}>${strike.slug}>damage>${usage}`)\n                        const damageName = coreModule.api.Utils.i18n('PF2E.DamageLabel')\n                        actions.push({\n                            id: damageId,\n                            name: damageName,\n                            listName: `${usageGroupListName}: ${damageName}`,\n                            encodedValue: [actionType, damageId].join(this.delimiter),\n                            systemSelected: this.addDamageAndCritical\n                        })\n\n                        // Get Critical\n                        const criticalId = encodeURIComponent(`${strike.item.id}>${strike.slug}>critical>${usage}`)\n                        const criticalName = coreModule.api.Utils.i18n('PF2E.CriticalDamageLabel')\n                        actions.push({\n                            id: criticalId,\n                            name: criticalName,\n                            listName: `${usageGroupListName}: ${criticalName}`,\n                            encodedValue: [actionType, criticalId].join(this.delimiter),\n                            systemSelected: this.addDamageAndCritical\n                        })\n\n                        // Get Ammo\n                        if (strikeUsage.selectedAmmoId && !strikeUsage.ammunition) {\n                            const item = this.actor.items.get(strikeUsage.selectedAmmoId)\n\n                            if (!item) {\n                                const id = 'noAmmo'\n                                const name = coreModule.api.Utils.i18n('tokenActionHud.pf2e.noAmmo')\n                                actions.push({\n                                    id,\n                                    name,\n                                    listName: `${usageGroupListName}: ${name}`,\n                                    encodedValue: id\n                                })\n                            } else {\n                                const id = this.#getActionId(item)\n                                const name = this.#getActionName(item)\n                                actions.push({\n                                    id,\n                                    name,\n                                    listName: `${usageGroupListName}: ${name}`,\n                                    encodedValue: [actionType, id].join(this.delimiter)\n                                })\n                            }\n                        }\n\n                        usageData.push({ actions, usageGroupData })\n                    }\n                }\n\n                if (this.splitStrikes) {\n                    this.addActions([...versatileOptionActions, ...auxiliaryActions], strikeGroupData)\n                    for (const usage of usageData) {\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\n                        this.addActions(usage.actions, usage.usageGroupData)\n                    }\n                } else {\n                    this.addActions([...(usageData[0]?.actions || []), ...versatileOptionActions, ...auxiliaryActions], strikeGroupData)\n                    usageData.shift()\n                    for (const usage of usageData) {\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\n                        this.addActions(usage.actions, usage.usageGroupData)\n                    }\n                }\n            }\n        }\n\n        /**\n         * Build toggles\n         */\n        #buildToggles () {\n            const actionType = 'toggle'\n\n            // Get toggles\n            const toggles = Object.values(this.actor.synthetics.toggles).flatMap(domain => Object.values(domain))\n\n            // Exit if no toggles exist\n            if (!toggles.length) return\n\n            const togglesWithoutSuboptions = toggles.filter(toggle => toggle.suboptions.length === 0)\n            const togglesWithSuboptions = toggles.filter(toggle => toggle.suboptions.length !== 0)\n\n            // Create group data\n            const groupData = { id: 'toggles', type: 'system' }\n\n            // Get actions\n            const actions = togglesWithoutSuboptions.map(toggle => {\n                const id = encodeURIComponent(`${toggle.domain}>${toggle.option}>${toggle.itemId}>>`)\n                const name = coreModule.api.Utils.i18n(toggle.label)\n                const encodedValue = [actionType, id].join(this.delimiter)\n                const active = (toggle.checked) ? ' active' : ''\n                const cssClass = `toggle${active}`\n\n                return { id, encodedValue, name, cssClass }\n            })\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n\n            for (const toggle of togglesWithSuboptions) {\n                const id = [toggle.domain, toggle.option].join('.')\n                const subgroupName = coreModule.api.Utils.i18n(toggle.label)\n                const subgroupListName = `${ACTION_TYPE.toggle}: ${subgroupName}`\n                const subgroupData = {\n                    id,\n                    name: subgroupName,\n                    listName: subgroupListName,\n                    type: 'system-derived'\n                }\n\n                this.addGroup(subgroupData, groupData)\n\n                // Get actions\n                const actions = toggle.suboptions.map(suboption => {\n                    const id = encodeURIComponent(`${toggle.domain}>${toggle.option}>${toggle.itemId}>${suboption.value}`)\n                    const name = coreModule.api.Utils.i18n(suboption.label)\n                    const selected = suboption.selected && toggle.enabled && toggle.checked\n\n                    return {\n                        id,\n                        name,\n                        listName: `${subgroupListName}: ${name}`,\n                        encodedValue: ['toggle', id].join(this.delimiter),\n                        cssClass: this.#getActionCss({ selected })\n                    }\n                })\n\n                // Add actions to action list\n                this.addActions(actions, subgroupData)\n            }\n        }\n\n        #getActionId (entity, actionType, spellLevel) {\n            return (actionType === 'spell') ? `${entity.id ?? entity._id}-${spellLevel}` : entity.id ?? entity._id\n        }\n\n        #getActionName (entity) {\n            return entity?.name ?? entity?.label ?? ''\n        }\n\n        #getActionListName (entity, actionType) {\n            const name = this.#getActionName(entity)\n            const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n            return entity.listName ?? `${actionTypeName}${name}`\n        }\n\n        #getActionCss (entity) {\n            if (Object.hasOwn(entity, 'disabled')) {\n                const active = (!entity.disabled) ? ' active' : ''\n                return `toggle${active}`\n            }\n            if (Object.hasOwn(entity, 'selected')) {\n                const active = (entity.selected) ? ' active' : ''\n                return `toggle${active}`\n            }\n        }\n\n        #getActionEncodedValue (entity, actionType, spellLevel) {\n            const spellcastingId = entity?.spellcasting?.id\n            const encodedId = (actionType === 'spell') ? `${spellcastingId}>${spellLevel}>${entity.id ?? entity._id}` : this.#getActionId(entity, actionType, spellLevel)\n            return [actionType, encodedId].join(this.delimiter)\n        }\n\n        #getIcon1 (entity, actionType) {\n            const actions = entity.system?.actions\n            const actionTypes = ['free', 'reaction', 'passive']\n            const actionTypeValue = entity.system?.actionType?.value\n            const actionsCost = (actions) ? parseInt((actions || {}).value, 10) : null\n            const timeValue = entity.system?.time?.value\n            const actionIcon = entity.actionIcon\n            const iconType = (actionType === 'spell') ? timeValue : (actionTypes.includes(actionTypeValue)) ? actionTypeValue : actionsCost ?? actionIcon\n            const name = this.#getActionName(entity)\n            return this.#getActionIcon(iconType, name)\n        }\n\n        /**\n         * Get spell DC info\n         * @private\n         * @param {object} spellcastingEntry The spellcasting entry\n         * @returns {string}                 The spell DC info\n         */\n        #getSpellDcInfo (spellcastingEntry) {\n            const statistic = spellcastingEntry.statistic\n            const spellDc = typeof statistic.dc === 'function'\n                ? statistic.dc().value\n                : statistic.dc.value\n            const spellAttackModifier = statistic.check.mod\n            const spellAttackBonus = spellAttackModifier >= 0\n                ? `${coreModule.api.Utils.i18n('tokenActionHud.pf2e.atk')} +${spellAttackModifier}`\n                : `${coreModule.api.Utils.i18n('tokenActionHud.pf2e.atk')} ${spellAttackModifier}`\n            const spellDcInfo = `${coreModule.api.Utils.i18n('tokenActionHud.pf2e.dc')}${spellDc}`\n            return `${spellAttackBonus} ${spellDcInfo}`\n        }\n\n        /**\n         * Get actors\n         * @private\n         * @returns {object}\n         */\n        #getActors () {\n            const allowedTypes = ['character', 'npc']\n            const actors = canvas.tokens.controlled.map(token => token.actor)\n            if (actors.every(actor => allowedTypes.includes(actor.type))) { return actors }\n        }\n\n        /**\n         * Is equipped item\n         * @private\n         * @param {object} item\n         * @returns {boolean}\n         */\n        #isEquippedItem (item) {\n            const carryTypes = ['held', 'worn']\n            const carryType = item.system.equipped?.carryType\n\n            if (this.addUnequippedItems) return true\n            if (carryTypes.includes(carryType) && !item.system.containerId?.value?.length) return true\n            return false\n        }\n\n        #isAddItem (groupType, item) {\n            if (item.system.equipped?.carryType !== 'stowed') return true\n            return this.#isAddStowedItem(groupType, item)\n        }\n\n        /**\n         * Is add stowed item\n         * @private\n         * @param {string} groupType The group type: container or nonContainer\n         * @param {object} item      The item\n         * @returns {boolean}        Whether the stowed item should be added to the group\n         */\n        #isAddStowedItem (groupType, item) {\n            if (item.system.equipped?.carryType !== 'stowed') return true\n            if (this.addStowedItems === 'both') return true\n            if (groupType === 'container' && this.addStowedItems === 'containers') return true\n            if (groupType === 'nonContainer' && this.addStowedItems === 'nonContainers') return true\n            return false\n        }\n\n        /**\n         * Get item info\n         * @private\n         * @param {object} item\n         * @returns {object}\n         */\n        #getItemInfo (item) {\n            const quantityData = this.#getQuantityData(item) ?? ''\n            return {\n                info1: { text: quantityData }\n            }\n        }\n\n        /**\n         * Get quantity\n         * @private\n         * @param {object} item\n         * @returns {string}\n         */\n        #getQuantityData (item) {\n            const quantity = item?.system?.quantity?.value\n            return (quantity > 1) ? quantity : ''\n        }\n\n        /**\n         * Get action icon\n         * @private\n         * @param {object} action\n         * @returns {string}\n         */\n        #getActionIcon (action, title = '') {\n            if (DAMAGE_TYPE_ICONS[action]) {\n                return `<i class=\"${ACTION_ICON[action]}\" data-tooltip=\"${title}\"></i>`\n            }\n            return ACTION_ICON[action]\n        }\n\n        /**\n         * Get carry type icon\n         * @private\n         * @param {object} itemData The item data\n         * @returns {string}\n         */\n        #getCarryTypeIcon (itemData) {\n            let carryType = ''\n            switch (itemData?.carryType) {\n            case 'held':\n                if (itemData?.handsHeld === 2) {\n                    carryType = 'held2'\n                } else {\n                    carryType = 'held1'\n                }\n                break\n            default:\n                carryType = itemData?.carryType\n                break\n            }\n            const tooltip = coreModule.api.Utils.i18n(CARRY_TYPE_ICON[carryType]?.tooltip) ?? ''\n            return CARRY_TYPE_ICON[carryType]?.icon.replace('placeholder', tooltip) ?? ''\n        }\n\n        /**\n         * Get tooltip data\n         * @param {object} entity     The entity\n         * @param {string} actionType The action type\n         * @returns {Promise<object>} The tooltip data\n         */\n        async #getTooltipData (entity, actionType, spellRank = null) {\n            if (this.tooltipsSetting === 'none' || !entity) return ''\n            else if (this.tooltipsSetting === 'nameOnly') return entity.name ?? ''\n\n            const itemActionTypes = ['elementalBlast', 'strike']\n\n            let chatData\n\n            if (itemActionTypes.includes(actionType)) {\n                chatData = await entity.item.getChatData()\n            } else {\n                chatData = await entity.getChatData()\n            }\n\n            if (!chatData) return ''\n\n            switch (actionType) {\n            case 'item':\n                return {\n                    name: entity.name,\n                    description: chatData.description?.value,\n                    rarity: chatData.rarity,\n                    traits: chatData.traits,\n                    traits2: chatData.properties\n                }\n            case 'spell':\n            {\n                return {\n                    name: entity.name,\n                    description: chatData.description?.value,\n                    properties: chatData.properties,\n                    rarity: chatData.rarity,\n                    traits: chatData.traits,\n                    traitsAlt: chatData.spellTraits\n                }\n            }\n            case 'strike':\n                return {\n                    name: entity.label,\n                    descriptionLocalised: this.#getStrikeDescription(entity),\n                    modifiers: entity.modifiers,\n                    properties: chatData.properties?.filter(property => property !== 'PF2E.WeaponTypeMartial'),\n                    traits: entity.traits,\n                    traitsAlt: entity.weaponTraits\n                }\n            default:\n                return {\n                    name: actionType === 'elementalBlast' ? entity.item.name : entity.name,\n                    description: chatData.description?.value,\n                    properties: chatData.properties,\n                    rarity: chatData.rarity,\n                    traits: chatData.traits\n                }\n            }\n        }\n\n        /**\n         * Get tooltip\n         * @private\n         * @param {string} actionType  The action type\n         * @param {object} tooltipData The tooltip data\n         * @returns {Promise<string>}  The tooltip\n         */\n        async #getTooltip (actionType, tooltipData) {\n            if (this.tooltipsSetting === 'none') return ''\n\n            const name = coreModule.api.Utils.i18n(tooltipData.name)\n\n            if (this.tooltipsSetting === 'nameOnly') return name\n\n            if (typeof tooltipData === 'string') return tooltipData\n\n            const nameHtml = `<h3>${name}</h3>`\n\n            const description = coreModule.api.Utils.i18n(tooltipData?.description ?? tooltipData?.descriptionLocalised ?? '')\n\n            const rarityHtml = tooltipData?.rarity\n                ? `<span class=\"tag ${tooltipData.rarity.name}\">${coreModule.api.Utils.i18n(tooltipData.rarity.label)}</span>`\n                : ''\n\n            const propertiesHtml = tooltipData?.properties\n                ? `<div class=\"tah-properties\">${tooltipData.properties.map(property => `<span class=\"tah-property\">${coreModule.api.Utils.i18n(property)}</span>`).join('')}</div>`\n                : ''\n\n            const traitsHtml = tooltipData?.traits\n                ? tooltipData.traits.map(trait => `<span class=\"tag\">${coreModule.api.Utils.i18n(trait.label)}</span>`).join('')\n                : ''\n\n            const traits2Html = tooltipData?.traits2\n                ? tooltipData.traits2.map(trait => `<span class=\"tag tag_secondary\">${coreModule.api.Utils.i18n(trait.label ?? trait)}</span>`).join('')\n                : ''\n\n            const traitsAltHtml = tooltipData?.traitsAlt\n                ? tooltipData.traitsAlt.map(trait => `<span class=\"tag tag_alt\">${coreModule.api.Utils.i18n(trait.label)}</span>`).join('')\n                : ''\n\n            const modifiersHtml = tooltipData?.modifiers\n                ? `<div class=\"tags\">${tooltipData.modifiers.filter(modifier => modifier.enabled).map(modifier => {\n                    const label = coreModule.api.Utils.i18n(modifier.label)\n                    const sign = modifier.modifier >= 0 ? '+' : ''\n                    const mod = `${sign}${modifier.modifier ?? ''}`\n                    return `<span class=\"tag tag_transparent\">${label} ${mod}</span>`\n                }).join('')}</div>`\n                : ''\n\n            const tagsJoined = [rarityHtml, traitsHtml, traits2Html, traitsAltHtml].join('')\n\n            const tagsHtml = (tagsJoined) ? `<div class=\"tags\">${tagsJoined}</div>` : ''\n\n            const headerTags = (tagsHtml || modifiersHtml) ? `<div class=\"tah-tags-wrapper\">${tagsHtml}${modifiersHtml}</div>` : ''\n\n            if (!description && !tagsHtml && !modifiersHtml) return name\n\n            const tooltipHtml = `<div>${nameHtml}${headerTags}${description}${propertiesHtml}</div>`\n\n            return await TextEditor.enrichHTML(tooltipHtml, { async: true })\n        }\n\n        /**\n         * Get strike description\n         * @private\n         * @param {object} strike The strike data\n         * @returns {string}      The strike description\n         */\n        #getStrikeDescription (strike) {\n            const description = (strike?.description) ? `<p>${coreModule.api.Utils.i18n(strike?.description)}</p>` : ''\n            const criticalSuccess = (strike?.criticalSuccess) ? `<hr><h4>${coreModule.api.Utils.i18n('PF2E.Check.Result.Degree.Check.criticalSuccess')}</h4><p>${coreModule.api.Utils.i18n(strike?.criticalSuccess)}</p>` : ''\n            const success = (strike?.success) ? `<h4>${coreModule.api.Utils.i18n('PF2E.Check.Result.Degree.Check.success')}</h4><p>${coreModule.api.Utils.i18n(strike?.success)}</p>` : ''\n            return `${description}${criticalSuccess}${success}`\n        }\n    }\n})\n","import { GROUP } from './constants.js'\n\n/**\n * Default layout and groups\n */\nexport let DEFAULTS = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    const groups = GROUP\n    Object.values(groups).forEach(group => {\n        group.name = coreModule.api.Utils.i18n(group.name)\n        group.listName = `Group: ${coreModule.api.Utils.i18n(group.listName ?? group.name)}`\n    })\n    const groupsArray = Object.values(groups)\n    DEFAULTS = {\n        layout: [\n            {\n                nestId: 'attack',\n                id: 'attack',\n                name: coreModule.api.Utils.i18n('abfalter.attack'),\n                groups: [\n                    { ...groups.attack, nestId: 'attack_attack' }\n                ]\n            },\n            {\n                nestId: 'strikes',\n                id: 'strikes',\n                name: 'strikes',//coreModule.api.Utils.i18n('PF2E.StrikesLabel'),\n                groups: [\n                    { ...groups.toggles, nestId: 'strikes_toggles' },\n                    { ...groups.strikes, nestId: 'strikes_strikes' }\n                ],\n                settings: { customWidth: 500 }\n            },\n            /*{\n                nestId: 'actions',\n                id: 'actions',\n                name: coreModule.api.Utils.i18n('PF2E.ActionsActionsHeader'),\n                groups: [\n                    { ...groups.actions, nestId: 'actions_actions' },\n                    { ...groups.reactions, nestId: 'actions_reactions' },\n                    { ...groups.freeActions, nestId: 'actions_free-actions' },\n                    { ...groups.passives, nestId: 'actions_passives' }\n                ]\n            },*/\n            {\n                nestId: 'inventory',\n                id: 'inventory',\n                name: coreModule.api.Utils.i18n('abfalter.inventory'),\n                groups: [\n                    { ...groups.weapons, nestId: 'inventory_weapons' },\n                    { ...groups.shields, nestId: 'inventory_shields' },\n                    { ...groups.armor, nestId: 'inventory_armor' },\n                    { ...groups.equipment, nestId: 'inventory_equipment' },\n                    { ...groups.consumables, nestId: 'inventory_consumables' },\n                    { ...groups.containers, nestId: 'inventory_containers' },\n                    { ...groups.treasure, nestId: 'inventory_treasure' }\n                ]\n            },\n            /*{\n                nestId: 'feats',\n                id: 'feats',\n                name: coreModule.api.Utils.i18n('PF2E.Item.Feat.Plural'),\n                groups: [\n                    { ...groups.ancestryFeatures, nestId: 'feats_ancestry-features' },\n                    { ...groups.classFeatures, nestId: 'feats_class-features' },\n                    { ...groups.ancestryFeats, nestId: 'feats_ancestry-feats' },\n                    { ...groups.classFeats, nestId: 'feats_class-feats' },\n                    { ...groups.skillFeats, nestId: 'feats_skill-feats' },\n                    { ...groups.generalFeats, nestId: 'feats_general-feats' },\n                    { ...groups.bonusFeats, nestId: 'feats_bonus-feats' }\n                ]\n            },*/\n            {\n                nestId: 'spells',\n                id: 'spells',\n                name: coreModule.api.Utils.i18n('PF2E.Item.Spell.Plural'),\n                groups: [\n                    { ...groups.spells, nestId: 'spells_spells' }\n                ]\n            },\n            {\n                nestId: 'attributes',\n                id: 'attributes',\n                name: coreModule.api.Utils.i18n('tokenActionHud.pf2e.attributes'),\n                groups: [\n                    { ...groups.heroPoints, nestId: 'attributes_hero-points' },\n                    { ...groups.mythicPoints, nestId: 'attributes_mythic-points' },\n                    { ...groups.initiative, nestId: 'attributes_initiative' },\n                    { ...groups.perceptionCheck, nestId: 'attributes_perception-check' },\n                    { ...groups.saves, nestId: 'attributes_saves' }\n                ]\n            },\n            {\n                nestId: 'abilities',\n                id: 'abilities',\n                name: coreModule.api.Utils.i18n('abfalter.ability'),\n                groups: [\n                    { ...groups.coreSkills, nestId: 'abilities_core-skills' },\n                    { ...groups.loreSkills, nestId: 'abilities_lore-skills' }\n                ]\n            },\n            {\n                nestId: 'effects',\n                id: 'effects',\n                name: coreModule.api.Utils.i18n('abfalter.effects'),\n                groups: [\n                    { ...groups.conditions, nestId: 'effects_conditions' },\n                    { ...groups.socialConditions, nestId: 'effects_social-conditions' },\n                    { ...groups.otherConditions, nestId: 'effects_other-conditions' },\n                    { ...groups.effects, nestId: 'effects_effects' }\n                ]\n            },\n            {\n                nestId: 'utility',\n                id: 'utility',\n                name: coreModule.api.Utils.i18n('tokenActionHud.utility'),\n                groups: [\n                    { ...groups.combat, nestId: 'utility_combat' },\n                    { ...groups.token, nestId: 'utility_token' },\n                    { ...groups.recoveryCheck, nestId: 'utility_recovery-check' },\n                    { ...groups.rests, nestId: 'utility_rests' },\n                    { ...groups.utility, nestId: 'utility_utility' }\n                ]\n            }\n        ],\n        groups: groupsArray\n    }\n})","export let RollHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\n     */\n    RollHandler = class RollHandler extends coreModule.api.RollHandler {\n\n        //TODO\n        //Might change/add/modify things here\n\n        /**\n         * Handle action click\n         * Called by Token Action HUD Core when an action is left or right-clicked\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionClick (event, encodedValue) {\n            const [actionTypeId, actionId] = encodedValue.split('|')\n\n            const renderable = ['item']\n\n            if (renderable.includes(actionTypeId) && this.isRenderItem()) {\n                return this.doRenderItem(this.actor, actionId)\n            }\n\n            const knownCharacters = ['character']\n\n            // If single actor is selected\n            if (this.actor) {\n                await this.#handleAction(event, this.actor, this.token, actionTypeId, actionId)\n                return\n            }\n\n            const controlledTokens = canvas.tokens.controlled\n                .filter((token) => knownCharacters.includes(token.actor?.type))\n\n            // If multiple actors are selected\n            for (const token of controlledTokens) {\n                const actor = token.actor\n                await this.#handleAction(event, actor, token, actionTypeId, actionId)\n            }\n        }\n\n        /**\n         * Handle action hover\n         * Called by Token Action HUD Core when an action is hovered on or off\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionHover (event, encodedValue) {}\n\n        /**\n         * Handle group click\n         * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\n         * @override\n         * @param {object} event The event\n         * @param {object} group The group\n         */\n        async handleGroupClick (event, group) {}\n\n        /**\n         * Handle action\n         * @private\n         * @param {object} event        The event\n         * @param {object} actor        The actor\n         * @param {object} token        The token\n         * @param {string} actionTypeId The action type id\n         * @param {string} actionId     The actionId\n         */\n        async #handleAction (event, actor, token, actionTypeId, actionId) {\n            switch (actionTypeId) {\n            case 'item':\n                this.#handleItemAction(event, actor, actionId)\n                break\n            case 'utility':\n                this.#handleUtilityAction(token, actionId)\n                break\n            case '':\n                \n                break\n            }\n        }\n\n        /**\n         * Handle item action\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #handleItemAction (event, actor, actionId) {\n            const item = actor.items.get(actionId)\n            item.toChat(event)\n        }\n\n        /**\n         * Handle utility action\n         * @private\n         * @param {object} token    The token\n         * @param {string} actionId The action id\n         */\n        async #handleUtilityAction (token, actionId) {\n            switch (actionId) {\n            case 'endTurn':\n                if (game.combat?.current?.tokenId === token.id) {\n                    await game.combat?.nextTurn()\n                }\n                break\n            }\n        }\n    }\n})\n","import { MODULE } from './constants.js'\n\n/**\n * Register module settings\n * Called by Token Action HUD Core to register Token Action HUD system module settings\n * @param {function} coreUpdate Token Action HUD Core update function\n */\nexport function register (coreUpdate) {\n    /*game.settings.register(MODULE.ID, 'displayUnequipped', {\n        name: game.i18n.localize('tokenActionHud.template.settings.displayUnequipped.name'),\n        hint: game.i18n.localize('tokenActionHud.template.settings.displayUnequipped.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            coreUpdate(value)\n        }\n    })*/\n    //TODO\n    //Probably add things here\n}\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js'\nimport { RollHandler as Core } from './roll-handler.js'\nimport { MODULE, LOG_PREFIX } from './constants.js'\nimport { DEFAULTS } from './defaults.js'\nimport * as systemSettings from './settings.js'\n\nexport let SystemManager = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's SystemManager class\n     */\n    SystemManager = class SystemManager extends coreModule.api.SystemManager {\n        /**\n         * Returns an instance of the ActionHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {class} The ActionHandler instance\n         */\n        getActionHandler () {\n            console.log(\"DEV: returns actionhandler\")\n            return new ActionHandler()\n        }\n\n        /**\n         * Returns a list of roll handlers to Token Action HUD Core\n         * Used to populate the Roll Handler module setting choices\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The available roll handlers\n         */\n        getAvailableRollHandlers () {\n            const coreTitle = 'Core abfalter'\n            const choices = { core: coreTitle }\n            return choices\n        }\n\n        /**\n         * Returns an instance of the RollHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @param {string} rollHandlerId The roll handler ID\n         * @returns {class}              The RollHandler instance\n         */\n        getRollHandler (rollHandlerId) {\n            let rollHandler\n            switch (rollHandlerId) {\n            case 'core':\n            default:\n                rollHandler = new Core()\n                break\n            }\n            return rollHandler\n        }\n\n        /**\n         * Returns the default layout and groups to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @returns {object} The default layout and groups\n         */\n        async registerDefaults () {\n            //TODO\n            //Might add things here\n            return DEFAULTS\n        }\n\n        /**\n         * Register Token Action HUD system module settings\n         * Called by Token Action HUD Core\n         * @override\n         * @param {function} coreUpdate The Token Action HUD Core update function\n         */\n        registerSettings (coreUpdate) {\n            systemSettings.register(coreUpdate)\n        }\n\n        /**\n         * Returns styles to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The TAH system styles\n         */\n        registerStyles () {\n            //console.log(`${LOG_PREFIX}style registering`);\n            \n            //TODO\n            //Might change things here\n            return {\n                template: {\n                    class: 'tah-abflater-template-style', // The class to add to first DIV element\n                    file: 'tah-abfalter-style', // The file without the css extension\n                    moduleId: MODULE.ID, // The module ID\n                    name: 'Abfalter Template Style' // The name to display in the Token Action HUD Core 'Style' module setting\n                }\n            }\n        }\n    }\n})\n","import { SystemManager } from './system-manager.js'\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION, LOG_PREFIX } from './constants.js'\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n    console.log(`${LOG_PREFIX}init start`)\n    /**\n     * Return the SystemManager and requiredCoreModuleVersion to Token Action HUD Core\n     */\n    const module = game.modules.get(MODULE.ID)\n\n    console.log(game.modules)\n\n    /*if(core.version < REQUIRED_CORE_MODULE_VERSION)\n        throw new Error(`${LOG_PREFIX}Update ${CORE_MODULE.ID}. Minimum version needed is ${REQUIRED_CORE_MODULE_VERSION}`)*/\n\n    module.api = {\n        requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n        SystemManager\n    }\n    Hooks.call('tokenActionHudSystemReady', module)\n})\n"],"names":["LOG_PREFIX","MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","DAMAGE_TYPE_ICONS","axe","brain","bolt","droplet","fire","ghost","hammer","skull","snowflake","spider","sun","vial","ACTION_ICON","free","reaction","passive","A","D","T","F","R","ACTION_TYPE","attribute","condition","effect","initiative","item","save","ability","spell","strike","strikeAuxiliaryAction","toggle","utility","CARRY_TYPE_ICON","held1","icon","tooltip","held2","dropped","stowed","worn","MODULAR_OPTION","bludgeoning","piercing","slashing","SKILL_ABBREVIATION","acrobatics","arcana","athletics","crafting","deception","diplomacy","intimidation","medicine","nature","occultism","performance","perception","religion","society","stealth","survival","thievery","STRIKE_ICON","melee","thrown","STRIKE_USAGE","name","ranged","GROUP","attack","id","type","toggles","strikes","weapons","shields","armor","equipment","consumables","containers","treasure","ancestryFeatures","classFeatures","ancestryFeats","spells","perceptionCheck","coreSkills","loreSkills","effects","combat","token","recoveryCheck","rests","saves","abilities","SKILL_ACTION","l5pbgrj8SSNtRGs8","actionCost","skill","image","ZEWD4zcEDQwYhVT8","LXCy1iJddD95Z91s","xcrdOOiN0l6O1sIn","zn0HadZeoKDALxRu","Tu7LIRelQsiOuo1l","aDsYSdRqiC6qQIOQ","zUJ0UhuoFt5a7tiN","mNphXpAkmGsMadUv","U6WjxFPn4fUqIrfl","RZyfkw1DiqVy3JUC","sDUERv4E88G5BRPr","YWAvvDXpdW1fYPFo","nEwqNNWX6scLt4sc","T2QNEoRojMWEec4a","ooiO59Ch2QaebOmc","lkEcQQss16SIrVxM","RjfPFjqPrNve6eeh","yMTKMnaYSGtDz4wk","rCgGPEyXbzLFcio6","i95kcGLIQKOTsnv6","FlM3HvpnsZpCKawG","v3dlDjFlOmT5T2gC","k5nW4jGyXD0Oq9LR","VTg4t8kYTvXcHROq","QPsV0qi2zXm7syt6","Gj68YCVlDjc75iCP","dWcrojMk0d2WRPBq","BQTA7bL264189Xla","tbveXG4gaIoKnsWX","tikhJ2b6AMh7wQU7","LN67MgbGE8IHb2X0","PmHt7Gb5fCrlWWTr","yNry1xMZqdWHncbV","HSTkVuv0SjTNK3Xx","UKHPveLpG7hUs4D0","zjovbAeuLvyuWFKd","mkKko3CEBCyJVQw1","zkqh01BoXDVgydzo","TIlUkCzviYxdVk4E","Al5LYMMdeDcpC9Br","m4iM5r3TfvQs5Y2n","R03LRl2RBbsm6EcF","gRj7xUfcpUZQLrOC","SKILL","lore","ITEM_TYPE","advantage","groupId","disadvantage","elan","proficiency","spellPath","turnMaint","dailyMaint","incarnation","invocation","mentalPattern","psychicMatrix","maintPower","discipline","arsMagnus","martialArt","kiTechnique","kiSealCreature","armorHelmet","weapon","ammo","inventory","currency","class","ABILITY_TYPE","acrobatic","Utils","Hooks","once","async","coreModule","getSetting","key","defaultValue","value","game","settings","get","api","Logger","debug","setSetting","set","ActionHandler","actors","actorId","actorType","tokenId","items","groupIds","activationGroupIds","effectGroupIds","inventoryGroupIds","spellGroupIds","featureActions","inventoryActions","spellActions","mapLabel","i18n","replace","buildSystemActions","this","actor","getActors","includes","sortItemsByName","abbreviateSkills","addAuxiliaryActions","addDamageAndCritical","addStowedItems","addUnequippedItems","calculateAttackPenalty","colorSkills","showStrikeImages","showStrikeNames","showStrikeTraits","splitStrikes","buildCharacterActions","buildFamiliarActions","buildHazardActions","buildNpcActions","buildMultipleTokenActions","Promise","all","buildActions","buildCombat","buildConditions","buildEffects","buildFeats","buildHeroActions","buildPoints","buildInitiative","buildInventory","buildPerceptionCheck","buildRecoveryCheck","buildRests","buildSaves","buildSkillActions","buildSkills","buildSpells","buildStrikes","buildToggles","buildElementalBlasts","buildAttack","actionType","size","actionTypes","actionItems","Map","filter","_","itemData","system","actionsMap","suppressed","actionTypeValue","groupData","actions","map","getActionId","getActionName","listName","getActionListName","cssClass","getActionCss","encodedValue","join","delimiter","icon1","getIcon1","img","getImage","info","getItemInfo","tooltipData","getTooltipData","getTooltip","addActions","slug","modifier","getModifier","totalModifier","info1","text","combatTypes","endTurn","current","Object","entries","combatType","limitedConditions","activeConditions","conditions","pf2e","ConditionManager","conditionId","startsWith","conditionData","activeCondition","activeConditionId","attributeValue","attributes","max","isValued","description","sort","a","b","localeCompare","actionsTemp","reduce","acc","push","actionsOther","mythicEnabled","resources","mythicPoints","heroPoints","unidentified","user","isGM","_$","featTypes","ancestryfeature","classfeature","ancestry","general","bonus","featsMap","category","featType","modules","active","actionTypeName","heroActions","getFlag","remainingHeroPoints","length","format","nb","localize","heroActionActions","heroAction","uuid","uuidData","fromUuid","content","initiativeStatistic","statistic","fullName","abbreviatedSkills","modifiers","skills","skillData","label","getSharedSkills","skillActions","skillId","data","CONFIG","PF2E","skillList","check","mod","inventoryMap","hasQuantity","quantity","isEquippedItem","isAddItem","itemType","itemCategoryMap","categoryTypeMap","icon2","getCarryTypeIcon","has","parentGroupData","container","contents","addGroup","contentsMap","dyingValue","dying","every","saveData","actionMacros","packs","getIndex","skillActionsMap","actionMacro","skillAction","_id","actionName","getActionIcon","action","groupName","skillsMap","rank","allSkillSets","minSkillSetSize","Math","min","skillSet","find","smallestSkill","some","spellcastingEntries","spellcastingEntry","spellbookGroupId","slugify","replacement","strict","bookGroupData","getSpellDcInfo","addGroupInfo","spellInfo","getSheetData","activeLevels","groups","level","spellLevel","levelGroupData","String","addSpellSlotInfo","activeSpells","activeSpell","expended","getActionEncodedValue","isCantrip","isFlexible","isFocusPool","isInnate","isPrepared","focus","slots","uses","spellSlot","maxSlots","blasts","ElementalBlast","configs","blast","damageTypeActions","strikeGroupData","usageData","strikeGroupId","element","strikeGroupName","blastTraits","traits","trait","strikeGroupListName","showTitle","damageTypes","damageType","index","encodeURIComponent","blastUsages","maps","blastUsage","usage","usageGroupId","usageGroupName","range","usageGroupListName","usageGroupImage","usageGroupShowTitle","usageGroupData","values","roll","split","damageId","damageName","systemSelected","criticalId","criticalName","shift","auxiliaryActions","versatileOptionActions","strikeTraits","weaponTraits","imageUrl","flatMap","auxiliaryAction","purpose","modularOptions","modular","options","modularSelection","selection","modularOption","selected","glyph","ready","versatileOptions","versatileOption","encodedId","strikeUsages","altUsages","strikeUsage","isMelee","isThrown","isRanged","attackRollType","usageGroupIcon","variants","variant","selectedAmmoId","ammunition","synthetics","domain","togglesWithoutSuboptions","suboptions","togglesWithSuboptions","option","itemId","subgroupName","subgroupListName","subgroupData","suboption","enabled","checked","entity","hasOwn","disabled","spellcastingId","spellcasting","actionsCost","parseInt","timeValue","time","actionIcon","iconType","spellDc","dc","spellAttackModifier","allowedTypes","canvas","tokens","controlled","carryType","equipped","containerId","groupType","isAddStowedItem","getQuantityData","title","handsHeld","spellRank","tooltipsSetting","chatData","getChatData","rarity","traits2","properties","traitsAlt","spellTraits","descriptionLocalised","getStrikeDescription","property","nameHtml","rarityHtml","propertiesHtml","traitsHtml","traits2Html","traitsAltHtml","modifiersHtml","tagsJoined","tagsHtml","tooltipHtml","TextEditor","enrichHTML","criticalSuccess","success","DEFAULTS","forEach","group","groupsArray","layout","nestId","customWidth","socialConditions","otherConditions","RollHandler","register","coreUpdate","handleActionClick","event","actionTypeId","actionId","isRenderItem","doRenderItem","knownCharacters","handleAction","controlledTokens","handleActionHover","handleGroupClick","handleItemAction","handleUtilityAction","toChat","nextTurn","SystemManager","getActionHandler","console","log","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerDefaults","registerSettings","registerStyles","template","file","moduleId","on","module","requiredCoreModuleVersion","call"],"mappings":"AAAY,MAACA,EAAa,kBAKbC,EAAS,CAClBC,GAAI,gBAMKC,EAAc,CACvBD,GAAI,yBAMKE,EAA+B,MAK/BC,EAAoB,CAC7BC,IAAK,wBACLC,MAAO,0BACPC,KAAM,yBACN,YAAa,8BACbC,QAAS,4BACTC,KAAM,yBACNC,MAAO,0BACPC,OAAQ,2BACRC,MAAO,0BACPC,UAAW,8BACXC,OAAQ,2BACRC,IAAK,wBACLC,KAAM,yBACN,iBAAkB,oCAMTC,EAAc,CACvB,EAAG,+FACH,EAAG,+FACH,EAAG,+FACHC,KAAM,+FACNC,SAAU,+FACVC,QAAS,GACTC,EAAG,+FACHC,EAAG,+FACHC,EAAG,+FACHC,EAAG,+FACHC,EAAG,kGACArB,GAMMsB,EAAc,CAEvBC,UAAW,YACXC,UAAW,uBACXC,OAAQ,oBAIRC,WAAY,sBACZC,KAAM,iBACNC,KAAM,uBACNC,QAAS,mBAETC,MAAO,mBACPC,OAAQ,UACRC,sBAAuB,aACvBC,OAAQ,SACRC,QAAS,0BAMAC,EAAkB,CAC3BC,MAAO,CACHC,KAAM,8LACNC,QAAS,wBAEbC,MAAO,CACHF,KAAM,8LACNC,QAAS,wBAEbE,QAAS,CACLH,KAAM,qEACNC,QAAS,0BAEbG,OAAQ,CACJJ,KAAM,8DACNC,QAAS,yBAEbI,KAAM,CACFL,KAAM,iEACNC,QAAS,wBAOJK,EAAiB,CAC1BC,YAAa,wBACbC,SAAU,qBACVC,SAAU,sBAMDC,EAAqB,CAC9BC,WAAY,MACZC,OAAQ,MACRC,UAAW,MACXC,SAAU,MACVC,UAAW,MACXC,UAAW,MACXC,aAAc,MACdC,SAAU,MACVC,OAAQ,MACRC,UAAW,MACXC,YAAa,MACbC,WAAY,MACZC,SAAU,MACVC,QAAS,MACTC,QAAS,MACTC,SAAU,MACVC,SAAU,OAMDC,EAAc,CACvBC,MAAO,mCACPC,OAAQ,qCAMCC,EAAe,CACxBF,MAAO,CAAEG,KAAM,yBACfC,OAAQ,CAAED,KAAM,wBAChBF,OAAQ,CAAEE,KAAM,qBAMPE,EAAQ,CACjBC,OAAQ,CAAEC,GAAI,SAAUJ,KAAM,mBAAoBK,KAAM,UACxDC,QAAS,CAAEF,GAAI,UAAWJ,KAAM,oBAAqBK,KAAM,UAC3DE,QAAS,CAAEH,GAAI,UAAWJ,KAAM,oBAAqBK,KAAM,UAO3DG,QAAS,CAAEJ,GAAI,UAAWJ,KAAM,8BAA+BK,KAAM,UACrEI,QAAS,CAAEL,GAAI,UAAWJ,KAAM,8BAA+BK,KAAM,UACrEK,MAAO,CAAEN,GAAI,QAASJ,KAAM,4BAA6BK,KAAM,UAC/DM,UAAW,CAAEP,GAAI,YAAaJ,KAAM,gCAAiCK,KAAM,UAC3EO,YAAa,CAAER,GAAI,cAAeJ,KAAM,kCAAmCK,KAAM,UACjFQ,WAAY,CAAET,GAAI,aAAcJ,KAAM,iCAAkCK,KAAM,UAC9ES,SAAU,CAAEV,GAAI,WAAYJ,KAAM,+BAAgCK,KAAM,UACxEU,iBAAkB,CAAEX,GAAI,oBAAqBJ,KAAM,uDAAwDK,KAAM,UACjHW,cAAe,CAAEZ,GAAI,iBAAkBJ,KAAM,oDAAqDK,KAAM,UACxGY,cAAe,CAAEb,GAAI,iBAAkBJ,KAAM,+CAAgDK,KAAM,UAKnGa,OAAQ,CAAEd,GAAI,SAAUJ,KAAM,yBAA0BK,KAAM,UAG9DhD,WAAY,CAAE+C,GAAI,aAAcJ,KAAM,uBAAwBK,KAAM,UACpEc,gBAAiB,CAAEf,GAAI,mBAAoBJ,KAAM,uBAAwBK,KAAM,UAC/Ee,WAAY,CAAEhB,GAAI,cAAeJ,KAAM,wBAAyBK,KAAM,UACtEgB,WAAY,CAAEjB,GAAI,cAAeJ,KAAM,wBAAyBK,KAAM,UAItEiB,QAAS,CAAElB,GAAI,UAAWJ,KAAM,oBAAqBK,KAAM,UAC3DkB,OAAQ,CAAEnB,GAAI,SAAUJ,KAAM,wBAAyBK,KAAM,UAC7DmB,MAAO,CAAEpB,GAAI,QAASJ,KAAM,uBAAwBK,KAAM,UAC1DoB,cAAe,CAAErB,GAAI,iBAAkBJ,KAAM,+BAAgCK,KAAM,UACnFqB,MAAO,CAAEtB,GAAI,QAASJ,KAAM,4BAA6BK,KAAM,UAC/DsB,MAAO,CAAEvB,GAAI,QAASJ,KAAM,mBAAoBK,KAAM,UACtDxC,QAAS,CAAEuC,GAAI,UAAWJ,KAAM,yBAA0BK,KAAM,UAChEuB,UAAW,CAAExB,GAAG,YAAaJ,KAAM,oCAAqCK,KAAM,UAC9E,gBAAiB,CAAED,GAAG,gBAAiBJ,KAAM,oCAAqCK,KAAM,WAM/EwB,EAAe,CACxBC,iBAAkB,CAAE9B,KAAM,kDAAmD+B,WAAY,EAAGC,MAAO,WAAYC,MAAO,uDACtHC,iBAAkB,CAAElC,KAAM,qDAAsD+B,WAAY,EAAGC,MAAO,WAAYC,MAAO,wDACzH,mBAAoB,CAAEjC,KAAM,6BAA8BgC,MAAO,aAAcD,WAAY,EAAGE,MAAO,sDACrGE,iBAAkB,CAAEnC,KAAM,2BAA4BgC,MAAO,YAAaD,WAAY,EAAGE,MAAO,mCAChG,mBAAoB,CAAEjC,KAAM,4BAA6BgC,MAAO,eAAgBD,WAAY,UAAWE,MAAO,oDAC9GG,iBAAkB,CAAEpC,KAAM,qCAAsCgC,MAAO,SAAUD,WAAY,EAAGE,MAAO,gDACvGI,iBAAkB,CAAErC,KAAM,qCAAsCgC,MAAO,UAAWD,WAAY,EAAGE,MAAO,oEACxGK,iBAAkB,CAAEtC,KAAM,2BAA4BgC,MAAO,WAAYD,WAAY,UAAWE,MAAO,sDACvGM,iBAAkB,CAAEvC,KAAM,uDAAwDgC,MAAO,YAAaD,WAAY,EAAGE,MAAO,yDAC5HO,iBAAkB,CAAExC,KAAM,8CAA+CgC,MAAO,YAAaD,WAAY,EAAGE,MAAO,2CACnH,mBAAoB,CAAEjC,KAAM,4CAA6CgC,MAAO,YAAaD,WAAY,EAAGE,MAAO,iDACnHQ,iBAAkB,CAAEzC,KAAM,mCAAoCgC,MAAO,UAAWD,WAAY,UAAWE,MAAO,oDAC9GS,iBAAkB,CAAE1C,KAAM,qCAAsCgC,MAAO,SAAUD,WAAY,UAAWE,MAAO,uDAC/GU,iBAAkB,CAAE3C,KAAM,qCAAsCgC,MAAO,YAAaD,WAAY,UAAWE,MAAO,wDAClHW,iBAAkB,CAAE5C,KAAM,qCAAsCgC,MAAO,WAAYD,WAAY,UAAWE,MAAO,0EACjHY,iBAAkB,CAAE7C,KAAM,qCAAsCgC,MAAO,UAAWD,WAAY,UAAWE,MAAO,yDAChHa,iBAAkB,CAAE9C,KAAM,gCAAiCgC,MAAO,eAAgBD,WAAY,EAAGE,MAAO,oDACxGc,iBAAkB,CAAE/C,KAAM,mCAAoCgC,MAAO,WAAYD,WAAY,EAAGE,MAAO,oEACvGe,iBAAkB,CAAEhD,KAAM,4BAA6BgC,MAAO,YAAaD,WAAY,EAAGE,MAAO,yDACjG,mBAAoB,CAAEjC,KAAM,4BAA6BgC,MAAO,aAAcD,WAAY,EAAGE,MAAO,+DACpGgB,iBAAkB,CAAEjD,KAAM,4BAA6BgC,MAAO,YAAaD,WAAY,EAAGE,MAAO,+DACjGiB,iBAAkB,CAAElD,KAAM,2BAA4BgC,MAAO,YAAaD,WAAY,EAAGE,MAAO,wDAChGkB,iBAAkB,CAAEnD,KAAM,+BAAgCgC,MAAO,YAAaD,WAAY,EAAGE,MAAO,iDACpGmB,iBAAkB,CAAEpD,KAAM,uCAAwCgC,MAAO,YAAaD,WAAY,UAAWE,MAAO,gDACpHoB,iBAAkB,CAAErD,KAAM,6BAA8BgC,MAAO,YAAaD,WAAY,UAAWE,MAAO,8CAC1GqB,iBAAkB,CAAEtD,KAAM,0BAA2BgC,MAAO,UAAWD,WAAY,EAAGE,MAAO,iDAC7FsB,iBAAkB,CAAEvD,KAAM,8BAA+BgC,MAAO,YAAaD,WAAY,EAAGE,MAAO,iDACnGuB,iBAAkB,CAAExD,KAAM,iCAAkCgC,MAAO,YAAaD,WAAY,UAAWE,MAAO,oDAC9GwB,iBAAkB,CAAEzD,KAAM,yBAA0BgC,MAAO,YAAaD,WAAY,UAAWE,MAAO,yDACtGyB,iBAAkB,CAAE1D,KAAM,8BAA+BgC,MAAO,YAAaD,WAAY,EAAGE,MAAO,kDACnG,mBAAoB,CAAEjC,KAAM,sCAAuCgC,MAAO,YAAaD,WAAY,UAAWE,MAAO,0CACrH,mBAAoB,CAAEjC,KAAM,sCAAuCgC,MAAO,aAAcD,WAAY,EAAGE,MAAO,qDAC9G0B,iBAAkB,CAAE3D,KAAM,kCAAmCgC,MAAO,WAAYD,WAAY,EAAGE,MAAO,4CACtG2B,iBAAkB,CAAE5D,KAAM,6BAA8BgC,MAAO,cAAeD,WAAY,EAAGE,MAAO,qDACpG,mBAAoB,CAAEjC,KAAM,+BAAgCgC,MAAO,WAAYD,WAAY,EAAGE,MAAO,mDACrG4B,iBAAkB,CAAE7D,KAAM,4BAA6BgC,MAAO,WAAYD,WAAY,UAAWE,MAAO,mCACxG6B,iBAAkB,CAAE9D,KAAM,6BAA8BgC,MAAO,YAAaD,WAAY,EAAGE,MAAO,mDAClG8B,iBAAkB,CAAE/D,KAAM,0BAA2BgC,MAAO,aAAcD,WAAY,EAAGE,MAAO,6CAChG+B,iBAAkB,CAAEhE,KAAM,oCAAqCgC,MAAO,WAAYD,WAAY,UAAWE,MAAO,sDAChHgC,iBAAkB,CAAEjE,KAAM,iCAAkCgC,MAAO,aAAcD,WAAY,EAAGE,MAAO,0CACvGiC,iBAAkB,CAAElE,KAAM,2BAA4BgC,MAAO,YAAaD,WAAY,EAAGE,MAAO,iDAChGkC,iBAAkB,CAAEnE,KAAM,2BAA4BgC,MAAO,UAAWD,WAAY,EAAGE,MAAO,gDAC9FmC,iBAAkB,CAAEpE,KAAM,6BAA8BgC,MAAO,aAAcD,WAAY,UAAWE,MAAO,+CAC3GoC,iBAAkB,CAAErE,KAAM,2BAA4BgC,MAAO,WAAYD,WAAY,EAAGE,MAAO,iDAC/FqC,iBAAkB,CAAEtE,KAAM,6BAA8BgC,MAAO,UAAWD,WAAY,UAAWE,MAAO,qDACxGsC,iBAAkB,CAAEvE,KAAM,6BAA8BgC,MAAO,WAAYD,WAAY,UAAWE,MAAO,qDACzGuC,iBAAkB,CAAExE,KAAM,0BAA2BgC,MAAO,YAAaD,WAAY,EAAGE,MAAO,iDAC/FwC,iBAAkB,CAAEzE,KAAM,2BAA4BgC,MAAO,WAAYD,WAAY,UAAWE,MAAO,+CACvGyC,iBAAkB,CAAE1E,KAAM,kCAAmCgC,MAAO,WAAYD,WAAY,UAAWE,MAAO,sDAC9G0C,iBAAkB,CAAE3E,KAAM,iCAAkCgC,MAAO,WAAYD,WAAY,EAAGE,MAAO,gDACrG2C,iBAAkB,CAAE5E,KAAM,0BAA2BgC,MAAO,YAAaD,WAAY,EAAGE,MAAO,sDAC/F,mBAAoB,CAAEjC,KAAM,mCAAoCgC,MAAO,aAAcD,WAAY,EAAGE,MAAO,uDAMlG4C,EAAQ,CACjBlG,WAAY,CAAEqB,KAAM,wBACpBpB,OAAQ,CAAEoB,KAAM,oBAChBnB,UAAW,CAAEmB,KAAM,uBACnBlB,SAAU,CAAEkB,KAAM,sBAClBjB,UAAW,CAAEiB,KAAM,uBACnBhB,UAAW,CAAEgB,KAAM,uBACnBf,aAAc,CAAEe,KAAM,0BACtB8E,KAAM,CAAE9E,KAAM,kBACdd,SAAU,CAAEc,KAAM,sBAClBb,OAAQ,CAAEa,KAAM,oBAChBZ,UAAW,CAAEY,KAAM,uBACnBV,WAAY,CAAEU,KAAM,wBACpBX,YAAa,CAAEW,KAAM,yBACrBT,SAAU,CAAES,KAAM,sBAClBR,QAAS,CAAEQ,KAAM,qBACjBP,QAAS,CAAEO,KAAM,qBACjBN,SAAU,CAAEM,KAAM,sBAClBL,SAAU,CAAEK,KAAM,uBAMT+E,EAAY,CACrBC,UAAW,CAAEC,QAAS,aACtBC,aAAc,CAAED,QAAS,gBACzBE,KAAM,CAAEF,QAAS,QACjBG,YAAa,CAAEH,QAAS,eACxBxH,MAAO,CAAEwH,QAAS,SAClBI,UAAW,CAAEJ,QAAS,aACtBK,UAAW,CAAEL,QAAS,aACtBM,WAAY,CAAEN,QAAS,cACvBO,YAAa,CAAEP,QAAS,eACxBQ,WAAY,CAAER,QAAS,cACvBS,cAAe,CAAET,QAAS,iBAC1BU,cAAe,CAAEV,QAAS,iBAC1BW,WAAY,CAAEX,QAAS,cACvBY,WAAY,CAAEZ,QAAS,cACvBa,UAAW,CAAEb,QAAS,aACtBc,WAAY,CAAEd,QAAS,cACvBe,YAAa,CAAEf,QAAS,eACxBgB,eAAgB,CAAEhB,QAAS,kBAC3BvE,MAAO,CAAEuE,QAAS,SAClBiB,YAAa,CAAEjB,QAAS,eACxBkB,OAAQ,CAAElB,QAAS,UACnBmB,KAAM,CAAEnB,QAAS,QACjBoB,UAAW,CAAEpB,QAAS,aACtBqB,SAAU,CAAErB,QAAS,YACrBsB,MAAO,CAAEtB,QAAS,UAGTuB,EAAe,CACxBC,UAAW,CAAExB,QAAS,YACtBtG,WAAY,CAAEsG,QAAS,aC9TjB,IAACyB,EAAQ,KAEnBC,MAAMC,KAAK,8BAA8BC,MAAOC,IAI5CJ,EAAQ,MAAMA,MAOV,iBAAOK,CAAYC,EAAKC,EAAe,MACnC,IAAIC,EAAQD,GAAgB,KAC5B,IACIC,EAAQC,KAAKC,SAASC,IAAI9L,EAAOC,GAAIwL,EACrD,CAAc,MACEF,EAAWQ,IAAIC,OAAOC,MAAM,YAAYR,eAC3C,CACD,OAAOE,CACV,CAOD,uBAAaO,CAAYT,EAAKE,GAC1B,IACIA,QAAcC,KAAKC,SAASM,IAAInM,EAAOC,GAAIwL,EAAKE,GAChDJ,EAAWQ,IAAIC,OAAOC,MAAM,YAAYR,cAAgBE,KACxE,CAAc,MACEJ,EAAWQ,IAAIC,OAAOC,MAAM,YAAYR,eAC3C,CACJ,EACJ,IClCK,IAACW,EAAgB,KAE3BhB,MAAMC,KAAK,8BAA8BC,MAAOC,IAC5Ca,EAAgB,MAAMA,sBAAsBb,EAAWQ,IAAIK,cAEvDC,OAAS,KACTC,QAAU,KACVC,UAAY,KACZC,QAAU,KAGVC,MAAQ,KAGRC,SAAW,KACXC,mBAAqB,KACrBC,eAAiB,KACjBC,kBAAoB,KACpBC,cAAgB,KAGhBC,eAAiB,KACjBC,iBAAmB,KACnBC,aAAe,KAEfC,SAAW3B,EAAWQ,IAAIZ,MAAMgC,KAAK,6BAA6BC,QAAQ,aAAc,IAOxF,wBAAMC,CAAoBX,GAEtBY,KAAKjB,OAAWiB,KAAKC,MAA6B,CAACD,KAAKC,OAA1BD,MAAKE,IACnCF,KAAKf,UAAYe,KAAKC,OAAOzI,KAI7B,IAAIwI,KAAKf,WADW,CAAC,YAAa,WAAY,SAAU,OACrBkB,SAASH,KAAKf,WAAjD,CAGA,GAAIe,KAAKC,MAAO,CACZ,IAAId,EAAQa,KAAKC,MAAMd,MACvBA,EAAQlB,EAAWQ,IAAIZ,MAAMuC,gBAAgBjB,GAC7Ca,KAAKb,MAAQA,CAChB,CAGDa,KAAKK,iBAAmBxC,EAAMK,WAAW,oBACzC8B,KAAKM,oBAAsBzC,EAAMK,WAAW,uBAC5C8B,KAAKO,qBAAuB1C,EAAMK,WAAW,wBAC7C8B,KAAKQ,eAAiB3C,EAAMK,WAAW,kBACvC8B,KAAKS,mBAAqB5C,EAAMK,WAAW,sBAC3C8B,KAAKU,uBAAyB7C,EAAMK,WAAW,0BAC/C8B,KAAKW,YAAc9C,EAAMK,WAAW,eACpC8B,KAAKY,iBAAmB/C,EAAMK,WAAW,oBACzC8B,KAAKa,gBAAkBhD,EAAMK,WAAW,mBACxC8B,KAAKc,iBAAmBjD,EAAMK,WAAW,oBACzC8B,KAAKe,aAAelD,EAAMK,WAAW,gBAGrC8B,KAAKZ,SAAWA,EAEO,cAAnBY,KAAKf,gBACCe,MAAKgB,IACe,aAAnBhB,KAAKf,gBACNe,MAAKiB,IACe,WAAnBjB,KAAKf,gBACNe,MAAKkB,IACe,QAAnBlB,KAAKf,gBACNe,MAAKmB,IACHnB,KAAKC,OACbD,MAAKoB,GAlCoD,CAoChE,CAMD,OAAMJ,SACIK,QAAQC,IAAI,CACdtB,MAAKuB,IACLvB,MAAKwB,IACLxB,MAAKyB,IACLzB,MAAK0B,IACL1B,MAAK2B,IACL3B,MAAK4B,IACL5B,MAAK6B,EAAa,cAClB7B,MAAK6B,EAAa,gBAClB7B,MAAK8B,IACL9B,MAAK+B,IACL/B,MAAKgC,IACLhC,MAAKiC,IACLjC,MAAKkC,IACLlC,MAAKmC,IACLnC,MAAKoC,IACLpC,MAAKqC,IACLrC,MAAKsC,IACLtC,MAAKuC,IACLvC,MAAKwC,YAGHxC,MAAKyC,GACd,CAMD,OAAMxB,SACII,QAAQC,IAAI,CACdtB,MAAKuB,IACLvB,MAAK0C,IACL1C,MAAKwB,IACLxB,MAAKyB,IACLzB,MAAK0B,IACL1B,MAAK+B,IACL/B,MAAKgC,IACLhC,MAAKmC,IACLnC,MAAKqC,KAEZ,CAMD,OAAMnB,SACIG,QAAQC,IAAI,CACdtB,MAAKuB,IACLvB,MAAKwB,IACLxB,MAAK8B,IACL9B,MAAKmC,IACLnC,MAAKuC,KAEZ,CAKD,OAAMpB,SACIE,QAAQC,IAAI,CACdtB,MAAKuB,IACLvB,MAAKwB,IACLxB,MAAKyB,IACLzB,MAAK0B,IACL1B,MAAK2B,IACL3B,MAAK8B,IACL9B,MAAK+B,IACL/B,MAAKgC,IACLhC,MAAKmC,IACLnC,MAAKoC,IACLpC,MAAKqC,IACLrC,MAAKuC,IACLvC,MAAKsC,IACLtC,MAAKwC,KAEZ,CAOD,OAAMpB,SACIC,QAAQC,IAAI,CACdtB,MAAK8B,IACL9B,MAAKgC,IACLhC,MAAKmC,IACLnC,MAAKoC,IACLpC,MAAKqC,KAEZ,CAKD,OAAMd,GACF,MAAMoB,EAAa,SAGnB,GAAwB,IAApB3C,KAAKb,MAAMyD,KAAY,OAE3B,MAAMC,EAAc,CAAC,SAAU,WAAY,OAAQ,WAE7CC,EAAc,IAAIC,IAAI,IAAI/C,KAAKb,OAAO6D,QAAO,EAAEC,EAAGC,KAAgC,WAAlBA,EAAS1L,MAAqBqL,EAAY1C,SAAS+C,EAASC,QAAQR,YAAYtE,UAEhJ+E,EAAa,IAAIL,IAEvB,IAAK,MAAO5E,EAAKE,KAAUyE,EAAa,CACpC,IAAyB,IAArBzE,EAAMgF,WAAqB,SAG/B,MAAMC,EAAkBjF,EAAM8E,OAAOR,YAAYtE,MAEjD,OAAQiF,GACR,IAAK,SACDF,EAAWvE,IAAI,UAAWuE,EAAW5E,IAAI,YAAc,IAAIuE,KAC3DK,EAAW5E,IAAI,WAAWK,IAAIV,EAAKE,GACnC,MACJ,IAAK,WACD+E,EAAWvE,IAAI,YAAauE,EAAW5E,IAAI,cAAgB,IAAIuE,KAC/DK,EAAW5E,IAAI,aAAaK,IAAIV,EAAKE,GACrC,MACJ,IAAK,OACD+E,EAAWvE,IAAI,eAAgBuE,EAAW5E,IAAI,iBAAmB,IAAIuE,KACrEK,EAAW5E,IAAI,gBAAgBK,IAAIV,EAAKE,GACxC,MACJ,IAAK,UACD+E,EAAWvE,IAAI,WAAYuE,EAAW5E,IAAI,aAAe,IAAIuE,KAC7DK,EAAW5E,IAAI,YAAYK,IAAIV,EAAKE,GAG3C,CAGD,IAAK,MAAOF,EAAKE,KAAU+E,EAAY,CACnC,IAAyB,IAArB/E,EAAMgF,WAAqB,SAE/B,MACMlE,EAAQd,EAGRkF,EAAY,CAAEhM,GAJJ4G,EAIiB3G,KAAM,UAEjCgM,QAAgBnC,QAAQC,IAC1B,IAAInC,GAAOsE,KAAIzF,OAAQiF,EAAGC,MACtB,MAAM3L,EAAKyI,MAAK0D,EAAaR,GACvB/L,EAAO6I,MAAK2D,EAAeT,GAC3BU,EAAW5D,MAAK6D,EAAmBX,EAAUP,GAC7CmB,EAAW9D,MAAK+D,EAAcb,GAC9Bc,EAAe,CAACrB,EAAYpL,GAAI0M,KAAKjE,KAAKkE,WAC1CC,EAAQnE,MAAKoE,EAAUlB,EAAUP,GACjC0B,EAAMpG,EAAWQ,IAAIZ,MAAMyG,SAASpB,GACpCqB,EAAOvE,MAAKwE,EAAatB,GACzBuB,QAAoBzE,MAAK0E,EAAgBxB,EAAUP,GAGzD,MAAO,CACHpL,KACAJ,OACA6M,eACAF,WACAO,MACAF,QACAI,OACAX,WACAxO,cAXkB4K,MAAK2E,EAAYhC,EAAY8B,GAYlD,KAKTzE,KAAK4E,WAAWpB,EAASD,EAC5B,CACJ,CAMD,EAAAb,GACI,MAAMC,EAAa,iBAEbrL,EAAS0I,KAAKC,MAAMkD,OAAO7L,OAEjC,GAAIA,EAAQ,CACR,MAAMC,EAAKD,EAAOuN,KACZ1N,EAAO8G,EAAWQ,IAAIZ,MAAMgC,KAAK,oBAEjC+D,EAAW,GADM,GAAG3F,EAAWQ,IAAIZ,MAAMgC,KAAKzL,EAAYuO,SAAoB,KAC/CxL,IAC/B6M,EAAe,CAACrB,EAAYpL,GAAI0M,KAAKjE,KAAKkE,WAC1CY,EAAW7G,EAAWQ,IAAIZ,MAAMkH,YAAYzN,GAAQ0N,eAIpDxB,EAAU,CAAC,CACbjM,KACAJ,OACAyM,WACAI,eACAiB,MARUjF,KAAKC,MAAQ,CAAEiF,KAAMJ,GAAa,KAY1CvB,EAAY,CAAEhM,GAAI,SAAUC,KAAM,UAGxCwI,KAAK4E,WAAWpB,EAASD,EAC5B,CACJ,CAKD,EAAA/B,GACI,MAAMmB,EAAa,UAGbwC,EAAc,CAChBC,QAAS,CAAE7N,GAAI,UAAWJ,KAAM8G,EAAWQ,IAAIZ,MAAMgC,KAAK,4BAI1DvB,KAAK5F,QAAQ2M,SAASnG,UAAYc,KAAKrH,OAAOpB,WAAW4N,EAAYC,QAGzE,MAAM5B,EAAU8B,OAAOC,QAAQJ,GAAa1B,KAAK+B,IAC7C,MAAMjO,EAAKiO,EAAW,GAAGjO,GACnBJ,EAAOqO,EAAW,GAAGrO,KAErByM,EAAW,GADM,GAAG3F,EAAWQ,IAAIZ,MAAMgC,KAAKzL,EAAYuO,SAAoB,KAC/CxL,IAC/B6M,EAAe,CAACrB,EAAYpL,GAAI0M,KAAKjE,KAAKkE,WAChD,MAAO,CACH3M,KACAJ,OACAyM,WACAI,eACH,IAOLhE,KAAK4E,WAAWpB,EAHE,CAAEjM,GAAI,SAAUC,KAAM,UAI3C,CAMD,OAAMiK,GACF,MAAMkB,EAAa,YACb8C,EAAoB,CAAC,SAAU,QAAS,WAGxCC,EAAmB,IAAI3C,IACzB,IAAI/C,KAAKb,OACJ6D,QAAOvO,GAAQA,EAAK,GAAG+C,OAASmL,IAChCc,KAAIhP,IACD,MAAMyO,EAAWzO,EAAK,GACtB,MAAO,CACHyO,EAAS2B,KACT3B,EACH,KAMPyC,EAAa,IAAIrH,KAAKsH,KAAKC,iBAAiBF,YAC7C3C,QAAO,EAAE8C,MAAkBA,EAAYC,WAAW,gBAClDtC,KAAI,EAAEqC,EAAaE,MAChBA,EAAc7O,KAAO6O,EAAc7O,KAAK2I,QAAQ,KAAM,IAC/C,CAACgG,EAAaE,MAIvBxC,QAAgBnC,QAAQC,IAC1BqE,EAAWlC,KAAIzF,OAAQ8H,EAAaE,MAChC,MAAMzO,EAAKyO,EAAcnB,KACnBoB,EAAkBP,EAAiBlH,IAAIsH,GACvCI,EAAoBD,GAAiB1O,GACrCJ,EAAO6O,EAAc7O,KAErByM,EAAW,GADM,GAAG3F,EAAWQ,IAAIZ,MAAMgC,KAAKzL,EAAYuO,SAAoB,KAC/CxL,IAC/B6M,EAAe,CAACrB,EAAYpL,GAAI0M,KAAKjE,KAAKkE,WAC1CG,EAAMpG,EAAWQ,IAAIZ,MAAMyG,SAAS0B,GAEpClC,EAAW,SADFoC,EAAoB,UAAY,KAE/C,IAAIjB,EAAQ,GACRkB,EAAiB,GAErB,GAAID,EACA,GAAIT,EAAkBtF,SAAS8F,EAAgBpB,MAAO,CAClD,MAAMxQ,EAAY2L,KAAKC,MAAMkD,OAAOiD,WAAWH,EAAgBpB,MAC/DsB,EAAiB9R,EAAUgK,MAC3B,MAAMgI,EAAMhS,EAAUgS,IACtBpB,EAAQ,CAAEC,KAAOmB,EAAM,EAAK,GAAGF,GAAkB,KAAKE,IAAQ,GACjE,MAAUJ,EAAgB9C,OAAO9E,MAAMiI,WACpCH,EAAiBF,EAAgB9C,OAAO9E,MAAMA,MAC9C4G,EAAQ,CAAEC,KAAMiB,IAIxB,MACM1B,EAAc,CAChBtN,KAFgB,GAAGA,IAAO,EAAmB,IAAIgP,IAAmB,KAGpEI,YAAaP,EAAcO,aAI/B,MAAO,CACHhP,KACAJ,OACAyM,WACAI,eACAF,WACAO,MACAY,QACA7P,cAVkB4K,MAAK2E,EAAYhC,EAAY8B,GAWlD,KAITjB,EAAQgD,MAAK,CAACC,EAAGC,IAAMD,EAAEtP,KAAKwP,cAAcD,EAAEvP,QAG9C,MACMyP,EAAc,SAGd5G,KAAK4E,WACPpB,EAAQqD,QAAO,SAAUC,EAAKzB,GAO1B,MANe,CAAC,WAAY,UAAW,UAAW,cAAe,cAAe,cACpElF,SAASkF,EAAQlO,MAGzByP,EAAYG,KAAK1B,GAFjByB,EAAIC,KAAK1B,GAINyB,CACV,GAAE,IAbqB,CAAEvP,GAAI,aAAcC,KAAM,WAiBtD,MACMwP,EAAe,SAGfhH,KAAK4E,WACPgC,EAAYC,QAAO,SAAUC,EAAKzB,GAO9B,MANe,CAAC,WAAY,UAAW,UAAW,cAAe,cACtDlF,SAASkF,EAAQlO,MACxB2P,EAAIC,KAAK1B,GAET2B,EAAaD,KAAK1B,GAEfyB,CACV,GAAE,IAbiB,CAAEvP,GAAI,oBAAqBC,KAAM,iBAoBnDwI,KAAK4E,WAAWoC,EAHC,CAAEzP,GAAI,mBAAoBC,KAAM,UAI1D,CAKD,OAAMqK,CAAcc,GAChB,IAAIa,EAASD,EAEb,MAAM0D,IAAgBjH,KAAKC,MAAMkD,OAAO+D,WAAWC,aAAad,IAGhE,GAAmB,eAAf1D,GAAgCsE,GAe/B,GAAmB,iBAAftE,GAAiCsE,EAAe,CACrD1D,EAAY,CAAEhM,GAAI,gBAAiBC,KAAM,UAEzC,MAAM2P,EAAenH,KAAKC,MAAMkD,OAAO+D,WAAWC,aAC5C9I,EAAQ8I,EAAa9I,MACrBgI,EAAMc,EAAad,IAGzB7C,EAAU,CAAC,CACPjM,GAAI,eACJJ,KAAM8G,EAAWQ,IAAIZ,MAAMgC,KAAK,oCAChCmE,aAAc,CAACrB,EAAYA,GAAYsB,KAAKjE,KAAKkE,WACjDe,MAAO,CAAEC,KAAOmB,EAAM,EAAK,GAAGhI,GAAS,KAAKgI,IAAQ,KAE3D,MA7BkD,CAC/C9C,EAAY,CAAEhM,GAAI,cAAeC,KAAM,UAEvC,MAAM4P,EAAapH,KAAKC,MAAMkD,OAAO+D,WAAWE,WAC1C/I,EAAQ+I,EAAW/I,MACnBgI,EAAMe,EAAWf,IAGvB7C,EAAU,CAAC,CACPjM,GAAI,aACJJ,KAAM8G,EAAWQ,IAAIZ,MAAMgC,KAAK,kCAChCmE,aAAc,CAACrB,EAAYA,GAAYsB,KAAKjE,KAAKkE,WACjDe,MAAO,CAAEC,KAAOmB,EAAM,EAAK,GAAGhI,GAAS,KAAKgI,IAAQ,KAE3D,CAkBG7C,GAAWD,GACXvD,KAAK4E,WAAWpB,EAASD,EAEhC,CAMD,OAAM7B,GACF,MAAMiB,EAAa,SAGbxD,EAAQ,IAAI4D,IAAI,IAAI/C,KAAKb,OAC1B6D,QAAOvO,GACa,WAAjBA,EAAK,GAAG+C,QACJ/C,EAAK,GAAG0O,QAAQkE,eAClB5S,EAAK,GAAG4S,cAA2B/I,KAAKgJ,KAAKC,SAKjD/D,QAAgBnC,QAAQC,IAC1B,IAAInC,GAAOsE,KAAIzF,OAAQwJ,EAAItE,MACvB,MAAM3L,EAAKyI,MAAK0D,EAAaR,GACvB/L,EAAO6I,MAAK2D,EAAeT,GAC3BU,EAAW5D,MAAK6D,EAAmBX,EAAUP,GAC7CmB,EAAW9D,MAAK+D,EAAcb,GAC9Bc,EAAe,CAACrB,EAAYpL,GAAI0M,KAAKjE,KAAKkE,WAC1CC,EAAQnE,MAAKoE,EAAUlB,EAAUP,GACjC0B,EAAMpG,EAAWQ,IAAIZ,MAAMyG,SAASpB,GACpCqB,EAAOvE,MAAKwE,EAAatB,GACzBuB,EAAc,CAChBtN,OACAoP,YAAarD,EAASqD,aAG1B,MAAO,CACHhP,KACAJ,OACAyM,WACAI,eACAF,WACAO,MACAF,QACAI,OACAnP,cAVkB4K,MAAK2E,EAAYhC,EAAY8B,GAWlD,KAITjB,EAAQgD,MAAK,CAACC,EAAGC,IAAMD,EAAEtP,KAAKwP,cAAcD,EAAEvP,QAG9C6I,KAAK4E,WAAWpB,EAlCE,CAAEjM,GAAI,UAAWC,KAAM,UAmC5C,CAMD,OAAMmK,GACF,MAAMgB,EAAa,OACb8E,EAAY,CACdC,gBAAiB,oBACjBC,aAAc,iBACdC,SAAU,iBACVlK,MAAO,cACPvE,MAAO,cACP0O,QAAS,gBACTC,MAAO,eAILC,EAAW,IAAIhF,IAErB,IAAK,MAAO5E,EAAKE,KAAU2B,KAAKb,MAAO,CACnC,GAAmB,SAAfd,EAAM7G,KAAiB,SAC3B,IAAyB,IAArB6G,EAAMgF,WAAqB,SAE/B,MACMjH,EAAUqL,EADCpJ,EAAM8E,QAAQ6E,UAAY3J,EAAM4J,UAGjDF,EAASlJ,IAAIzC,EAAS2L,EAASvJ,IAAIpC,IAAY,IAAI2G,KACnDgF,EAASvJ,IAAIpC,GAASyC,IAAIV,EAAKE,EAClC,CAED,IAAK,MAAOF,EAAKE,KAAU0J,EAAU,CACjC,MACM5I,EAAQd,EAGRkF,EAAY,CAAEhM,GAJJ4G,EAIiB3G,KAAM,UAEjCgM,QAAgBnC,QAAQC,IAC1B,IAAInC,GAAOsE,KAAIzF,OAAQiF,EAAGC,MACtB,MAAM3L,EAAKyI,MAAK0D,EAAaR,GACvB/L,EAAO6I,MAAK2D,EAAeT,GAC3BU,EAAW5D,MAAK6D,EAAmBX,EAAUP,GAC7CmB,EAAW9D,MAAK+D,EAAcb,GAC9Bc,EAAe,CAACrB,EAAYpL,GAAI0M,KAAKjE,KAAKkE,WAC1CC,EAAQnE,MAAKoE,EAAUlB,EAAUP,GACjC0B,EAAMpG,EAAWQ,IAAIZ,MAAMyG,SAASpB,GACpCqB,EAAOvE,MAAKwE,EAAatB,GACzBuB,QAAoBzE,MAAK0E,EAAgBxB,EAAUP,GAEzD,MAAO,CACHpL,KACAJ,OACA6M,eACAF,WACAO,MACAF,QACAI,OACAX,WACAxO,cAVkB4K,MAAK2E,EAAYhC,EAAY8B,GAWlD,KAKTzE,KAAK4E,WAAWpB,EAASD,EAC5B,CACJ,CAMD,OAAM3B,GACF,IAAKtD,KAAK4J,QAAQ1J,IAAI,sBAAsB2J,OAAQ,OAEpD,MAAMxF,EAAa,aACbyF,EAAiBnK,EAAWQ,IAAIZ,MAAMgC,KAAKzL,EAAYuO,IACvD0F,EAAcrI,KAAKC,MAAMqI,QAAQ,oBAAqB,gBAAkB,GAIxE9E,EAAU,GAEV4D,EAAapH,KAAKC,MAAMmH,YAAY/I,MACpCkK,EAAsBnB,GAAciB,GAAaG,QAAU,GAE7DD,EAAsB,GACtB/E,EAAQuD,KAAK,CACTxP,GAAI,kBACJJ,KAAMmH,KAAKuB,KAAK4I,OAAO,+CAAgD,CAAEC,GAAIH,IAC7E3E,SAAU,GAAGwE,MAAmB9J,KAAKuB,KAAK8I,SAAS,gDAAgD7I,QAAQ,UAAW,MACtHkE,aAAc,CAACrB,EAAY,mBAAmBsB,KAAKjE,KAAKkE,aAIhE,MAAM0E,QAA0BvH,QAAQC,IACpC,IAAI+G,GAAa5E,KAAIzF,MAAO6K,IACxB,MAAMtR,EAAKsR,GAAYC,KACjB3R,EAAO0R,GAAY1R,KACnByM,EAAW,GAAGwE,MAAmBjR,IACjC6M,EAAe,CAACrB,EAAYpL,GAAI0M,KAAKjE,KAAKkE,WAC1CG,EAAMpG,EAAWQ,IAAIZ,MAAMyG,SAAS,2CACpCyE,EAAYF,GAAYC,WAAcE,SAASH,GAAYC,MAAQ,KACnErE,EAAc,CAChBtN,OACAoP,YAAawC,GAAU7D,MAAM+D,SAAW,MAG5C,MAAO,CACH1R,KACAJ,OACA6M,eACAK,MACAT,WACAxO,cAPkB4K,MAAK2E,EAAYhC,EAAY8B,GAQlD,KAITjB,EAAQuD,QAAQ6B,GAGhB5I,KAAK4E,WAAWpB,EA3CE,CAAEjM,GAAI,eAAgBC,KAAM,UA4CjD,CAMD,OAAMsK,GACF,MAAMa,EAAa,aAEbuG,EAAsBlJ,KAAKC,OAAOkD,QAAQ3O,YAAY2U,WAAa,KAGnE3F,EAAU,GAEhB,GAAuB,WAAnBxD,KAAKf,UAAwB,CAC7B,MAAMzK,EAAawL,KAAKC,MAAQD,KAAKC,MAAMkD,OAAO3O,WAAayJ,EAAWQ,IAAIZ,MAAMgC,KAAK,wBACnFuJ,EAAWnL,EAAWQ,IAAIZ,MAAMgC,KAAK,wBACrC1I,EAAO6I,KAAKqJ,kBAAoBxT,EAAmBY,YAAc2S,EAAWA,EAE5ExF,EAAW,GADM,GAAG3F,EAAWQ,IAAIZ,MAAMgC,KAAKzL,EAAYuO,SAAoB,KAC/CxL,IAC/B6M,EAAe,CAACrB,EAAY,cAAcsB,KAAKjE,KAAKkE,WAEpDJ,EAAW,SADuB,eAAxBoF,EAAwC,UAAY,KAE9DpE,EAAW7G,EAAWQ,IAAIZ,MAAMkH,YAAYvQ,GAAYwQ,eACxDC,EAAQjF,KAAKC,MAAQ,CAAEiF,KAAMJ,GAAa,GAE1CL,EAAc,CAChBtN,KAFgB,GAAGiS,IAAYpJ,KAAKC,OAAS6E,EAAY,IAAIA,IAAa,KAG1EwE,UAAW9U,GAAY8U,WAErBlU,EAAU4K,KAAKC,YAAcD,MAAK2E,EAAYhC,EAAY8B,GAAe,KAG/EjB,EAAQuD,KAAK,CACTxP,GAAI,wBACJJ,OACAyM,WACAI,eACAF,WACAmB,QACA7P,WAEP,CAGD,MAAMmU,EAAUvJ,KAAU,MACpBsF,OAAOC,QAAQvF,KAAKC,MAAMsJ,QAAQvG,QAAO,EAAEC,EAAGuG,OAAiBA,EAAUC,OAASD,EAAUC,MAAMjB,OAAS,IAC3GxI,MAAK0J,IAEX,IAAKH,EAAQ,OAEb,MAAMhR,EAAa,GACbC,EAAa,GAEnB,IAAK,MAAMW,KAASoQ,EACXpQ,EAAM,GAAG8C,KAGVzD,EAAWuO,KAAK5N,GAFhBZ,EAAWwO,KAAK5N,GAMxBZ,EAAWiO,MAAK,CAACC,EAAGC,IAAMD,EAAE,GAAGgD,MAAM9C,cAAcD,EAAE,GAAG+C,SACxDjR,EAAWgO,MAAK,CAACC,EAAGC,IAAMD,EAAE,GAAGgD,MAAM9C,cAAcD,EAAE,GAAG+C,SAExD,MAAME,QAAqBtI,QAAQC,IAC/B,IAAI/I,KAAeC,GAAYiL,KAAIzF,OAAQ4L,EAASJ,MAChD,MAAMjS,EAAK,cAAcqS,IACnBC,EAAOL,EACPJ,EAAWnL,EAAWQ,IAAIZ,MAAMgC,KAAKgK,EAAKJ,QAAUxL,EAAWQ,IAAIZ,MAAMgC,KAAKiK,OAAOC,KAAKC,UAAUJ,IACpGzS,EAAO6I,KAAKqJ,kBAAoBxT,EAAmBgU,EAAKhF,OAASuE,EAAWA,EAE5ExF,EAAW,GADM,GAAG3F,EAAWQ,IAAIZ,MAAMgC,KAAKzL,EAAYuO,SAAoB,KAC/CxL,IAC/B6M,EAAe,CAACrB,EAAYiH,GAAS3F,KAAKjE,KAAKkE,WAE/CJ,EAAW,SADDoF,IAAwBU,EAAW,UAAY,KAEzD9E,EAAW7G,EAAWQ,IAAIZ,MAAMkH,YAAYyE,EAAUS,OAAOC,KAC7DjF,EAAQjF,KAAKC,MAAQ,CAAEiF,KAAMJ,GAAa,GAE1CL,EAAc,CAChBtN,KAFgB,GAAGiS,IAAYpJ,KAAKC,OAAS6E,EAAY,IAAIA,IAAa,KAG1EwE,UAAWE,GAAWF,WAI1B,MAAO,CACH/R,KACAJ,OACAyM,WACAI,eACAF,WACAmB,QACA7P,QATa4K,KAAU,YAAUA,MAAK2E,EAAYhC,EAAY8B,GAAe,KAUhF,KAITjB,EAAQuD,QAAQ4C,GAMhB3J,KAAK4E,WAAWpB,EAHE,CAAEjM,GAAI,aAAcC,KAAM,UAI/C,CAMD,OAAMuK,GAEF,GAAwB,IAApB/B,KAAKb,MAAMyD,KAAY,OAE3B,MAAMD,EAAa,OACbwH,EAAe,IAAIpH,IAEzB,IAAK,MAAO5E,EAAKE,KAAU2B,KAAKb,MAAO,CACnC,MAAMiL,EAAc/L,EAAM8E,QAAQkH,SAAW,EACvCC,EAAiBtK,MAAKsK,EAAgBjM,GACtCkM,EAAYvK,MAAKuK,EAAW,eAAgBlM,GAC5C7G,EAAO6G,EAAM7G,KAEnB,GAAI4S,GAAeG,EAAW,CAC1B,MAAMC,EAAWF,EAAiB,WAAa,aACzCG,EAAkBN,EAAa3L,IAAIgM,IAAa,IAAIzH,IAI1D,GAHA0H,EAAgB5L,IAAIV,EAAKE,GACzB8L,EAAatL,IAAI2L,EAAUC,GAEvBH,EAAgB,CAChB,MAAMI,EAAkBP,EAAa3L,IAAIhH,IAAS,IAAIuL,IACtD2H,EAAgB7L,IAAIV,EAAKE,GACzB8L,EAAatL,IAAIrH,EAAMkT,EAC1B,CACJ,CACJ,CAGD,IAAK,MAAOnT,EAAI4H,KAAUgL,EAAc,CACpC,MAAM/N,EAAUF,EAAU3E,IAAK6E,QAE/B,IAAKA,EAAS,SAGd,MAAMmH,EAAY,CAAEhM,GAAI6E,EAAS5E,KAAM,UAGjCgM,QAAgBnC,QAAQC,IAC1B,IAAInC,GAAOsE,KAAIzF,OAAQiF,EAAGC,MACtB,MAAM3L,EAAKyI,MAAK0D,EAAaR,GACvB/L,EAAO6I,MAAK2D,EAAeT,GAC3BU,EAAW5D,MAAK6D,EAAmBX,EAAUP,GAC7CmB,EAAW9D,MAAK+D,EAAcb,GAC9Bc,EAAe,CAACrB,EAAYpL,GAAI0M,KAAKjE,KAAKkE,WAC1CC,EAAQnE,MAAKoE,EAAUlB,EAAUP,GACjCgI,EAAQ3K,MAAK4K,EAAkB1H,GAC/BmB,EAAMpG,EAAWQ,IAAIZ,MAAMyG,SAASpB,GACpCqB,EAAOvE,MAAKwE,EAAatB,GACzBuB,QAAoBzE,MAAK0E,EAAgBxB,EAAUP,GAGzD,MAAO,CACHpL,KACAJ,OACA6M,eACAF,WACAO,MACAF,QACAwG,QACApG,OACAX,WACAxO,cAZkB4K,MAAK2E,EAAYhC,EAAY8B,GAalD,KAKTzE,KAAK4E,WAAWpB,EAASD,EAC5B,CAGD,GAAI4G,EAAaU,IAAI,YAAa,CAE9B,MAAMC,EAAkB,CAAEvT,GAAI,aAAcC,KAAM,UAE5CQ,EAAamS,EAAa3L,IAAI,YAEpC,IAAK,MAAOjH,EAAIwT,KAAc/S,EAAY,CACtC,MAAMgT,EAAWD,EAAUC,SAG3B,IAAKA,EAASpI,KAAM,SAGpB,MAAMW,EAAY,CACdhM,KACAJ,KAAM4T,EAAU5T,KAChByM,SAAU,UAAUmH,EAAU5T,OAC9BK,KAAM,wBAIJwI,KAAKiL,SAAS1H,EAAWuH,GAE/B,MAAMI,EAAc,IAAInI,IAExB,IAAK,MAAMkG,KAAW+B,EAAU,CACVhL,MAAKuK,EAAW,YAAatB,IAG3CiC,EAAYrM,IAAIoK,EAAQ1R,GAAI0R,EAEnC,CAED,MAAMzF,QAAgBnC,QAAQC,IAC1B,IAAI4J,GAAazH,KAAIzF,OAAQiF,EAAGC,MAC5B,MAAM3L,EAAKyI,MAAK0D,EAAaR,GACvB/L,EAAO6I,MAAK2D,EAAeT,GAC3BU,EAAW5D,MAAK6D,EAAmBX,EAAUP,GAC7CmB,EAAW9D,MAAK+D,EAAcb,GAC9Bc,EAAe,CAACrB,EAAYpL,GAAI0M,KAAKjE,KAAKkE,WAC1CC,EAAQnE,MAAKoE,EAAUlB,EAAUP,GACjCgI,EAAQ3K,MAAK4K,EAAkB1H,GAC/BmB,EAAMpG,EAAWQ,IAAIZ,MAAMyG,SAASpB,GACpCqB,EAAOvE,MAAKwE,EAAatB,GACzBuB,QAAoBzE,MAAK0E,EAAgBxB,EAAUP,GAGzD,MAAO,CACHpL,KACAJ,OACA6M,eACAF,WACAO,MACAF,QACAwG,QACApG,OACAX,WACAxO,cAZkB4K,MAAK2E,EAAYhC,EAAY8B,GAalD,KAKTzE,KAAK4E,WAAWpB,EAASD,EAC5B,CACJ,CACJ,CAMD,OAAMvB,GACF,MAAMW,EAAa,kBACblM,EAAauJ,KAAKC,MAAQD,KAAKC,MAAMkD,OAAO1M,WAAawH,EAAWQ,IAAIZ,MAAMgC,KAAK,wBACnF1I,EAAO8G,EAAWQ,IAAIZ,MAAMgC,KAAK,wBACjCiF,EAAW7G,EAAWQ,IAAIZ,MAAMkH,YAAYtO,GAAYuO,eACxDC,EAAQjF,KAAKC,MAAQ,CAAEiF,KAAMJ,GAAa,GAE1CL,EAAc,CAChBtN,KAFgB,GAAGA,IAAQ6I,KAAKC,OAAS6E,EAAY,IAAIA,IAAa,KAGtEwE,UAAW7S,GAAY6S,WAErBlU,QAAgB4K,MAAK2E,EAAYhC,EAAY8B,GAG7CjB,EAAU,CAAC,CACbjM,GAAI,aACJJ,OACA6M,aAAc,CAACrB,EAAY,cAAcsB,KAAKjE,KAAKkE,WACnDe,QACA7P,YAOJ4K,KAAK4E,WAAWpB,EAHE,CAAEjM,GAAI,mBAAoBC,KAAM,UAIrD,CAKD,EAAAyK,GACI,MAAMU,EAAa,gBACbwI,EAAanL,KAAKC,OAAOkD,OAAOiD,YAAYgF,MAElD,GAAID,GAAY9M,MAAQ,EAAG,CAEvB,MAAMmF,EAAU,CAAC,CACbjM,GAAIoL,EACJxL,KAAM8G,EAAWQ,IAAIZ,MAAMgC,KAAK,gCAChCmE,aAAc,CAACrB,EAAYA,GAAYsB,KAAKjE,KAAKkE,aAI/CX,EAAY,CAAEhM,GAAI,iBAAkBC,KAAM,UAGhDwI,KAAK4E,WAAWpB,EAASD,EAC5B,CACJ,CAKD,EAAArB,GAEI,IAAKlC,KAAKC,QAAUD,KAAKjB,OAAOsM,OAAMpL,GAAwB,cAAfA,EAAMzI,OAAuB,OAE5E,MAAMmL,EAAa,UAGba,EAAU,CACZ,CACIjM,GAAI,cACJJ,KAAM8G,EAAWQ,IAAIZ,MAAMgC,KAAK,kCAChCmE,aAAc,CAACrB,EAAY,eAAesB,KAAKjE,KAAKkE,YAExD,CACI3M,GAAI,OACJJ,KAAM8G,EAAWQ,IAAIZ,MAAMgC,KAAK,mCAChCmE,aAAc,CAACrB,EAAY,QAAQsB,KAAKjE,KAAKkE,aAKjD5F,KAAKC,SAASC,IAAI,OAAQ,mBAC1BgF,EAAQuD,KAAK,CACTxP,GAAI,eACJJ,KAAM8G,EAAWQ,IAAIZ,MAAMgC,KAAK,oCAChCmE,aAAc,CAACrB,EAAY,gBAAgBsB,KAAKjE,KAAKkE,aAQ7DlE,KAAK4E,WAAWpB,EAHE,CAAEjM,GAAI,QAASC,KAAM,UAI1C,CAMD,OAAM2K,GACF,MAAMQ,EAAa,OAGb7J,EAAQkH,KAAKC,MAAQqF,OAAOC,QAAQvF,KAAKC,MAAMnH,OAAS,IAAMwM,OAAOC,QAAQuE,OAAOC,KAAKjR,OAG/F,IAAKA,GAA0B,IAAjBA,EAAM0P,OAAc,OAGlC,MAAMhF,QAAgBnC,QAAQC,IAC1BxI,EAAM2K,KAAIzF,OAAQzG,EAAI+T,MAClB,MAAMnU,EAAOmU,EAAS7B,QAA8B,iBAAb6B,EAAwBrN,EAAWQ,IAAIZ,MAAMgC,KAAKyL,GAAY,IAE/F1H,EAAW,GADM,GAAG3F,EAAWQ,IAAIZ,MAAMgC,KAAKzL,EAAYuO,SAAoB,KAC/CxL,IAC/B6M,EAAe,CAACrB,EAAYpL,GAAI0M,KAAKjE,KAAKkE,WAC1CY,EAAW7G,EAAWQ,IAAIZ,MAAMkH,YAAYuG,EAASpB,KACrDjF,EAAQjF,KAAKC,MAAQ,CAAEiF,KAAMJ,GAAa,GAE1CL,EAAc,CAChBtN,KAFgB,GAAGA,IAAQ6I,KAAKC,OAAS6E,EAAY,IAAIA,IAAa,KAGtEwE,UAAWgC,GAAUhC,WAIzB,MAAO,CACH/R,KACAJ,OACAyM,WACAI,eACAiB,QACA7P,QARY4K,KAAKC,YAAcD,MAAK2E,EAAYhC,EAAY8B,GAAe,KAS9E,KAQTzE,KAAK4E,WAAWpB,EAHE,CAAEjM,GAAI,QAASC,KAAM,UAI1C,CAMD,OAAM4K,GACF,MAAMO,EAAa,kBAGb4I,QAAqBjN,KAAKkN,MAAMhN,IAAI,sBAAsBiN,WAEhE,IAAKF,EAAa3I,KAAM,OAExB,MAAM8I,EAAkB,IAAI3I,IAGtBS,EAAU,GAChB,IAAK,MAAMmI,KAAeJ,EAAc,CACpC,MAAMK,EAAc5S,EAAa2S,EAAYE,KAE7C,IAAKD,EAAa,SAElB,MAAMrU,EAAKoU,EAAYE,IACjBC,EAAa7N,EAAWQ,IAAIZ,MAAMgC,KAAK+L,EAAYzU,MAEnDA,EAAO,GAAG2U,OADE7N,EAAWQ,IAAIZ,MAAMgC,KAAK7D,EAAM4P,EAAYzS,QAAQhC,QAGhEyM,EAAW,GADM,GAAG3F,EAAWQ,IAAIZ,MAAMgC,KAAKzL,EAAYwX,kBAAoB,KAC/CzU,IAC/B6M,EAAe,CAACrB,EAAY,qBAAsBpL,GAAI0M,KAAKjE,KAAKkE,WAChEC,EAAQnE,MAAK+L,EAAeH,EAAY1S,YACxCmL,EAAMuH,EAAYxS,MAClB0L,EAAW7G,EAAWQ,IAAIZ,MAAMkH,YAAY/E,KAAKC,OAAOsJ,OAAOqC,EAAYzS,QAAQ8Q,OAAOC,KAG1F8B,EAAS,CACXzU,KACAJ,OACAyM,WACAI,eACAG,QACAE,MACAY,MATUjF,KAAKC,MAAQ,CAAEiF,KAAMJ,GAAa,MAYhDtB,EAAQuD,KAAKiF,GAEbN,EAAgB7M,IAAI+M,EAAYzS,MAAOuS,EAAgBlN,IAAIoN,EAAYzS,QAAU,IAAI4J,KACrF2I,EAAgBlN,IAAIoN,EAAYzS,OAAO0F,IAAI8M,EAAYE,IAAK,IAAKG,EAAQ7U,KAAM2U,GAClF,OAGK9L,KAAK4E,WAAWpB,EAAS,CAAEjM,GAAI,0BAA2BC,KAAM,WAEtE,IAAK,MAAO2G,EAAKE,KAAUiH,OAAOC,QAAQvJ,GAAQ,CAC9C,MAAMI,EAAU+B,EACV8N,EAAYhO,EAAWQ,IAAIZ,MAAMgC,KAAKxB,EAAMlH,MAC5CwS,EAAe+B,EAAgBlN,IAAIpC,GAEzC,IAAKuN,EAAc,SAGnB,MAAMpG,EAAY,CAAEhM,GAAI6E,EAASjF,KAAM8U,EAAWzU,KAAM,wBAGlDwI,KAAKiL,SAAS1H,EAAW,CAAEhM,GAAI,wBAAyBC,KAAM,WAGpE,MAAMgM,EAAU,IAAImG,GAAclG,KAAI,EAAER,EAAG2I,KAChCA,UAIL5L,KAAK4E,WAAWpB,EAASD,EAClC,CACJ,CAMD,OAAMlB,GACF,MAAMM,EAAa,QAGb4G,EAAUvJ,KAAU,MACpBsF,OAAOC,QAAQvF,KAAKC,MAAMsJ,QAAQvG,QAAO7J,KAAWA,EAAM,GAAGsQ,OAAStQ,EAAM,GAAGsQ,MAAMjB,OAAS,IAC9FxI,MAAK0J,IAEX,IAAKH,EAAQ,OAEb,MAAMhR,EAAa,GACbC,EAAa,GAEnB,IAAK,MAAMW,KAASoQ,EACXpQ,EAAM,GAAG8C,KAGVzD,EAAWuO,KAAK5N,GAFhBZ,EAAWwO,KAAK5N,GAMxBZ,EAAWiO,MAAK,CAACC,EAAGC,IAAMD,EAAE,GAAGgD,MAAM9C,cAAcD,EAAE,GAAG+C,SACxDjR,EAAWgO,MAAK,CAACC,EAAGC,IAAMD,EAAE,GAAGgD,MAAM9C,cAAcD,EAAE,GAAG+C,SAExD,MAAMyC,EAAY,IAAInJ,IAEtBmJ,EAAUrN,IAAI,SAAU,IAAIkE,KAExBxK,EAAWiQ,OAAS,GACpB0D,EAAUrN,IAAI,cAAe,IAAIkE,KAEjCvK,EAAWgQ,OAAS,GACpB0D,EAAUrN,IAAI,cAAe,IAAIkE,KAGrC,IAAK,MAAM5J,IAAS,IAAIZ,KAAeC,GAC9BW,EAAM,GAAG8C,KAGViQ,EAAU1N,IAAI,eAAeK,IAAI1F,EAAM,GAAIA,EAAM,IAFjD+S,EAAU1N,IAAI,eAAeK,IAAI1F,EAAM,GAAIA,EAAM,IAOzD,IAAK,MAAOgF,EAAKE,KAAU6N,EAAW,CAClC,MACM3C,EAASlL,EAGTkF,EAAY,CAAEhM,GAJJ4G,EAIiB3G,KAAM,UAGjCgM,QAAgBnC,QAAQC,IAC1B,IAAIiI,GAAQ9F,KAAIzF,OAAQ4L,EAASJ,MAC7B,MAAMjS,EAAKqS,EACLH,EAAQxL,EAAWQ,IAAIZ,MAAMgC,KAAK2J,EAAUC,QAAUxL,EAAWQ,IAAIZ,MAAMgC,KAAKiK,OAAOC,KAAKC,UAAUJ,IACtGzS,EAAO6I,KAAKqJ,kBAAoBxT,EAAmB2T,EAAU3E,OAAS4E,EAAQA,EAC9EL,EAAWK,EAEX7F,EAAW,GADM,GAAG3F,EAAWQ,IAAIZ,MAAMgC,KAAKzL,EAAYuO,SAAoB,KAC/CxL,IAC/B6M,EAAe,CAACrB,EAAYpL,GAAI0M,KAAKjE,KAAKkE,WAC1CJ,EAAY9D,KAAKC,OAASD,KAAKW,aAAe6I,EAAU2C,KAAO,EAAK,uBAAuB3C,EAAU2C,OAAS,GAC9GrH,EAAW7G,EAAWQ,IAAIZ,MAAMkH,YAAYyE,EAAUS,OAAOC,KAC7DjF,EAAQjF,KAAKC,MAAQ,CAAEiF,KAAMJ,GAAa,GAE1CL,EAAc,CAChBtN,KAFgB,GAAGiS,IAAYpJ,KAAKC,OAAS6E,EAAY,IAAIA,IAAa,KAG1EwE,UAAWE,GAAWF,WAI1B,MAAO,CACH/R,KACAJ,OACAiS,WACAxF,WACAI,eACAF,WACAmB,QACA7P,QAVa4K,KAAU,YAAUA,MAAK2E,EAAYhC,EAAY8B,GAAe,KAWhF,KAKTzE,KAAK4E,WAAWpB,EAASD,EAC5B,CACJ,CAMD,EAAAmG,GACI,IAAK1J,KAAKjB,OAAQ,OAClB,MAAMqN,EAAepM,KAAKjB,OAAO0E,KAAIxD,GAASqF,OAAOC,QAAQtF,EAAMsJ,QAAQvG,QAAO7J,KAAWA,EAAM,GAAGsQ,OAAStQ,EAAM,GAAGsQ,MAAMjB,OAAS,MACjI6D,EAAkBC,KAAKC,OAAOH,EAAa3I,KAAI+I,GAAYA,EAAShE,UAE1E,OADyB4D,EAAaK,MAAKD,GAAYA,EAAShE,SAAW6D,IACnDrJ,QAAO0J,GAAiBN,EAAaf,OAAMmB,GAAYA,EAASG,MAAKxT,GAASA,EAAM,KAAOuT,EAAc,QACpI,CAMD,OAAMpK,GACF,MAAMK,EAAa,QAGbmI,EAAkB,CAAEvT,GAAI,SAAUC,KAAM,UAExCoV,EAAsB,IAAI5M,KAAKb,OAAO6D,QAAOvO,GAAyB,sBAAjBA,EAAK,GAAG+C,OAEnE,IAAK,MAAMqV,KAAqBD,EAAqB,CACjD,MAAME,EAAmB,UAAUD,EAAkB,GAAG1V,KAAK4V,QAAQ,CAAEC,YAAa,IAAKC,QAAQ,MAK3FC,EAAgB,CAClB3V,GAAIuV,EACJ3V,KANuB0V,EAAkB,GAAG1V,KAO5CK,KAAM,iBACNyN,MAPmBjF,MAAKmN,EAAgBN,EAAkB,WAWxD7M,KAAKiL,SAASiC,EAAepC,GAGnC9K,KAAKoN,aAAaF,GAElB,MAAMG,QAAkBR,EAAkB,GAAGS,eACvCC,EAAeF,EAAUG,OAAOxK,QAAOyK,GAASA,EAAMtF,OAAOK,OAAS,IAE5E,IAAK,MAAMiF,KAASnI,OAAOC,QAAQgI,GAAe,CAC9C,MAAMG,EAAaD,EAAM,GAAGlW,GAKtBoW,EAAiB,CACnBpW,GALiB,GAAGuV,KAAoBY,IAMxCvW,KALmByW,OAAO3P,EAAWQ,IAAIZ,MAAMgC,KAAK4N,EAAM,GAAGhE,QAM7DjS,KAAM,wBAIJwI,KAAKiL,SAAS0C,EAAgBT,SAE9BlN,MAAK6N,EAAkBX,EAAeS,EAAgBF,EAAOJ,GAGnE,MAAMS,EAAeL,EAAM,GAAGtF,OACzBnF,QAAO+K,GAAeA,IAAgBA,EAAYC,WAClDvK,KAAI7O,GAASA,EAAMA,QAElByD,EAAS,IAAI0K,IAAI+K,EAAarK,KAAI7O,GAAS,CAACA,EAAM2C,GAAI3C,MAGtD4O,QAAgBnC,QAAQC,IAC1B,IAAIjJ,GAAQoL,KAAIzF,OAAQiF,EAAGC,MACvB,MAAM3L,EAAKyI,MAAK0D,EAAaR,EAAUP,EAAY+K,GAC7CvW,EAAO6I,MAAK2D,EAAeT,GAC3BU,EAAW5D,MAAK6D,EAAmBX,EAAUP,GAC7CmB,EAAW9D,MAAK+D,EAAcb,GAC9Bc,EAAehE,MAAKiO,EAAuB/K,EAAUP,EAAY+K,GACjEvJ,EAAQnE,MAAKoE,EAAUlB,EAAUP,GACjC0B,EAAMpG,EAAWQ,IAAIZ,MAAMyG,SAASpB,GACpCuB,QAAoBzE,MAAK0E,EAAgBxB,EAAUP,EAAY+K,GAGrE,MAAO,CACHnW,KACAJ,OACAyM,WACAI,eACAF,WACAO,MACAF,QACA/O,cAVkB4K,MAAK2E,EAAYhC,EAAY8B,GAWlD,KAKTzE,KAAK4E,WAAWpB,EAASmK,EAC5B,CACJ,CACJ,CASD,OAAME,CACFX,EACAS,EACAF,EACAJ,GAEA,MAAMa,EAA4B,aAAhBT,EAAM,GAAGlW,GACrB4W,EAAad,EAAUc,WACvBC,EAAcf,EAAUe,YACxBC,EAAWhB,EAAUgB,SACrBC,EAAajB,EAAUiB,WAG7B,IAAKF,IAAgBF,GAAaG,GAAW,OAE7C,IAAKD,GAAgBE,IAAeH,EAAa,OAEjD,MAAMxL,EAAa,YACb4L,EAAQvO,KAAKC,MAAMkD,OAAO+D,UAAUqH,MACpCC,EAAQf,EAAM,GAAGgB,KACjBC,EAAY,EAAgB,QAAU,OAAOjB,EAAM,GAAGlW,KACtDoX,EAA0B,UAAdD,EAAyBH,GAAOlI,IAAMmI,GAAOnI,IAEzDpB,EAAQ,CAAEC,KAAOyJ,GAAY,EAAK,IADF,UAAdD,EAAyBH,GAAOlQ,MAAQmQ,GAAOnQ,QACV,KAAKsQ,IAAa,IAE/EhB,EAAepJ,KAAO,CAAEU,SAGxBjF,KAAKoN,aAAaO,GAElB,MAAMvF,EAAiBnK,EAAWQ,IAAIZ,MAAMgC,KAAKzL,EAAYQ,OAGvD4O,EAAU,CACZ,CACIjM,GAAI,GAAG8V,EAAU9V,MAAMmX,iBACvBvX,KAAM,IACNyM,SAAU,GAAGwE,MAAmB8E,EAAc/V,SAASwW,EAAexW,UACtE6M,aAAc,CAACrB,EAAY,GAAG0K,EAAU9V,MAAMmX,kBAA0BzK,KAAKjE,KAAKkE,WAClFJ,SAAU,UAEd,CACIvM,GAAI,GAAG8V,EAAU9V,MAAMmX,iBACvBvX,KAAM,IACNyM,SAAU,GAAGwE,MAAmB8E,EAAc/V,SAASwW,EAAexW,UACtE6M,aAAc,CAACrB,EAAY,GAAG0K,EAAU9V,MAAMmX,kBAA0BzK,KAAKjE,KAAKkE,WAClFJ,SAAU,WAKlB9D,KAAK4E,WAAWpB,EAASmK,EAC5B,CAKD,OAAMlL,GACF,MAAME,EAAa,iBAGbiM,EAAS,IAAItQ,KAAKsH,KAAKiJ,eAAe7O,KAAKC,QAAQ6O,QAGzD,IAAKF,EAAOpG,OAAQ,OAGpB,MAAMsC,EAAkB,CAAEvT,GAAI,UAAWC,KAAM,UAE/C,IAAK,MAAMuX,KAASH,EAAQ,CACxB,IAAII,EAAoB,GACpBC,EAAkB,KACtB,MAAMC,EAAY,GAGZC,EAAgB,WADL,GAAGJ,EAAMta,KAAK8C,MAAMwX,EAAMK,YAErCC,EAAkB,MACpB,IAAIpD,EAAYhO,EAAWQ,IAAIZ,MAAMgC,KAAKkP,EAAMtF,OAChD,GAAIzJ,KAAKc,kBAAoBd,KAAKa,gBAAiB,CAC/C,MAAMyO,EAAcP,EAAMta,KAAK0O,OAAOoM,OAAOlR,MAC7C,GAAIiR,EAAY9G,OAAS,EAAG,CACxByD,GAAa,MACb,IAAK,MAAMuD,KAASF,EAChBrD,GAAa,IAAMuD,EAAQ,GAElC,CACJ,CACD,OAAOvD,CACV,EAZuB,GAalBwD,EAAsB,GAAGxR,EAAWQ,IAAIZ,MAAMgC,KAAKzL,EAAYS,YAAYwa,MAAoBN,EAAMta,KAAK8C,MAC1G6B,EAAQ2V,EAAM1K,KAAO0K,EAAMta,MAAM4P,IACjCqL,EAAY1P,KAAKa,gBACjB4D,QAAoBzE,MAAK0E,EAAgBqK,EAAOpM,GAChDvN,QAAgB4K,MAAK2E,EAAYhC,EAAY8B,GAGnDwK,EAAkB,CACd1X,GAAI4X,EACJhY,KAAMkY,EACNzL,SAAU6L,EACVjY,KAAM,iBACN+G,SAAU,CAAEmR,aACZta,WAGA4K,KAAKY,mBACLqO,EAAgB1Q,SAASnF,MAAQA,GAIrC4G,KAAKiL,SAASgE,EAAiBnE,GAE3BiE,EAAMY,YAAYnH,OAAS,IAE3BwG,EAAoBD,EAAMY,YAAYlM,KAAI,CAACmM,EAAYC,KACnD,MAAMtY,EAAKuY,mBAAmB,GAAGf,EAAMta,KAAK8C,MAAMwX,EAAMK,WAAWQ,EAAWvR,UACxE+K,EAAWwG,EAAWnG,MAC5B,MAAO,CACHlS,KACAJ,KAAM,GACNiS,WACAxF,SAAU,GAAG6L,MAAwBrG,IACrCpF,aAAc,CAAC,2BAA4BzM,GAAI0M,KAAKjE,KAAKkE,WACzDJ,SAAU9D,MAAK+D,EAAc6L,GAC7BzL,MAAOnE,MAAK+L,EAAe6D,EAAWza,KAAMiU,GAC/C,KAIT,MAAM2G,EAAczK,OAAOC,QAAQwJ,EAAMiB,OAAS,GAElD,IAAK,MAAO7R,EAAK8R,KAAeF,EAAa,CACzC,MAAMG,EAAQ/R,EACRgS,EAAe,GAAGhB,KAAiBhR,IACnCiS,EACY,UAAVF,GAAqBnB,EAAMsB,MAAMhK,IAAM,GAAK0I,EAAMsB,MAAM5G,MAAMjB,OAAS,EAChEuG,EAAMsB,MAAM5G,MAEZxL,EAAWQ,IAAIZ,MAAMgC,KAAK3I,EAAaiH,GAAKhH,MAGrDmZ,EAAqB,GAAGb,MAAwBW,IAChDG,EAAmBR,EAAYvH,OAAS,EAC7B,UAAV0H,EACGnZ,EAAYC,MACZD,EAAYE,OAChB,GACAuZ,IAAyBD,GAAmBR,EAAYvH,QAAU,GAGlEiI,EAAiB,CACnBlZ,GAAI4Y,EACJhZ,KAAMiZ,EACNxM,SAAU0M,EACV9Y,KAAM,iBACN+G,SAPa,CAAEmR,UAAWc,EAAqBpX,MAAOmX,IAYpD/M,EAFQ8B,OAAOoL,OAAOT,GAENxM,KAAI,CAACkN,EAAMd,KAC7B,MAAMtY,EAAKuY,mBAAmB,GAAGf,EAAMta,KAAK8C,MAAMwX,EAAMK,WAAWS,KAAWK,GAE9E,IAAIpL,EAEAA,EAHU,GAAG6L,IAAOxQ,SAASH,KAAKJ,UAGvB,GAAG+Q,IAAOC,MAAM,KAAK,GAErB,GAAGD,IAAO7Q,QAAQ7B,EAAWQ,IAAIZ,MAAMgC,KAAK,0BAA2B,IAAIC,QAAQ,IAAK,IAEvG,MAAM3I,EAAQ6I,KAA2B,uBAAI8E,EAAW6L,EACxD,MAAO,CACHpZ,KACAJ,OACA6M,aAAc,CAACrB,EAAYpL,GAAI0M,KAAKjE,KAAKkE,WACzCN,SAAU,GAAG0M,MAAuBnZ,IACvC,IAIC0Z,EAAWf,mBAAmB,GAAGf,EAAMta,KAAK8C,MAAMwX,EAAMK,kBAAkBc,KAC1EY,EAAa7S,EAAWQ,IAAIZ,MAAMgC,KAAK,oBAC7C2D,EAAQuD,KAAK,CACTxP,GAAIsZ,EACJ1Z,KAAM2Z,EACNlN,SAAU,GAAG0M,MAAuBQ,IACpC9M,aAAc,CAACrB,EAAYkO,GAAU5M,KAAKjE,KAAKkE,WAC/C6M,eAAgB/Q,KAAKO,uBAIzB,MAAMyQ,EAAalB,mBAAmB,GAAGf,EAAMta,KAAK8C,MAAMwX,EAAMK,oBAAoBc,KAC9Ee,EAAehT,EAAWQ,IAAIZ,MAAMgC,KAAK,4BAC/C2D,EAAQuD,KAAK,CACTxP,GAAIyZ,EACJ7Z,KAAM8Z,EACNrN,SAAU,GAAG0M,MAAuBW,IACpCjN,aAAc,CAACrB,EAAYqO,GAAY/M,KAAKjE,KAAKkE,WACjD6M,eAAgB/Q,KAAKO,uBAGzB2O,EAAUnI,KAAK,CAAEvD,UAASiN,kBAC7B,CAED,GAAIzQ,KAAKe,aAAc,CACnBf,KAAK4E,WAAWoK,EAAmBC,GACnC,IAAK,MAAMiB,KAAShB,EAChBlP,KAAKiL,SAASiF,EAAMO,eAAgBxB,GACpCjP,KAAK4E,WAAWsL,EAAM1M,QAAS0M,EAAMO,eAE7D,KAAuB,CACHzQ,KAAK4E,WAAW,IAAKsK,EAAU,IAAI1L,SAAW,MAAQwL,GAAoBC,GAC1EC,EAAUgC,QACV,IAAK,MAAMhB,KAAShB,EAChBlP,KAAKiL,SAASiF,EAAMO,eAAgBxB,GACpCjP,KAAK4E,WAAWsL,EAAM1M,QAAS0M,EAAMO,eAE5C,CACJ,CACJ,CAKD,OAAMlO,GACF,MAAMI,EAAa,SAGbmI,EAAkB,CAAEvT,GAAI,UAAWC,KAAM,UAGzCE,EAAUsI,KAAKC,MAAMkD,OAAOK,QAC7BR,QAAOgJ,GAAWA,EAAOxU,OAASmL,IAAeqJ,EAAOvX,KAAK0O,OAAOkH,SAAW,GAAyB,WAApBrK,KAAKC,MAAMzI,MAAyC,QAApBwI,KAAKC,MAAMzI,QAGpI,GAAKE,EAEL,IAAK,MAAM7C,KAAU6C,EAAS,CAC1B,IAAIyZ,EAAmB,GACnBC,EAAyB,GACzBnC,EAAkB,KACtB,MAAMC,EAAY,GAGZC,EAAgB,WADL,GAAGta,EAAOJ,KAAK8C,MAAM1C,EAAOgQ,SAEvCwK,EAAkB,MACpB,IAAIpD,EAAYpX,EAAO4U,MACvB,GAAIzJ,KAAKc,kBAAoBd,KAAKa,gBAAiB,CAC/C,IAAIwQ,EAMJ,GAJIA,EADoB,cAApBrR,KAAKC,MAAMzI,KACI3C,EAAOyc,aAEPzc,EAAO0a,OAEtB8B,EAAa7I,OAAS,EAAG,CACzByD,GAAa,MACb,IAAK,MAAMuD,KAAS6B,EAChBpF,GAAa,IAAMuD,EAAM/F,MAAQ,GAExC,CACJ,CACD,OAAOwC,CACV,EAjBuB,GAkBlBwD,EAAsB,GAAGxR,EAAWQ,IAAIZ,MAAMgC,KAAKzL,EAAYuO,QAAiB9N,EAAO4U,UAAU5U,EAAOJ,KAAK8C,MAC7G6B,EAAQvE,EAAO0c,UAAY1c,EAAOJ,MAAM4P,IACxCqL,EAAY1P,KAAKa,gBACjB4D,QAAoBzE,MAAK0E,EAAgB7P,EAAQ8N,GACjDvN,QAAgB4K,MAAK2E,EAAYhC,EAAY8B,GAiDnD,GA9CAwK,EAAkB,CACd1X,GAAI4X,EACJhY,KAAMkY,EACNzL,SAAU6L,EACVjY,KAAM,iBACN+G,SAAU,CAAEmR,aACZta,WAEA4K,KAAKY,mBAAkBqO,EAAgB1Q,SAASnF,MAAQA,QACf,IAAlC6V,EAAgB1Q,SAASiI,MAAwBvI,EAAWQ,IAAIZ,MAAMK,WAAW,iBAAgB+Q,EAAgB1Q,SAASiI,MAAO,GAG5IxG,KAAKiL,SAASgE,EAAiBnE,GAE3BjW,EAAOsc,kBAAkB3I,QAAUxI,KAAKM,sBAExC6Q,EAAmBtc,EAAOsc,iBAAiBK,SAAQ,CAACC,EAAiB5B,KACjE,GAAgC,YAA5B4B,EAAgBC,QAAuB,CACvC,MAAMC,EAAiB9c,EAAOJ,KAAK0O,OAAOoM,OAAO9X,QAAQma,QAAQC,QAC3DC,EAAmBjd,EAAOJ,KAAK0O,OAAOoM,OAAO9X,QAAQma,QAAQG,UACnE,OAAOJ,EAAelO,KAAIuO,IACtB,MAAMza,EAAKuY,mBAAmB,GAAGjb,EAAOJ,KAAK8C,MAAM1C,EAAOgQ,QAAQgL,KAASmC,KACrE7a,EAAO8G,EAAWQ,IAAIZ,MAAMgC,KAAKpK,EAAeuc,IACtD,MAAO,CACHza,KACAJ,OACAyM,SAAU,GAAG6L,MAAwBtY,IACrC6M,aAAc,CAAC,wBAAyBzM,GAAI0M,KAAKjE,KAAKkE,WACtDJ,SAAU9D,MAAK+D,EAAc,CAAEkO,SAAWD,IAAkBF,IAC5D3N,MAAOnE,MAAK+L,EAAe0F,EAAgBS,OAC9C,GAEjC,CAA+B,CACH,MAAM3a,EAAKuY,mBAAmB,GAAGjb,EAAOJ,KAAK8C,MAAM1C,EAAOgQ,QAAQgL,MAC5D1Y,EAAOsa,EAAgBhI,MAC7B,MAAO,CACHlS,KACAJ,OACAyM,SAAU,GAAG6L,MAAwBtY,IACrC6M,aAAc,CAAC,wBAAyBzM,GAAI0M,KAAKjE,KAAKkE,WACtDC,MAAOnE,MAAK+L,EAAe0F,EAAgBS,OAC3C3N,KAAMvE,MAAKwE,EAAaiN,GAE/B,MAGL5c,EAAOsd,MAAO,CACVtd,EAAOud,kBAAkB5J,SAEzB4I,EAAyBvc,EAAOud,iBAAiB3O,KAAI4O,IACjD,MAAMC,EAAYxC,mBAAmB,GAAGjb,EAAOJ,KAAK8C,MAAM1C,EAAOgQ,QAAQwN,EAAgBhU,UACnF+K,EAAWnL,EAAWQ,IAAIZ,MAAMgC,KAAKwS,EAAgB5I,OAC3D,MAAO,CACHlS,GAAI+a,EACJnb,KAAM,GACNiS,WACAxF,SAAU,GAAG6L,MAAwBrG,IACrCpF,aAAc,CAAC,kBAAmBsO,GAAWrO,KAAKjE,KAAKkE,WACvDJ,SAAU9D,MAAK+D,EAAcsO,GAC7BlO,MAAOnE,MAAK+L,EAAesG,EAAgBH,MAAO9I,GACrD,KAIT,MAAMmJ,EAAgB1d,EAAgB,UAAI,CAACA,KAAWA,EAAO2d,WAAa,CAAC3d,GAE3E,IAAK,MAAM4d,KAAeF,EAAc,CACpC,MAAML,EAAQrd,EAAOqd,MAErB,IAAIhC,EACJ,OAFqB,GAAGuC,EAAYhe,KAAKie,WAAWD,EAAYhe,KAAKke,YAAYF,EAAYhe,KAAKme,YAGlG,IAAK,mBACD1C,EAAQ,QACR,MACJ,IAAK,kBACDA,EAAQ,SACR,MACJ,IAAK,mBACDA,EAAQ,SAGZ,MAAMC,EAAe,GAAGhB,KAAiBe,IACnCE,EAAkBqC,EAA0B,eAC5CxU,EAAWQ,IAAIZ,MAAMgC,KAAK4S,EAAYI,gBACtC5U,EAAWQ,IAAIZ,MAAMgC,KAAK3I,EAAagZ,GAAO/Y,MAC9CmZ,EAAqB,GAAGb,MAAwBW,IAChD0C,EAA4B,WAAV5C,GAAsBgC,EACxC,qFAAqFA,WACrFnb,EAAYmZ,GACZK,EAAmBgC,EAAa/J,OAAS,EAAKzR,EAAYmZ,GAAS,GACnEM,IAAyBD,GAAmBgC,EAAa/J,QAAU,GAGnEiI,EAAiB,CACnBlZ,GAAI4Y,EACJhZ,KAAMiZ,EACNxM,SAAU0M,EACVnb,KAAM2d,EACNtb,KAAM,iBACN+G,SARa,CAAEmR,UAAWc,EAAqBpX,MAAOmX,SAWd,IAAjCE,EAAelS,SAASiI,MAAwBvI,EAAWQ,IAAIZ,MAAMK,WAAW,iBACvFuS,EAAelS,SAASiI,MAAO,GAGnC,MAAMhD,EAAUiP,EAAYM,SAAStP,KAAI,CAACuP,EAASnD,KAC/C,MAAMtY,EAAKuY,mBAAmB,GAAGjb,EAAOJ,KAAK8C,MAAM1C,EAAOgQ,QAAQgL,KAAWK,GAEvEpL,EADQkO,EAAQvJ,MAAMtJ,SAASH,KAAKJ,UAEpCoT,EAAQvJ,MAAMmH,MAAM,KAAK,GACzBoC,EAAQvJ,MAAM3J,QAAQ7B,EAAWQ,IAAIZ,MAAMgC,KAAK,0BAA2B,IAAIC,QAAQ,IAAK,IAC5F3I,EAAQ6I,KAA2B,uBAAI8E,EAAWkO,EAAQvJ,MAChE,MAAO,CACHlS,KACAJ,OACA6M,aAAc,CAACrB,EAAYpL,GAAI0M,KAAKjE,KAAKkE,WACzCN,SAAU,GAAG0M,MAAuBnZ,IACvC,IAIC0Z,EAAWf,mBAAmB,GAAGjb,EAAOJ,KAAK8C,MAAM1C,EAAOgQ,eAAeqL,KACzEY,EAAa7S,EAAWQ,IAAIZ,MAAMgC,KAAK,oBAC7C2D,EAAQuD,KAAK,CACTxP,GAAIsZ,EACJ1Z,KAAM2Z,EACNlN,SAAU,GAAG0M,MAAuBQ,IACpC9M,aAAc,CAACrB,EAAYkO,GAAU5M,KAAKjE,KAAKkE,WAC/C6M,eAAgB/Q,KAAKO,uBAIzB,MAAMyQ,EAAalB,mBAAmB,GAAGjb,EAAOJ,KAAK8C,MAAM1C,EAAOgQ,iBAAiBqL,KAC7Ee,EAAehT,EAAWQ,IAAIZ,MAAMgC,KAAK,4BAU/C,GATA2D,EAAQuD,KAAK,CACTxP,GAAIyZ,EACJ7Z,KAAM8Z,EACNrN,SAAU,GAAG0M,MAAuBW,IACpCjN,aAAc,CAACrB,EAAYqO,GAAY/M,KAAKjE,KAAKkE,WACjD6M,eAAgB/Q,KAAKO,uBAIrBkS,EAAYQ,iBAAmBR,EAAYS,WAAY,CACvD,MAAMze,EAAOuL,KAAKC,MAAMd,MAAMX,IAAIiU,EAAYQ,gBAE9C,GAAKxe,EASE,CACH,MAAM8C,EAAKyI,MAAK0D,EAAajP,GACvB0C,EAAO6I,MAAK2D,EAAelP,GACjC+O,EAAQuD,KAAK,CACTxP,KACAJ,OACAyM,SAAU,GAAG0M,MAAuBnZ,IACpC6M,aAAc,CAACrB,EAAYpL,GAAI0M,KAAKjE,KAAKkE,YAEhD,KAlBU,CACP,MAAM3M,EAAK,SACLJ,EAAO8G,EAAWQ,IAAIZ,MAAMgC,KAAK,8BACvC2D,EAAQuD,KAAK,CACTxP,KACAJ,OACAyM,SAAU,GAAG0M,MAAuBnZ,IACpC6M,aAAczM,GAElD,CAUyB,CAED2X,EAAUnI,KAAK,CAAEvD,UAASiN,kBAC7B,CACJ,CAED,GAAIzQ,KAAKe,aAAc,CACnBf,KAAK4E,WAAW,IAAIwM,KAA2BD,GAAmBlC,GAClE,IAAK,MAAMiB,KAAShB,EAChBlP,KAAKiL,SAASiF,EAAMO,eAAgBxB,GACpCjP,KAAK4E,WAAWsL,EAAM1M,QAAS0M,EAAMO,eAE7D,KAAuB,CACHzQ,KAAK4E,WAAW,IAAKsK,EAAU,IAAI1L,SAAW,MAAQ4N,KAA2BD,GAAmBlC,GACpGC,EAAUgC,QACV,IAAK,MAAMhB,KAAShB,EAChBlP,KAAKiL,SAASiF,EAAMO,eAAgBxB,GACpCjP,KAAK4E,WAAWsL,EAAM1M,QAAS0M,EAAMO,eAE5C,CACJ,CACJ,CAKD,EAAAjO,GACI,MAAMG,EAAa,SAGblL,EAAU6N,OAAOoL,OAAO1Q,KAAKC,MAAMkT,WAAW1b,SAAS+Z,SAAQ4B,GAAU9N,OAAOoL,OAAO0C,KAG7F,IAAK3b,EAAQ+Q,OAAQ,OAErB,MAAM6K,EAA2B5b,EAAQuL,QAAOjO,GAAuC,IAA7BA,EAAOue,WAAW9K,SACtE+K,EAAwB9b,EAAQuL,QAAOjO,GAAuC,IAA7BA,EAAOue,WAAW9K,SAGnEjF,EAAY,CAAEhM,GAAI,UAAWC,KAAM,UAGnCgM,EAAU6P,EAAyB5P,KAAI1O,IACzC,MAAMwC,EAAKuY,mBAAmB,GAAG/a,EAAOqe,UAAUre,EAAOye,UAAUze,EAAO0e,YACpEtc,EAAO8G,EAAWQ,IAAIZ,MAAMgC,KAAK9K,EAAO0U,OACxCzF,EAAe,CAACrB,EAAYpL,GAAI0M,KAAKjE,KAAKkE,WAIhD,MAAO,CAAE3M,KAAIyM,eAAc7M,OAAM2M,SAFhB,SADD/O,EAAc,QAAI,UAAY,KAGH,IAI/CiL,KAAK4E,WAAWpB,EAASD,GAEzB,IAAK,MAAMxO,KAAUwe,EAAuB,CACxC,MAAMhc,EAAK,CAACxC,EAAOqe,OAAQre,EAAOye,QAAQvP,KAAK,KACzCyP,EAAezV,EAAWQ,IAAIZ,MAAMgC,KAAK9K,EAAO0U,OAChDkK,EAAmB,GAAGvf,EAAYW,WAAW2e,IAC7CE,EAAe,CACjBrc,KACAJ,KAAMuc,EACN9P,SAAU+P,EACVnc,KAAM,kBAGVwI,KAAKiL,SAAS2I,EAAcrQ,GAG5B,MAAMC,EAAUzO,EAAOue,WAAW7P,KAAIoQ,IAClC,MAAMtc,EAAKuY,mBAAmB,GAAG/a,EAAOqe,UAAUre,EAAOye,UAAUze,EAAO0e,UAAUI,EAAUxV,SACxFlH,EAAO8G,EAAWQ,IAAIZ,MAAMgC,KAAKgU,EAAUpK,OAC3CwI,EAAW4B,EAAU5B,UAAYld,EAAO+e,SAAW/e,EAAOgf,QAEhE,MAAO,CACHxc,KACAJ,OACAyM,SAAU,GAAG+P,MAAqBxc,IAClC6M,aAAc,CAAC,SAAUzM,GAAI0M,KAAKjE,KAAKkE,WACvCJ,SAAU9D,MAAK+D,EAAc,CAAEkO,aAClC,IAILjS,KAAK4E,WAAWpB,EAASoQ,EAC5B,CACJ,CAED,EAAAlQ,CAAcsQ,EAAQrR,EAAY+K,GAC9B,MAAuB,UAAf/K,EAA0B,GAAGqR,EAAOzc,IAAMyc,EAAOnI,OAAO6B,IAAesG,EAAOzc,IAAMyc,EAAOnI,GACtG,CAED,EAAAlI,CAAgBqQ,GACZ,OAAOA,GAAQ7c,MAAQ6c,GAAQvK,OAAS,EAC3C,CAED,EAAA5F,CAAoBmQ,EAAQrR,GACxB,MAAMxL,EAAO6I,MAAK2D,EAAeqQ,GAC3B5L,EAAiB,GAAGnK,EAAWQ,IAAIZ,MAAMgC,KAAKzL,EAAYuO,SAAoB,GACpF,OAAOqR,EAAOpQ,UAAY,GAAGwE,IAAiBjR,GACjD,CAED,EAAA4M,CAAeiQ,GACX,GAAI1O,OAAO2O,OAAOD,EAAQ,YAAa,CAEnC,MAAO,SADUA,EAAOE,SAAwB,GAAZ,WAEvC,CACD,GAAI5O,OAAO2O,OAAOD,EAAQ,YAAa,CAEnC,MAAO,SADSA,EAAe,SAAI,UAAY,IAElD,CACJ,CAED,EAAA/F,CAAwB+F,EAAQrR,EAAY+K,GACxC,MAAMyG,EAAiBH,GAAQI,cAAc7c,GAE7C,MAAO,CAACoL,EAD0B,UAAfA,EAA0B,GAAGwR,KAAkBzG,KAAcsG,EAAOzc,IAAMyc,EAAOnI,MAAQ7L,MAAK0D,EAAasQ,EAAQrR,EAAY+K,IACnHzJ,KAAKjE,KAAKkE,UAC5C,CAED,EAAAE,CAAW4P,EAAQrR,GACf,MAAMa,EAAUwQ,EAAO7Q,QAAQK,QAEzBF,EAAkB0Q,EAAO7Q,QAAQR,YAAYtE,MAC7CgW,EAAc,EAAYC,UAAU9Q,GAAW,IAAInF,MAAO,IAAM,KAChEkW,EAAYP,EAAO7Q,QAAQqR,MAAMnW,MACjCoW,EAAaT,EAAOS,WACpBC,EAA2B,UAAf/R,EAA0B4R,EALxB,CAAC,OAAQ,WAAY,WAK4BpU,SAASmD,GAAoBA,EAAkB+Q,GAAeI,EAC7Htd,EAAO6I,MAAK2D,EAAeqQ,GACjC,OAAOhU,MAAK+L,EAAe2I,EAAUvd,EACxC,CAQD,EAAAgW,CAAiBN,GACb,MAAM1D,EAAY0D,EAAkB1D,UAC9BwL,EAAkC,mBAAjBxL,EAAUyL,GAC3BzL,EAAUyL,KAAKvW,MACf8K,EAAUyL,GAAGvW,MACbwW,EAAsB1L,EAAUc,MAAMC,IAK5C,MAAO,GAJkB2K,GAAuB,EAC1C,GAAG5W,EAAWQ,IAAIZ,MAAMgC,KAAK,+BAA+BgV,IAC5D,GAAG5W,EAAWQ,IAAIZ,MAAMgC,KAAK,8BAA8BgV,OAC7C,GAAG5W,EAAWQ,IAAIZ,MAAMgC,KAAK,4BAA4B8U,KAEhF,CAOD,EAAAzU,GACI,MAAM4U,EAAe,CAAC,YAAa,OAC7B/V,EAASgW,OAAOC,OAAOC,WAAWxR,KAAI9K,GAASA,EAAMsH,QAC3D,GAAIlB,EAAOsM,OAAMpL,GAAS6U,EAAa3U,SAASF,EAAMzI,QAAU,OAAOuH,CAC1E,CAQD,EAAAuL,CAAiB7V,GACb,MACMygB,EAAYzgB,EAAK0O,OAAOgS,UAAUD,UAExC,QAAIlV,KAAKS,uBAHU,CAAC,OAAQ,QAIbN,SAAS+U,IAAezgB,EAAK0O,OAAOiS,aAAa/W,OAAOmK,OAE1E,CAED,EAAA+B,CAAY8K,EAAW5gB,GACnB,MAAwC,WAApCA,EAAK0O,OAAOgS,UAAUD,WACnBlV,MAAKsV,EAAiBD,EAAW5gB,EAC3C,CASD,EAAA6gB,CAAkBD,EAAW5gB,GACzB,MAAwC,WAApCA,EAAK0O,OAAOgS,UAAUD,YACE,SAAxBlV,KAAKQ,iBACS,cAAd6U,GAAqD,eAAxBrV,KAAKQ,gBACpB,iBAAd6U,GAAwD,kBAAxBrV,KAAKQ,gBAE5C,CAQD,EAAAgE,CAAc/P,GAEV,MAAO,CACHwQ,MAAO,CAAEC,KAFQlF,MAAKuV,EAAiB9gB,IAAS,IAIvD,CAQD,EAAA8gB,CAAkB9gB,GACd,MAAM4V,EAAW5V,GAAM0O,QAAQkH,UAAUhM,MACzC,OAAQgM,EAAW,EAAKA,EAAW,EACtC,CAQD,EAAA0B,CAAgBC,EAAQwJ,EAAQ,IAC5B,OAAI1iB,EAAkBkZ,GACX,aAAarY,EAAYqY,qBAA0BwJ,UAEvD7hB,EAAYqY,EACtB,CAQD,EAAApB,CAAmB1H,GACf,IAAIgS,EAAY,GAChB,GACK,SADGhS,GAAUgS,UAGVA,EADwB,IAAxBhS,GAAUuS,UACE,QAEA,aAIhBP,EAAYhS,GAAUgS,UAG1B,MAAM9f,EAAU6I,EAAWQ,IAAIZ,MAAMgC,KAAK5K,EAAgBigB,IAAY9f,UAAY,GAClF,OAAOH,EAAgBigB,IAAY/f,KAAK2K,QAAQ,cAAe1K,IAAY,EAC9E,CAQD,OAAMsP,CAAiBsP,EAAQrR,EAAY+S,EAAY,MACnD,GAA6B,SAAzB1V,KAAK2V,kBAA+B3B,EAAQ,MAAO,GAClD,GAA6B,aAAzBhU,KAAK2V,gBAAgC,OAAO3B,EAAO7c,MAAQ,GAIpE,IAAIye,EAQJ,GALIA,EALoB,CAAC,iBAAkB,UAIvBzV,SAASwC,SACRqR,EAAOvf,KAAKohB,oBAEZ7B,EAAO6B,eAGvBD,EAAU,MAAO,GAEtB,OAAQjT,GACR,IAAK,OACD,MAAO,CACHxL,KAAM6c,EAAO7c,KACboP,YAAaqP,EAASrP,aAAalI,MACnCyX,OAAQF,EAASE,OACjBvG,OAAQqG,EAASrG,OACjBwG,QAASH,EAASI,YAE1B,IAAK,QAED,MAAO,CACH7e,KAAM6c,EAAO7c,KACboP,YAAaqP,EAASrP,aAAalI,MACnC2X,WAAYJ,EAASI,WACrBF,OAAQF,EAASE,OACjBvG,OAAQqG,EAASrG,OACjB0G,UAAWL,EAASM,aAG5B,IAAK,SACD,MAAO,CACH/e,KAAM6c,EAAOvK,MACb0M,qBAAsBnW,MAAKoW,EAAsBpC,GACjD1K,UAAW0K,EAAO1K,UAClB0M,WAAYJ,EAASI,YAAYhT,QAAOqT,GAAyB,2BAAbA,IACpD9G,OAAQyE,EAAOzE,OACf0G,UAAWjC,EAAO1C,cAE1B,QACI,MAAO,CACHna,KAAqB,mBAAfwL,EAAkCqR,EAAOvf,KAAK0C,KAAO6c,EAAO7c,KAClEoP,YAAaqP,EAASrP,aAAalI,MACnC2X,WAAYJ,EAASI,WACrBF,OAAQF,EAASE,OACjBvG,OAAQqG,EAASrG,QAG5B,CASD,OAAM5K,CAAahC,EAAY8B,GAC3B,GAA6B,SAAzBzE,KAAK2V,gBAA4B,MAAO,GAE5C,MAAMxe,EAAO8G,EAAWQ,IAAIZ,MAAMgC,KAAK4E,EAAYtN,MAEnD,GAA6B,aAAzB6I,KAAK2V,gBAAgC,OAAOxe,EAEhD,GAA2B,iBAAhBsN,EAA0B,OAAOA,EAE5C,MAAM6R,EAAW,OAAOnf,SAElBoP,EAActI,EAAWQ,IAAIZ,MAAMgC,KAAK4E,GAAa8B,aAAe9B,GAAa0R,sBAAwB,IAEzGI,EAAa9R,GAAaqR,OAC1B,oBAAoBrR,EAAYqR,OAAO3e,SAAS8G,EAAWQ,IAAIZ,MAAMgC,KAAK4E,EAAYqR,OAAOrM,gBAC7F,GAEA+M,EAAiB/R,GAAauR,WAC9B,+BAA+BvR,EAAYuR,WAAWvS,KAAI4S,GAAY,8BAA8BpY,EAAWQ,IAAIZ,MAAMgC,KAAKwW,cAAoBpS,KAAK,YACvJ,GAEAwS,EAAahS,GAAa8K,OAC1B9K,EAAY8K,OAAO9L,KAAI+L,GAAS,qBAAqBvR,EAAWQ,IAAIZ,MAAMgC,KAAK2P,EAAM/F,kBAAiBxF,KAAK,IAC3G,GAEAyS,EAAcjS,GAAasR,QAC3BtR,EAAYsR,QAAQtS,KAAI+L,GAAS,mCAAmCvR,EAAWQ,IAAIZ,MAAMgC,KAAK2P,EAAM/F,OAAS+F,cAAiBvL,KAAK,IACnI,GAEA0S,EAAgBlS,GAAawR,UAC7BxR,EAAYwR,UAAUxS,KAAI+L,GAAS,6BAA6BvR,EAAWQ,IAAIZ,MAAMgC,KAAK2P,EAAM/F,kBAAiBxF,KAAK,IACtH,GAEA2S,EAAgBnS,GAAa6E,UAC7B,qBAAqB7E,EAAY6E,UAAUtG,QAAO8B,GAAYA,EAASgP,UAASrQ,KAAIqB,GAI3E,qCAHO7G,EAAWQ,IAAIZ,MAAMgC,KAAKiF,EAAS2E,UAErC,GADC3E,EAASA,UAAY,EAAI,IAAM,KACtBA,EAASA,UAAY,gBAE5Cb,KAAK,YACN,GAEA4S,EAAa,CAACN,EAAYE,EAAYC,EAAaC,GAAe1S,KAAK,IAEvE6S,EAAW,EAAe,qBAAqBD,UAAqB,GAI1E,IAAKtQ,IAAgBuQ,IAAaF,EAAe,OAAOzf,EAExD,MAAM4f,EAAc,QAAQT,IAJRQ,GAAYF,EAAiB,iCAAiCE,IAAWF,UAAwB,KAIjErQ,IAAciQ,UAElE,aAAaQ,WAAWC,WAAWF,EAAa,CAAE/Y,OAAO,GAC5D,CAQD,EAAAoY,CAAuBvhB,GAInB,MAAO,GAHcA,GAAQ0R,YAAe,MAAMtI,EAAWQ,IAAIZ,MAAMgC,KAAKhL,GAAQ0R,mBAAqB,KAChF1R,GAAQqiB,gBAAmB,WAAWjZ,EAAWQ,IAAIZ,MAAMgC,KAAK,4DAA4D5B,EAAWQ,IAAIZ,MAAMgC,KAAKhL,GAAQqiB,uBAAyB,KAC/LriB,GAAQsiB,QAAW,OAAOlZ,EAAWQ,IAAIZ,MAAMgC,KAAK,oDAAoD5B,EAAWQ,IAAIZ,MAAMgC,KAAKhL,GAAQsiB,eAAiB,IAE/K,EACJ,ICvnEK,IAACC,EAAW,KAEtBtZ,MAAMC,KAAK,8BAA8BC,MAAOC,IAC5C,MAAMuP,EAASnW,EACfiO,OAAOoL,OAAOlD,GAAQ6J,SAAQC,IAC1BA,EAAMngB,KAAO8G,EAAWQ,IAAIZ,MAAMgC,KAAKyX,EAAMngB,MAC7CmgB,EAAM1T,SAAW,UAAU3F,EAAWQ,IAAIZ,MAAMgC,KAAKyX,EAAM1T,UAAY0T,EAAMngB,OAAO,IAExF,MAAMogB,EAAcjS,OAAOoL,OAAOlD,GAClC4J,EAAW,CACPI,OAAQ,CACJ,CACIC,OAAQ,SACRlgB,GAAI,SACJJ,KAAM8G,EAAWQ,IAAIZ,MAAMgC,KAAK,mBAChC2N,OAAQ,CACJ,IAAKA,EAAOlW,OAAQmgB,OAAQ,mBAGpC,CACIA,OAAQ,UACRlgB,GAAI,UACJJ,KAAM,UACNqW,OAAQ,CACJ,IAAKA,EAAO/V,QAASggB,OAAQ,mBAC7B,IAAKjK,EAAO9V,QAAS+f,OAAQ,oBAEjClZ,SAAU,CAAEmZ,YAAa,MAa7B,CACID,OAAQ,YACRlgB,GAAI,YACJJ,KAAM8G,EAAWQ,IAAIZ,MAAMgC,KAAK,sBAChC2N,OAAQ,CACJ,IAAKA,EAAO7V,QAAS8f,OAAQ,qBAC7B,IAAKjK,EAAO5V,QAAS6f,OAAQ,qBAC7B,IAAKjK,EAAO3V,MAAO4f,OAAQ,mBAC3B,IAAKjK,EAAO1V,UAAW2f,OAAQ,uBAC/B,IAAKjK,EAAOzV,YAAa0f,OAAQ,yBACjC,IAAKjK,EAAOxV,WAAYyf,OAAQ,wBAChC,IAAKjK,EAAOvV,SAAUwf,OAAQ,wBAiBtC,CACIA,OAAQ,SACRlgB,GAAI,SACJJ,KAAM8G,EAAWQ,IAAIZ,MAAMgC,KAAK,0BAChC2N,OAAQ,CACJ,IAAKA,EAAOnV,OAAQof,OAAQ,mBAGpC,CACIA,OAAQ,aACRlgB,GAAI,aACJJ,KAAM8G,EAAWQ,IAAIZ,MAAMgC,KAAK,kCAChC2N,OAAQ,CACJ,IAAKA,EAAOpG,WAAYqQ,OAAQ,0BAChC,IAAKjK,EAAOrG,aAAcsQ,OAAQ,4BAClC,IAAKjK,EAAOhZ,WAAYijB,OAAQ,yBAChC,IAAKjK,EAAOlV,gBAAiBmf,OAAQ,+BACrC,IAAKjK,EAAO1U,MAAO2e,OAAQ,sBAGnC,CACIA,OAAQ,YACRlgB,GAAI,YACJJ,KAAM8G,EAAWQ,IAAIZ,MAAMgC,KAAK,oBAChC2N,OAAQ,CACJ,IAAKA,EAAOjV,WAAYkf,OAAQ,yBAChC,IAAKjK,EAAOhV,WAAYif,OAAQ,2BAGxC,CACIA,OAAQ,UACRlgB,GAAI,UACJJ,KAAM8G,EAAWQ,IAAIZ,MAAMgC,KAAK,oBAChC2N,OAAQ,CACJ,IAAKA,EAAO7H,WAAY8R,OAAQ,sBAChC,IAAKjK,EAAOmK,iBAAkBF,OAAQ,6BACtC,IAAKjK,EAAOoK,gBAAiBH,OAAQ,4BACrC,IAAKjK,EAAO/U,QAASgf,OAAQ,qBAGrC,CACIA,OAAQ,UACRlgB,GAAI,UACJJ,KAAM8G,EAAWQ,IAAIZ,MAAMgC,KAAK,0BAChC2N,OAAQ,CACJ,IAAKA,EAAO9U,OAAQ+e,OAAQ,kBAC5B,IAAKjK,EAAO7U,MAAO8e,OAAQ,iBAC3B,IAAKjK,EAAO5U,cAAe6e,OAAQ,0BACnC,IAAKjK,EAAO3U,MAAO4e,OAAQ,iBAC3B,IAAKjK,EAAOxY,QAASyiB,OAAQ,sBAIzCjK,OAAQ+J,EACX,IC/HK,IAACM,EAAc,KCOlB,SAASC,SAAUC,GAe1B,CDpBAja,MAAMC,KAAK,8BAA8BC,MAAOC,IAI5C4Z,EAAc,MAAMA,oBAAoB5Z,EAAWQ,IAAIoZ,YAYnD,uBAAMG,CAAmBC,EAAOjU,GAC5B,MAAOkU,EAAcC,GAAYnU,EAAa4M,MAAM,KAIpD,GAFmB,CAAC,QAELzQ,SAAS+X,IAAiBlY,KAAKoY,eAC1C,OAAOpY,KAAKqY,aAAarY,KAAKC,MAAOkY,GAGzC,MAAMG,EAAkB,CAAC,aAGzB,GAAItY,KAAKC,MAEL,kBADMD,MAAKuY,EAAcN,EAAOjY,KAAKC,MAAOD,KAAKrH,MAAOuf,EAAcC,GAI1E,MAAMK,EAAmBzD,OAAOC,OAAOC,WAClCjS,QAAQrK,GAAU2f,EAAgBnY,SAASxH,EAAMsH,OAAOzI,QAG7D,IAAK,MAAMmB,KAAS6f,EAAkB,CAClC,MAAMvY,EAAQtH,EAAMsH,YACdD,MAAKuY,EAAcN,EAAOhY,EAAOtH,EAAOuf,EAAcC,EAC/D,CACJ,CASD,uBAAMM,CAAmBR,EAAOjU,GAAgB,CAShD,sBAAM0U,CAAkBT,EAAOX,GAAS,CAWxC,OAAMiB,CAAeN,EAAOhY,EAAOtH,EAAOuf,EAAcC,GACpD,OAAQD,GACR,IAAK,OACDlY,MAAK2Y,EAAkBV,EAAOhY,EAAOkY,GACrC,MACJ,IAAK,UACDnY,MAAK4Y,EAAqBjgB,EAAOwf,GAMxC,CASD,EAAAQ,CAAmBV,EAAOhY,EAAOkY,GAChBlY,EAAMd,MAAMX,IAAI2Z,GACxBU,OAAOZ,EACf,CAQD,OAAMW,CAAsBjgB,EAAOwf,GAC/B,GACK,YADGA,EAEA7Z,KAAK5F,QAAQ2M,SAASnG,UAAYvG,EAAMpB,UAClC+G,KAAK5F,QAAQogB,WAI9B,EACJ,IE1GK,IAACC,EAAgB,KAE3Bjb,MAAMC,KAAK,8BAA8BC,MAAOC,IAI5C8a,EAAgB,MAAMA,sBAAsB9a,EAAWQ,IAAIsa,cAOvD,gBAAAC,GAEI,OADAC,QAAQC,IAAI,8BACL,IAAIpa,CACd,CASD,wBAAAqa,GAGI,MADgB,CAAEC,KADA,gBAGrB,CASD,cAAAC,CAAgBC,GACZ,IAAIC,EAOJ,OAHIA,EAAc,IAAIC,EAGfD,CACV,CAOD,sBAAME,GAGF,OAAOrC,CACV,CAQD,gBAAAsC,CAAkB3B,GAEjB,CAQD,cAAA4B,GAKI,MAAO,CACHC,SAAU,CACNlc,MAAO,8BACPmc,KAAM,qBACNC,SAAUpnB,EAAOC,GACjBwE,KAAM,2BAGjB,EACJ,IC9FL2G,MAAMic,GAAG,8BAA8B/b,UACnCib,QAAQC,IAAI,GAAGzmB,eAIf,MAAMunB,EAAS1b,KAAK4J,QAAQ1J,IAAI9L,EAAOC,IAEvCsmB,QAAQC,IAAI5a,KAAK4J,SAKjB8R,EAAOvb,IAAM,CACTwb,0BPGoC,MOFpClB,iBAEJjb,MAAMoc,KAAK,4BAA6BF,EAAO"}